//
//  This CSharp output file generated by Gardens Point LEX
//  Gardens Point LEX (GPLEX) is Copyright (c) John Gough, QUT 2006-2014.
//  Output produced by GPLEX is the property of the user.
//  See accompanying file GPLEXcopyright.rtf.
//
//  GPLEX Version:  1.2.2
//  Machine:  ubuntu
//  DateTime: 3/28/2018 5:39:34 PM
//  UserName: rmerkel
//  GPLEX input file <parser/C_CPLUSPLUS_CSHARP.Language.analyzer.lex - 3/28/2018 5:39:30 PM>
//  GPLEX frame file <embedded resource>
//
//  Option settings: unicode, verbose, parser, stack, minimize
//  Option settings: classes, compressMap, compressNext, persistBuffer, noEmbedBuffers
//  Fallback code page: Target machine default
//

//
// Revised backup code
// Version 1.2.1 of 24-June-2013
//
//
#define BACKUP
#define STACK
#define PERSIST

using System;
using System.IO;
using System.Text;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Diagnostics.CodeAnalysis;

using QUT.GplexBuffers;

namespace libcppsharp.parser
{   
    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>
    
#if STANDALONE
    //
    // These are the dummy declarations for stand-alone GPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

     internal enum Token
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

     internal abstract class ScanBase
    {
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public abstract int yylex();

        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yywrap")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yywrap")]
        protected virtual bool yywrap() { return true; }

#if BABEL
        protected abstract int CurrentSc { get; set; }
        // EolState is the 32-bit of state data persisted at 
        // the end of each line for Visual Studio colorization.  
        // The default is to return CurrentSc.  You must override
        // this if you want more complicated behavior.
        public virtual int EolState { 
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }
    }
    
     internal interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
#endif // BABEL
    }

#endif // STANDALONE
    
    // If the compiler can't find the scanner base class maybe you
    // need to run GPPG with the /gplex option, or GPLEX with /noparser
#if BABEL
     internal sealed partial class C_CPLUSPLUS_CSHARPScanner : ScanBase, IColorScan
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return currentScOrd; }  // i.e. return YY_START;
             set { currentScOrd = value;   // i.e. BEGIN(value);
                   currentStart = startState[value]; }
        }
#else  // BABEL
     internal sealed partial class C_CPLUSPLUS_CSHARPScanner : ScanBase
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
#endif // BABEL
        
        /// <summary>
        /// The input buffer for this scanner.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public ScanBuff Buffer { get { return buffer; } }
        
        private static int GetMaxParseToken() {
     System.Reflection.FieldInfo f = typeof(Token).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }
        
        static int parserMax = GetMaxParseToken();
        
        enum Result {accept, noMatch, contextFound};

        const int maxAccept = 215;
        const int initial = 216;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;
        const int C_COMMENT = 1;
        const int CPP_COMMENT = 2;
        const int RAW_STRING_PREFIX = 3;
        const int RAW_STRING = 4;
        const int STRING = 5;

#region user code
/*

  C_CPLUSPLUS_CSHARP.Language.analyzer.lex

  Author:
       Roy Merkel <merkel-roy@comcast.net>

  Copyright (c) 2018 Roy Merkel

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
StringBuilder curTokVal = new StringBuilder();
    String rawStringPrefix = null;
    bool handleTrigraphs = false;
    bool handleDigraphs = false;
    bool allowSlashNInString = true;
    bool treatStringSlashNAsNothing = true;
#endregion user code

        int state;
        int currentStart = startState[0];
        int code;      // last code read
        int cCol;      // column number of code
        int lNum;      // current line number
        //
        // The following instance variables are used, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK          
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public short[] nxt;
        public Table(int m, int x, int d, short[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = new int[] {216, 569, 571, 579, 581, 589, 
        0};

#region TwoLevelCharacterMap
    //
    // There are 89 equivalence classes
    // There are 256 character sequence regions
    // There are 19 tables, 4864 entries
    //
    static sbyte[] mLo0 = new sbyte[256] {
/*     '\0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 3, 33, 33, 0, 0, 0, 
/*   '\x10' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x20' */ 33, 48, 78, 53, 11, 52, 49, 65, 55, 56, 41, 44, 60, 42, 40, 50, 
/*      '0' */ 32, 71, 67, 67, 67, 67, 67, 67, 74, 64, 39, 61, 34, 43, 38, 46, 
/*      '@' */ 62, 69, 70, 69, 69, 35, 37, 66, 66, 66, 66, 66, 76, 66, 66, 36, 
/*      'P' */ 72, 66, 77, 66, 66, 75, 66, 66, 68, 66, 66, 47, 2, 54, 51, 12, 
/*      '`' */ 63, 85, 84, 79, 9, 6, 8, 66, 66, 4, 66, 66, 82, 80, 10, 7, 
/*      'p' */ 81, 88, 86, 1, 83, 73, 66, 66, 87, 66, 5, 57, 45, 58, 59, 0, 
/*   '\x80' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x90' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\xA0' */ 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 13, 0, 0, 13, 0, 13, 
/*   '\xB0' */ 0, 0, 13, 13, 13, 13, 0, 13, 13, 13, 13, 0, 13, 13, 13, 0, 
/*   '\xC0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/*   '\xD0' */ 13, 13, 13, 13, 13, 13, 13, 0, 13, 13, 13, 13, 13, 13, 13, 13, 
/*   '\xE0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/*   '\xF0' */ 13, 13, 13, 13, 13, 13, 13, 0, 13, 13, 13, 13, 13, 13, 13, 13 };
    static sbyte[] mLo1 = new sbyte[256] {
/* '\u0100' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u0110' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u0120' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u0130' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u0140' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u0150' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u0160' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u0170' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u0180' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u0190' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u01A0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u01B0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u01C0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u01D0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u01E0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u01F0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13 };
    static sbyte[] mLo3 = new sbyte[256] {
/* '\u0300' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
/* '\u0310' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
/* '\u0320' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
/* '\u0330' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
/* '\u0340' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
/* '\u0350' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
/* '\u0360' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
/* '\u0370' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u0380' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u0390' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u03A0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u03B0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u03C0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u03D0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u03E0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u03F0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13 };
    static sbyte[] mLo22 = new sbyte[256] {
/* '\u1600' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1610' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1620' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1630' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1640' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1650' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1660' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1670' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1680' */ 0, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1690' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u16A0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u16B0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u16C0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u16D0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u16E0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u16F0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13 };
    static sbyte[] mLo24 = new sbyte[256] {
/* '\u1800' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 0, 13, 
/* '\u1810' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1820' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1830' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1840' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1850' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1860' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1870' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1880' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1890' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u18A0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u18B0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u18C0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u18D0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u18E0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u18F0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13 };
    static sbyte[] mLo29 = new sbyte[256] {
/* '\u1D00' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1D10' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1D20' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1D30' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1D40' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1D50' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1D60' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1D70' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1D80' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1D90' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1DA0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1DB0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1DC0' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
/* '\u1DD0' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
/* '\u1DE0' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
/* '\u1DF0' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31 };
    static sbyte[] mLo32 = new sbyte[256] {
/* '\u2000' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 14, 14, 0, 0, 
/* '\u2010' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2020' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 14, 14, 14, 14, 0, 
/* '\u2030' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 
/* '\u2040' */ 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2050' */ 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2060' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2070' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2080' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2090' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u20A0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u20B0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u20C0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u20D0' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
/* '\u20E0' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
/* '\u20F0' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31 };
    static sbyte[] mLo33 = new sbyte[256] {
/* '\u2100' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2110' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2120' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2130' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2140' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2150' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2160' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2170' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2180' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2190' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u21A0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u21B0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u21C0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u21D0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u21E0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u21F0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo34 = new sbyte[256] {
/* '\u2200' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2210' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2220' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2230' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2240' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2250' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2260' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2270' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2280' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2290' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u22A0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u22B0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u22C0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u22D0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u22E0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u22F0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo36 = new sbyte[256] {
/* '\u2400' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2410' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2420' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2430' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2440' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2450' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2460' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2470' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2480' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2490' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u24A0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u24B0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u24C0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u24D0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u24E0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u24F0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 };
    static sbyte[] mLo39 = new sbyte[256] {
/* '\u2700' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2710' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2720' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2730' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2740' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2750' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2760' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2770' */ 0, 0, 0, 0, 0, 0, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2780' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2790' */ 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u27A0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u27B0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u27C0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u27D0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u27E0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u27F0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo44 = new sbyte[256] {
/* '\u2C00' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2C10' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2C20' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2C30' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2C40' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2C50' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2C60' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2C70' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2C80' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2C90' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2CA0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2CB0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2CC0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2CD0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2CE0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2CF0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 };
    static sbyte[] mLo46 = new sbyte[256] {
/* '\u2E00' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2E10' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2E20' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2E30' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2E40' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2E50' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2E60' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2E70' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2E80' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2E90' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2EA0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2EB0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2EC0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2ED0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2EE0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2EF0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 };
    static sbyte[] mLo48 = new sbyte[256] {
/* '\u3000' */ 0, 0, 0, 0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u3010' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u3020' */ 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3030' */ 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3040' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3050' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3060' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3070' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3080' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3090' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u30A0' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u30B0' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u30C0' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u30D0' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u30E0' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u30F0' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 };
    static sbyte[] mLo49 = new sbyte[256] {
/* '\u3100' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3110' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3120' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3130' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3140' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3150' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3160' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3170' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3180' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3190' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u31A0' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u31B0' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u31C0' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u31D0' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u31E0' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u31F0' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 };
    static sbyte[] mLo249 = new sbyte[256] {
/* '\uF900' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF910' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF920' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF930' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF940' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF950' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF960' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF970' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF980' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF990' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF9A0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF9B0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF9C0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF9D0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF9E0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF9F0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 };
    static sbyte[] mLo253 = new sbyte[256] {
/* '\uFD00' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFD10' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFD20' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFD30' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 
/* '\uFD40' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFD50' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFD60' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFD70' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFD80' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFD90' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFDA0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFDB0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFDC0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFDD0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uFDE0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uFDF0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 };
    static sbyte[] mLo254 = new sbyte[256] {
/* '\uFE00' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFE10' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFE20' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
/* '\uFE30' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFE40' */ 16, 16, 16, 16, 16, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFE50' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFE60' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFE70' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFE80' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFE90' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFEA0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFEB0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFEC0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFED0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFEE0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFEF0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 };
    static sbyte[] mLo255 = new sbyte[256] {
/* '\uFF00' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFF10' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFF20' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFF30' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFF40' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFF50' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFF60' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFF70' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFF80' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFF90' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFFA0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFFB0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFFC0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFFD0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFFE0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFFF0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0 };

    static sbyte[][] map = new sbyte[256][] {
/* '\u00xx' */ mLo0, mLo1, mLo1, mLo3, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\u10xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo22, mLo1, mLo24, mLo1, mLo1, mLo1, mLo1, mLo29, mLo1, mLo1, 
/* '\u20xx' */ mLo32, mLo33, mLo34, mLo34, mLo36, mLo34, mLo34, mLo39, mLo34, mLo34, mLo34, mLo34, mLo44, mLo44, mLo46, mLo44, 
/* '\u30xx' */ mLo48, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, 
/* '\u40xx' */ mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, 
/* '\u50xx' */ mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, 
/* '\u60xx' */ mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, 
/* '\u70xx' */ mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, 
/* '\u80xx' */ mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, 
/* '\u90xx' */ mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, 
/* '\uA0xx' */ mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, 
/* '\uB0xx' */ mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, 
/* '\uC0xx' */ mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, 
/* '\uD0xx' */ mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, 
/* '\uE0xx' */ mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, 
/* '\uF0xx' */ mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo249, mLo249, mLo249, mLo249, mLo253, mLo254, mLo255};

#endregion

#region CompressedCharacterMap
    //
    // There are 89 equivalence classes
    // There are 28 character sequence regions
    // There are 0 tables, 0 entries
    // There are 28 runs, 0 singletons
    // Decision tree depth is 5
    //

    static sbyte MapC(int code)
    { // '\U00010000' <= code <= '\U0010FFFF'
      if (code < 524288) // '\U00010000' <= code <= '\U0007FFFF'
        if (code < 327678) // '\U00010000' <= code <= '\U0004FFFD'
          if (code < 196606) // '\U00010000' <= code <= '\U0002FFFD'
            if (code < 131070) // '\U00010000' <= code <= '\U0001FFFD'
              return (sbyte)17;
            else // '\U0001FFFE' <= code <= '\U0002FFFD'
              if (code < 131072) // '\U0001FFFE' <= code <= '\U0001FFFF'
                return (sbyte)0;
              else // '\U00020000' <= code <= '\U0002FFFD'
                return (sbyte)18;
          else // '\U0002FFFE' <= code <= '\U0004FFFD'
            if (code < 262142) // '\U0002FFFE' <= code <= '\U0003FFFD'
              if (code < 196608) // '\U0002FFFE' <= code <= '\U0002FFFF'
                return (sbyte)0;
              else // '\U00030000' <= code <= '\U0003FFFD'
                return (sbyte)19;
            else // '\U0003FFFE' <= code <= '\U0004FFFD'
              if (code < 262144) // '\U0003FFFE' <= code <= '\U0003FFFF'
                return (sbyte)0;
              else // '\U00040000' <= code <= '\U0004FFFD'
                return (sbyte)20;
        else // '\U0004FFFE' <= code <= '\U0007FFFF'
          if (code < 393216) // '\U0004FFFE' <= code <= '\U0005FFFF'
            if (code < 327680) // '\U0004FFFE' <= code <= '\U0004FFFF'
              return (sbyte)0;
            else // '\U00050000' <= code <= '\U0005FFFF'
              if (code < 393214) // '\U00050000' <= code <= '\U0005FFFD'
                return (sbyte)21;
              else // '\U0005FFFE' <= code <= '\U0005FFFF'
                return (sbyte)0;
          else // '\U00060000' <= code <= '\U0007FFFF'
            if (code < 458752) // '\U00060000' <= code <= '\U0006FFFF'
              if (code < 458750) // '\U00060000' <= code <= '\U0006FFFD'
                return (sbyte)22;
              else // '\U0006FFFE' <= code <= '\U0006FFFF'
                return (sbyte)0;
            else // '\U00070000' <= code <= '\U0007FFFF'
              if (code < 524286) // '\U00070000' <= code <= '\U0007FFFD'
                return (sbyte)23;
              else // '\U0007FFFE' <= code <= '\U0007FFFF'
                return (sbyte)0;
      else // '\U00080000' <= code <= '\U0010FFFF'
        if (code < 786430) // '\U00080000' <= code <= '\U000BFFFD'
          if (code < 655358) // '\U00080000' <= code <= '\U0009FFFD'
            if (code < 589822) // '\U00080000' <= code <= '\U0008FFFD'
              return (sbyte)24;
            else // '\U0008FFFE' <= code <= '\U0009FFFD'
              if (code < 589824) // '\U0008FFFE' <= code <= '\U0008FFFF'
                return (sbyte)0;
              else // '\U00090000' <= code <= '\U0009FFFD'
                return (sbyte)25;
          else // '\U0009FFFE' <= code <= '\U000BFFFD'
            if (code < 720894) // '\U0009FFFE' <= code <= '\U000AFFFD'
              if (code < 655360) // '\U0009FFFE' <= code <= '\U0009FFFF'
                return (sbyte)0;
              else // '\U000A0000' <= code <= '\U000AFFFD'
                return (sbyte)26;
            else // '\U000AFFFE' <= code <= '\U000BFFFD'
              if (code < 720896) // '\U000AFFFE' <= code <= '\U000AFFFF'
                return (sbyte)0;
              else // '\U000B0000' <= code <= '\U000BFFFD'
                return (sbyte)27;
        else // '\U000BFFFE' <= code <= '\U0010FFFF'
          if (code < 851968) // '\U000BFFFE' <= code <= '\U000CFFFF'
            if (code < 786432) // '\U000BFFFE' <= code <= '\U000BFFFF'
              return (sbyte)0;
            else // '\U000C0000' <= code <= '\U000CFFFF'
              if (code < 851966) // '\U000C0000' <= code <= '\U000CFFFD'
                return (sbyte)28;
              else // '\U000CFFFE' <= code <= '\U000CFFFF'
                return (sbyte)0;
          else // '\U000D0000' <= code <= '\U0010FFFF'
            if (code < 917504) // '\U000D0000' <= code <= '\U000DFFFF'
              if (code < 917502) // '\U000D0000' <= code <= '\U000DFFFD'
                return (sbyte)29;
              else // '\U000DFFFE' <= code <= '\U000DFFFF'
                return (sbyte)0;
            else // '\U000E0000' <= code <= '\U0010FFFF'
              if (code < 983038) // '\U000E0000' <= code <= '\U000EFFFD'
                return (sbyte)30;
              else // '\U000EFFFE' <= code <= '\U0010FFFF'
                return (sbyte)0;
    }
#endregion


    static sbyte Map(int code)
    { 
        if (code <= 65535)
            return map[code / 256][code % 256];
        else
            return MapC(code);
    }

    static Table[] NxS = new Table[596] {
/* NxS[   0] */ new Table(0, 0, 0, null), // Shortest string ""
/* NxS[   1] */ // Shortest string "s"
      new Table(33, 61, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 559, -1, 187}),
/* NxS[   2] */ new Table(0, 0, -1, null), // Shortest string "\n"
/* NxS[   3] */ // Shortest string "i"
      new Table(33, 60, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1}),
/* NxS[   4] */ // Shortest string "o"
      new Table(33, 60, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 538, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 178, 
          3, 3, -1, 3, 218, -1}),
/* NxS[   5] */ // Shortest string "d"
      new Table(33, 63, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 526, -1, 3, 3, 172}),
/* NxS[   6] */ // Shortest string "n"
      new Table(33, 64, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 506, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1, 3, 3, 3, 166}),
/* NxS[   7] */ // Shortest string "0"
      new Table(64, 66, -1, new short[] {414, 414, 126, 128, 129, 126, 
          130, 128, 127, 126, 414, 126, 126, 126, -1, 126, 126, 127, 126, 126, 130, 126, 
          126, 129, 126, -1, 126, 412, -1, 126, 126, 127, 126, 126, 126, 126, -1, 413, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 128, -1, -1, 127, 126, 126, -1, -1, 71}),
/* NxS[   8] */ // Shortest string "\t"
      new Table(2, 32, -1, new short[] {411, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 8}),
/* NxS[   9] */ // Shortest string "<"
      new Table(2, 51, -1, new short[] {401, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 120, -1, -1, -1, -1, 121, 
          -1, -1, -1, 122, -1, -1, 402, -1, -1, -1, -1, -1, 123}),
/* NxS[  10] */ // Shortest string ">"
      new Table(2, 42, -1, new short[] {397, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 117, -1, 
          -1, -1, -1, 118}),
/* NxS[  11] */ // Shortest string ":"
      new Table(2, 45, -1, new short[] {391, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, 116, 
          -1, -1, -1, -1, -1, -1, 392}),
/* NxS[  12] */ // Shortest string "."
      new Table(32, 60, -1, new short[] {74, -1, -1, -1, -1, -1, 
          -1, -1, 388, 113, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, -1, -1, 74, -1, -1, 
          -1, 74, -1, -1, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 387}),
/* NxS[  13] */ // Shortest string "*"
      new Table(2, 42, -1, new short[] {385, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 112}),
/* NxS[  14] */ // Shortest string "-"
      new Table(2, 42, -1, new short[] {381, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, 
          -1, -1, 109, 110}),
/* NxS[  15] */ // Shortest string "="
      new Table(2, 42, -1, new short[] {379, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 106, -1, 
          -1, -1, -1, 107}),
/* NxS[  16] */ // Shortest string "+"
      new Table(2, 43, -1, new short[] {377, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 104, 105}),
/* NxS[  17] */ // Shortest string "|"
      new Table(2, 44, -1, new short[] {375, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 102, -1, 103}),
/* NxS[  18] */ // Shortest string "?"
      new Table(2, 46, -1, new short[] {373, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          99, -1, -1, -1, -1, -1, 100, 101}),
/* NxS[  19] */ new Table(0, 0, -1, null), // Shortest string "["
/* NxS[  20] */ // Shortest string "!"
      new Table(2, 42, -1, new short[] {371, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 98}),
/* NxS[  21] */ // Shortest string "&"
      new Table(2, 48, -1, new short[] {369, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 96, -1, -1, -1, -1, -1, 97}),
/* NxS[  22] */ // Shortest string "/"
      new Table(2, 49, -1, new short[] {367, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 93, -1, 94, -1, -1, -1, -1, -1, -1, 95}),
/* NxS[  23] */ // Shortest string "^"
      new Table(2, 42, -1, new short[] {365, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 92}),
/* NxS[  24] */ // Shortest string "%"
      new Table(2, 45, -1, new short[] {351, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 87, 88, 
          -1, -1, -1, 89, -1, -1, 352}),
/* NxS[  25] */ // Shortest string "#"
      new Table(52, 40, -1, new short[] {346, 85, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 345}),
/* NxS[  26] */ new Table(0, 0, -1, null), // Shortest string "]"
/* NxS[  27] */ new Table(0, 0, -1, null), // Shortest string "("
/* NxS[  28] */ new Table(0, 0, -1, null), // Shortest string ")"
/* NxS[  29] */ new Table(0, 0, -1, null), // Shortest string "{"
/* NxS[  30] */ new Table(0, 0, -1, null), // Shortest string "}"
/* NxS[  31] */ new Table(0, 0, -1, null), // Shortest string "~"
/* NxS[  32] */ new Table(0, 0, -1, null), // Shortest string ","
/* NxS[  33] */ new Table(0, 0, -1, null), // Shortest string ";"
/* NxS[  34] */ new Table(0, 0, -1, null), // Shortest string "@"
/* NxS[  35] */ new Table(0, 0, -1, null), // Shortest string "`"
/* NxS[  36] */ // Shortest string "9"
      new Table(64, 66, -1, new short[] {36, 36, 69, 36, 69, 69, 
          69, 36, 70, 69, 36, 69, 69, 69, -1, 69, 69, 70, 69, 69, 69, 69, 
          69, 69, 69, -1, 69, 306, -1, 69, 69, 70, 69, 69, 69, 69, -1, 307, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 36, -1, -1, 70, 69, 69, -1, -1, 71}),
/* NxS[  37] */ // Shortest string "u"
      new Table(33, 60, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 38, 3, 3, 39, 40, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 304, -1}),
/* NxS[  38] */ // Shortest string "U"
      new Table(33, 60, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 39, 40, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 302, -1}),
/* NxS[  39] */ // Shortest string "R"
      new Table(33, 60, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 68, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 300, -1}),
/* NxS[  40] */ new Table(0, 0, -1, null), // Shortest string "\""
/* NxS[  41] */ // Shortest string "c"
      new Table(33, 64, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 284, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1, 3, 3, 3, 64}),
/* NxS[  42] */ // Shortest string "b"
      new Table(33, 61, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 260, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1, 57}),
/* NxS[  43] */ // Shortest string "a"
      new Table(33, 67, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 240, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1, 3, 3, 3, 3, 3, 3, 51}),
/* NxS[  44] */ // Shortest string "x"
      new Table(33, 64, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 219, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1, 3, 3, 3, 45}),
/* NxS[  45] */ // Shortest string "xo"
      new Table(33, 60, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 224, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 48, 
          3, 3, -1, 3, 218, -1}),
/* NxS[  46] */ // Shortest string "xo?:\\\nr"
      new Table(12, 35, -1, new short[] {225, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 226}),
/* NxS[  47] */ new Table(0, 0, -1, null), // Shortest string "xo?:\\\nr_eq"
/* NxS[  48] */ // Shortest string "xor"
      new Table(33, 69, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 226, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1, 3, 3, 3, 3, 3, 3, 3, 3, 49}),
/* NxS[  49] */ // Shortest string "xor_"
      new Table(33, 63, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 231, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1, 3, 3, 50}),
/* NxS[  50] */ // Shortest string "xor_e"
      new Table(33, 60, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 234, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1}),
/* NxS[  51] */ // Shortest string "an"
      new Table(33, 66, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 245, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1, 3, 3, 3, 3, 3, 54}),
/* NxS[  52] */ // Shortest string "an?:\\\nd"
      new Table(12, 35, -1, new short[] {248, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 249}),
/* NxS[  53] */ new Table(0, 0, -1, null), // Shortest string "and_e?:\\\nq"
/* NxS[  54] */ // Shortest string "and"
      new Table(33, 69, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 249, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1, 3, 3, 3, 3, 3, 3, 3, 3, 55}),
/* NxS[  55] */ // Shortest string "and_"
      new Table(33, 63, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 254, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1, 3, 3, 56}),
/* NxS[  56] */ // Shortest string "and_e"
      new Table(33, 60, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 257, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1}),
/* NxS[  57] */ // Shortest string "bi"
      new Table(33, 60, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 265, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 60, 3, 3, 3, 
          3, 3, -1, 3, 218, -1}),
/* NxS[  58] */ new Table(0, 0, -1, null), // Shortest string "bi?:\\\ntand"
/* NxS[  59] */ new Table(0, 0, -1, null), // Shortest string "bi?:\\\ntor"
/* NxS[  60] */ // Shortest string "bit"
      new Table(33, 64, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 268, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 62, 3, 
          3, 3, -1, 3, 218, -1, 3, 3, 3, 61}),
/* NxS[  61] */ // Shortest string "bito"
      new Table(33, 60, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 279, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1}),
/* NxS[  62] */ // Shortest string "bita"
      new Table(33, 67, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 271, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1, 3, 3, 3, 3, 3, 3, 63}),
/* NxS[  63] */ // Shortest string "bitan"
      new Table(33, 60, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 274, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1}),
/* NxS[  64] */ // Shortest string "co"
      new Table(33, 60, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 289, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 66, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1}),
/* NxS[  65] */ new Table(0, 0, -1, null), // Shortest string "co?:\\\nmpl"
/* NxS[  66] */ // Shortest string "com"
      new Table(33, 60, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 291, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 67, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1}),
/* NxS[  67] */ // Shortest string "comp"
      new Table(33, 60, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 293, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1}),
/* NxS[  68] */ new Table(0, 0, -1, null), // Shortest string "R\""
/* NxS[  69] */ // Shortest string "9s"
      new Table(66, 61, -1, new short[] {69, -1, 69, 69, 69, -1, 
          69, 69, -1, 69, 69, 69, -1, 69, 69, 69, 69, 69, 69, 69, 69, 69, 
          69, -1, 69, 331, -1, 69, 69, 69, 69, 69, 69, 69, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 69, 69, 69}),
/* NxS[  70] */ // Shortest string "9e"
      new Table(32, 68, -1, new short[] {82, -1, -1, 69, 69, 69, 
          -1, -1, -1, -1, 335, -1, 335, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 82, -1, 69, 82, 69, 69, 
          69, 82, 69, 69, 82, 69, 69, 69, -1, 69, 69, 69, 69, 69, 69, 69, 
          69, 69, 69, -1, 69, 334, -1, 69, 69, 69, 69, 69, 69, 69}),
/* NxS[  71] */ // Shortest string "0."
      new Table(64, 63, -1, new short[] {74, -1, 72, 74, 72, 72, 
          72, 74, 73, 72, 74, 72, 72, 72, -1, 72, 72, 73, 72, 72, 72, 72, 
          72, 72, 72, -1, 72, 308, -1, 72, 72, 73, 72, 72, 72, 72, -1, 309, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 74, -1, -1, 73, 72, 72}),
/* NxS[  72] */ // Shortest string "0.s"
      new Table(66, 61, -1, new short[] {72, -1, 72, 72, 72, -1, 
          72, 72, -1, 72, 72, 72, -1, 72, 72, 72, 72, 72, 72, 72, 72, 72, 
          72, -1, 72, 321, -1, 72, 72, 72, 72, 72, 72, 72, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 72, 72, 72}),
/* NxS[  73] */ // Shortest string "0.e"
      new Table(32, 68, -1, new short[] {80, -1, -1, 72, 72, 72, 
          -1, -1, -1, -1, 325, -1, 325, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 80, -1, 72, 80, 72, 72, 
          72, 80, 72, 72, 80, 72, 72, 72, -1, 72, 72, 72, 72, 72, 72, 72, 
          72, 72, 72, -1, 72, 324, -1, 72, 72, 72, 72, 72, 72, 72}),
/* NxS[  74] */ // Shortest string ".0"
      new Table(64, 63, -1, new short[] {74, 74, 75, 74, 75, 75, 
          75, 74, 76, 75, 74, 75, 75, 75, -1, 75, 75, 76, 75, 75, 75, 75, 
          75, 75, 75, -1, 75, 310, -1, 75, 75, 76, 75, 75, 75, 75, -1, 311, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 74, -1, -1, 76, 75, 75}),
/* NxS[  75] */ // Shortest string ".0s"
      new Table(66, 61, -1, new short[] {75, -1, 75, 75, 75, -1, 
          75, 75, -1, 75, 75, 75, -1, 75, 75, 75, 75, 75, 75, 75, 75, 75, 
          75, -1, 75, 312, -1, 75, 75, 75, 75, 75, 75, 75, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 75, 75, 75}),
/* NxS[  76] */ // Shortest string ".0e"
      new Table(32, 68, -1, new short[] {78, -1, -1, 75, 75, 75, 
          -1, -1, -1, -1, 316, -1, 316, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, -1, 75, 78, 75, 75, 
          75, 78, 75, 75, 78, 75, 75, 75, -1, 75, 75, 75, 75, 75, 75, 75, 
          75, 75, 75, -1, 75, 315, -1, 75, 75, 75, 75, 75, 75, 75}),
/* NxS[  77] */ // Shortest string ".0_s"
      new Table(33, 60, 77, new short[] {-1, -1, 77, 77, 77, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, 77, 77, 77, 77, 77, 
          77, 77, 77, 77, 77, 77, 77, -1, 77, 77, 77, 77, 77, 77, 77, 77, 
          77, 77, -1, 77, 313, -1}),
/* NxS[  78] */ // Shortest string ".0e0"
      new Table(64, 63, -1, new short[] {78, -1, 75, 78, 75, 75, 
          75, 78, 75, 75, 78, 75, 75, 75, -1, 75, 75, 75, 75, 75, 75, 75, 
          75, 75, 75, -1, 75, 318, -1, 75, 75, 75, 75, 75, 75, 75, -1, 311, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 78, -1, -1, 75, 75, 75}),
/* NxS[  79] */ // Shortest string "0._s"
      new Table(33, 60, 79, new short[] {-1, -1, 79, 79, 79, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 79, -1, 79, 79, 79, 79, 79, 
          79, 79, 79, 79, 79, 79, 79, -1, 79, 79, 79, 79, 79, 79, 79, 79, 
          79, 79, -1, 79, 322, -1}),
/* NxS[  80] */ // Shortest string "0.e0"
      new Table(64, 63, -1, new short[] {80, -1, 72, 80, 72, 72, 
          72, 80, 72, 72, 80, 72, 72, 72, -1, 72, 72, 72, 72, 72, 72, 72, 
          72, 72, 72, -1, 72, 327, -1, 72, 72, 72, 72, 72, 72, 72, -1, 309, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 80, -1, -1, 72, 72, 72}),
/* NxS[  81] */ // Shortest string "9_s"
      new Table(33, 60, 81, new short[] {-1, -1, 81, 81, 81, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, -1, 81, 81, 81, 81, 81, 
          81, 81, 81, 81, 81, 81, 81, -1, 81, 81, 81, 81, 81, 81, 81, 81, 
          81, 81, -1, 81, 332, -1}),
/* NxS[  82] */ // Shortest string "0e0"
      new Table(64, 63, -1, new short[] {82, -1, 83, 82, 83, 83, 
          83, 82, 83, 83, 82, 83, 83, 83, -1, 83, 83, 83, 83, 83, 83, 83, 
          83, 83, 83, -1, 83, 337, -1, 83, 83, 83, 83, 83, 83, 83, -1, 338, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 82, -1, -1, 83, 83, 83}),
/* NxS[  83] */ // Shortest string "0e0s"
      new Table(66, 61, -1, new short[] {83, -1, 83, 83, 83, -1, 
          83, 83, -1, 83, 83, 83, -1, 83, 83, 83, 83, 83, 83, 83, 83, 83, 
          83, -1, 83, 339, -1, 83, 83, 83, 83, 83, 83, 83, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 83, 83, 83}),
/* NxS[  84] */ // Shortest string "0e0_s"
      new Table(33, 60, 84, new short[] {-1, -1, 84, 84, 84, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 84, -1, 84, 84, 84, 84, 84, 
          84, 84, 84, 84, 84, 84, 84, -1, 84, 84, 84, 84, 84, 84, 84, 84, 
          84, 84, -1, 84, 340, -1}),
/* NxS[  85] */ new Table(0, 0, -1, null), // Shortest string "##"
/* NxS[  86] */ new Table(0, 0, -1, null), // Shortest string "#%:"
/* NxS[  87] */ new Table(0, 0, -1, null), // Shortest string "%>"
/* NxS[  88] */ // Shortest string "%:"
      new Table(46, 8, -1, new short[] {356, -1, -1, -1, -1, -1, 
          357, 90}),
/* NxS[  89] */ new Table(0, 0, -1, null), // Shortest string "%="
/* NxS[  90] */ new Table(0, 0, -1, null), // Shortest string "%:#"
/* NxS[  91] */ new Table(0, 0, -1, null), // Shortest string "%:%:"
/* NxS[  92] */ new Table(0, 0, -1, null), // Shortest string "^="
/* NxS[  93] */ new Table(0, 0, -1, null), // Shortest string "/*"
/* NxS[  94] */ new Table(0, 0, -1, null), // Shortest string "/="
/* NxS[  95] */ new Table(0, 0, -1, null), // Shortest string "//"
/* NxS[  96] */ new Table(0, 0, -1, null), // Shortest string "&="
/* NxS[  97] */ new Table(0, 0, -1, null), // Shortest string "&&"
/* NxS[  98] */ new Table(0, 0, -1, null), // Shortest string "!="
/* NxS[  99] */ new Table(0, 0, -1, null), // Shortest string "?."
/* NxS[ 100] */ new Table(0, 0, -1, null), // Shortest string "??"
/* NxS[ 101] */ new Table(0, 0, -1, null), // Shortest string "?["
/* NxS[ 102] */ new Table(0, 0, -1, null), // Shortest string "|="
/* NxS[ 103] */ new Table(0, 0, -1, null), // Shortest string "||"
/* NxS[ 104] */ new Table(0, 0, -1, null), // Shortest string "+="
/* NxS[ 105] */ new Table(0, 0, -1, null), // Shortest string "++"
/* NxS[ 106] */ new Table(0, 0, -1, null), // Shortest string "=>"
/* NxS[ 107] */ new Table(0, 0, -1, null), // Shortest string "=="
/* NxS[ 108] */ // Shortest string "->"
      new Table(2, 40, -1, new short[] {382, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 111}),
/* NxS[ 109] */ new Table(0, 0, -1, null), // Shortest string "--"
/* NxS[ 110] */ new Table(0, 0, -1, null), // Shortest string "-="
/* NxS[ 111] */ new Table(0, 0, -1, null), // Shortest string "->*"
/* NxS[ 112] */ new Table(0, 0, -1, null), // Shortest string "*="
/* NxS[ 113] */ new Table(0, 0, -1, null), // Shortest string ".*"
/* NxS[ 114] */ new Table(0, 0, -1, null), // Shortest string "..."
/* NxS[ 115] */ new Table(0, 0, -1, null), // Shortest string ":>"
/* NxS[ 116] */ new Table(0, 0, -1, null), // Shortest string "::"
/* NxS[ 117] */ // Shortest string ">>"
      new Table(2, 42, -1, new short[] {398, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 119}),
/* NxS[ 118] */ new Table(0, 0, -1, null), // Shortest string ">="
/* NxS[ 119] */ new Table(0, 0, -1, null), // Shortest string ">>="
/* NxS[ 120] */ // Shortest string "<<"
      new Table(2, 42, -1, new short[] {408, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 125}),
/* NxS[ 121] */ new Table(0, 0, -1, null), // Shortest string "<:"
/* NxS[ 122] */ // Shortest string "<="
      new Table(2, 37, -1, new short[] {406, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 124}),
/* NxS[ 123] */ new Table(0, 0, -1, null), // Shortest string "<%"
/* NxS[ 124] */ new Table(0, 0, -1, null), // Shortest string "<=>"
/* NxS[ 125] */ new Table(0, 0, -1, null), // Shortest string "<<="
/* NxS[ 126] */ // Shortest string "0s"
      new Table(66, 61, -1, new short[] {126, -1, 126, 126, 126, -1, 
          126, 126, -1, 126, 126, 126, -1, 126, 126, 126, 126, 126, 126, 126, 126, 126, 
          126, -1, 126, 423, -1, 126, 126, 126, 126, 126, 126, 126, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 126, 126, 126}),
/* NxS[ 127] */ // Shortest string "0e"
      new Table(32, 68, -1, new short[] {82, -1, -1, 126, 126, 126, 
          -1, -1, -1, -1, 335, -1, 335, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 82, -1, 126, 82, 126, 126, 
          126, 82, 126, 126, 82, 126, 126, 126, -1, 126, 126, 126, 126, 126, 126, 126, 
          126, 126, 126, -1, 126, 504, -1, 126, 126, 126, 126, 126, 126, 126}),
/* NxS[ 128] */ // Shortest string "00"
      new Table(64, 66, -1, new short[] {414, 414, 126, 128, 126, 126, 
          126, 128, 127, 126, 414, 126, 126, 126, -1, 126, 126, 127, 126, 126, 126, 126, 
          126, 126, 126, -1, 126, 500, -1, 126, 126, 127, 126, 126, 126, 126, -1, 413, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 128, -1, -1, 127, 126, 126, -1, -1, 71}),
/* NxS[ 129] */ // Shortest string "0X"
      new Table(64, 66, -1, new short[] {135, -1, 126, 135, 126, 134, 
          134, 135, 126, 126, 135, 126, 126, 126, -1, 134, 126, 126, 126, 126, 134, 134, 
          126, 126, 126, -1, 126, 425, -1, 126, 126, 134, 126, 134, 134, 126, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 135, -1, -1, 134, 126, 134, -1, -1, 426}),
/* NxS[ 130] */ // Shortest string "0B"
      new Table(66, 61, -1, new short[] {126, -1, 126, 126, 126, 131, 
          126, 126, -1, 126, 126, 126, -1, 126, 126, 126, 126, 126, 126, 126, 126, 126, 
          126, -1, 126, 415, -1, 126, 126, 126, 126, 126, 126, 126, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 131, -1, -1, 126, 126, 126}),
/* NxS[ 131] */ // Shortest string "0B0"
      new Table(66, 61, -1, new short[] {132, -1, 132, 132, 132, 131, 
          132, 132, -1, 132, 132, 132, -1, 132, 132, 132, 132, 132, 132, 132, 132, 132, 
          132, -1, 132, 416, -1, 132, 132, 132, 132, 132, 132, 132, -1, 417, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 131, -1, -1, 132, 132, 132}),
/* NxS[ 132] */ // Shortest string "0B0s"
      new Table(66, 61, -1, new short[] {132, -1, 132, 132, 132, -1, 
          132, 132, -1, 132, 132, 132, -1, 132, 132, 132, 132, 132, 132, 132, 132, 132, 
          132, -1, 132, 418, -1, 132, 132, 132, 132, 132, 132, 132, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 132, 132, 132}),
/* NxS[ 133] */ // Shortest string "0B0_s"
      new Table(33, 60, 133, new short[] {-1, -1, 133, 133, 133, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 133, -1, 133, 133, 133, 133, 133, 
          133, 133, 133, 133, 133, 133, 133, -1, 133, 133, 133, 133, 133, 133, 133, 133, 
          133, 133, -1, 133, 419, -1}),
/* NxS[ 134] */ // Shortest string "0Xe"
      new Table(64, 66, -1, new short[] {135, -1, 126, 135, 126, 134, 
          134, 135, 162, 126, 135, 126, 126, 126, -1, 134, 126, 162, 126, 126, 134, 134, 
          126, 126, 126, -1, 126, 492, -1, 126, 126, 161, 126, 134, 134, 126, -1, 450, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 135, -1, -1, 161, 126, 134, -1, -1, 451}),
/* NxS[ 135] */ // Shortest string "0X0"
      new Table(64, 66, -1, new short[] {135, -1, 143, 135, 143, 135, 
          135, 135, 145, 143, 135, 143, 143, 143, -1, 135, 143, 145, 143, 143, 135, 135, 
          143, 143, 143, -1, 143, 449, -1, 143, 143, 144, 143, 135, 135, 143, -1, 450, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 135, -1, -1, 144, 143, 135, -1, -1, 451}),
/* NxS[ 136] */ // Shortest string "0X.eP0"
      new Table(64, 63, -1, new short[] {136, -1, 137, 136, 137, 137, 
          137, 136, 137, 137, 136, 137, 137, 137, -1, 137, 137, 137, 137, 137, 137, 137, 
          137, 137, 137, -1, 137, 435, -1, 137, 137, 137, 137, 137, 137, 137, -1, 436, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 136, -1, -1, 137, 137, 137}),
/* NxS[ 137] */ // Shortest string "0X.ee0s"
      new Table(66, 61, -1, new short[] {137, -1, 137, 137, 137, -1, 
          137, 137, -1, 137, 137, 137, -1, 137, 137, 137, 137, 137, 137, 137, 137, 137, 
          137, -1, 137, 437, -1, 137, 137, 137, 137, 137, 137, 137, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 137, 137, 137}),
/* NxS[ 138] */ // Shortest string "0X.ee0_s"
      new Table(33, 60, 138, new short[] {-1, -1, 138, 138, 138, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 138, -1, 138, 138, 138, 138, 138, 
          138, 138, 138, 138, 138, 138, 138, -1, 138, 138, 138, 138, 138, 138, 138, 138, 
          138, 138, -1, 138, 438, -1}),
/* NxS[ 139] */ // Shortest string "0X.ee0"
      new Table(64, 63, -1, new short[] {139, -1, 137, 139, 137, 141, 
          141, 139, 142, 137, 139, 137, 137, 137, -1, 141, 137, 142, 137, 137, 141, 141, 
          137, 137, 137, -1, 137, 442, -1, 137, 137, 140, 137, 141, 141, 137, -1, 436, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 139, -1, -1, 140, 137, 141}),
/* NxS[ 140] */ // Shortest string "0X.ee0e"
      new Table(32, 68, -1, new short[] {139, -1, -1, 140, 137, 141, 
          -1, -1, -1, -1, 433, -1, 433, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139, -1, 137, 139, 137, 141, 
          141, 139, 142, 137, 139, 137, 137, 137, -1, 141, 137, 142, 137, 137, 141, 141, 
          137, 137, 137, -1, 137, 446, -1, 137, 137, 140, 137, 141, 141, 137}),
/* NxS[ 141] */ // Shortest string "0X.ee0f"
      new Table(64, 63, -1, new short[] {428, -1, 137, 428, 137, 141, 
          141, 428, 142, 137, 428, 137, 137, 137, -1, 141, 137, 142, 137, 137, 141, 141, 
          137, 137, 137, -1, 137, 445, -1, 137, 137, 140, 137, 141, 141, 137, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 428, -1, -1, 140, 137, 141}),
/* NxS[ 142] */ // Shortest string "0X.ee0P"
      new Table(32, 68, -1, new short[] {136, -1, -1, 137, 137, 137, 
          -1, -1, -1, -1, 433, -1, 433, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 136, -1, 137, 136, 137, 137, 
          137, 136, 137, 137, 136, 137, 137, 137, -1, 137, 137, 137, 137, 137, 137, 137, 
          137, 137, 137, -1, 137, 443, -1, 137, 137, 137, 137, 137, 137, 137}),
/* NxS[ 143] */ // Shortest string "0X0s"
      new Table(66, 60, -1, new short[] {143, -1, 143, -1, -1, -1, 
          143, 143, -1, 143, 143, 143, -1, -1, 143, 143, 143, 143, -1, -1, 143, 143, 
          143, -1, 143, 462, -1, 143, 143, -1, 143, -1, -1, 143, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 143}),
/* NxS[ 144] */ // Shortest string "0X0e"
      new Table(32, 70, -1, new short[] {157, -1, -1, 144, 143, 135, 
          -1, -1, 451, -1, 453, -1, 453, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 157, -1, 143, 157, 143, 135, 
          135, 157, 145, 143, 157, 143, 143, 143, -1, 135, 143, 145, 143, 143, 135, 135, 
          143, 143, 143, -1, 143, 491, -1, 143, 143, 144, 143, 135, 135, 143, -1, 450}),
/* NxS[ 145] */ // Shortest string "0X0P"
      new Table(32, 68, -1, new short[] {146, -1, -1, -1, 143, -1, 
          -1, -1, -1, -1, 453, -1, 453, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 146, -1, 143, 146, 143, -1, 
          -1, 146, 143, 143, 146, 143, 143, 143, -1, -1, 143, 143, 143, 143, -1, -1, 
          143, 143, 143, -1, 143, 452, -1, 143, 143, -1, 143, -1, -1, 143}),
/* NxS[ 146] */ // Shortest string "0XeP0"
      new Table(64, 63, -1, new short[] {146, -1, 147, 146, 147, 147, 
          147, 146, 147, 147, 146, 147, 147, 147, -1, 147, 147, 147, 147, 147, 147, 147, 
          147, 147, 147, -1, 147, 455, -1, 147, 147, 147, 147, 147, 147, 147, -1, 456, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 146, -1, -1, 147, 147, 147}),
/* NxS[ 147] */ // Shortest string "0XeP0s"
      new Table(66, 61, -1, new short[] {147, -1, 147, 147, 147, -1, 
          147, 147, -1, 147, 147, 147, -1, 147, 147, 147, 147, 147, 147, 147, 147, 147, 
          147, -1, 147, 457, -1, 147, 147, 147, 147, 147, 147, 147, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 147, 147, 147}),
/* NxS[ 148] */ // Shortest string "0XeP0_s"
      new Table(33, 60, 148, new short[] {-1, -1, 148, 148, 148, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 148, -1, 148, 148, 148, 148, 148, 
          148, 148, 148, 148, 148, 148, 148, -1, 148, 148, 148, 148, 148, 148, 148, 148, 
          148, 148, -1, 148, 458, -1}),
/* NxS[ 149] */ // Shortest string "0Xe.P0"
      new Table(64, 63, -1, new short[] {149, -1, 150, 149, 150, 150, 
          150, 149, 150, 150, 149, 150, 150, 150, -1, 150, 150, 150, 150, 150, 150, 150, 
          150, 150, 150, -1, 150, 470, -1, 150, 150, 150, 150, 150, 150, 150, -1, 471, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 149, -1, -1, 150, 150, 150}),
/* NxS[ 150] */ // Shortest string "0Xe.e0s"
      new Table(66, 61, -1, new short[] {150, -1, 150, 150, 150, -1, 
          150, 150, -1, 150, 150, 150, -1, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
          150, -1, 150, 475, -1, 150, 150, 150, 150, 150, 150, 150, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 150, 150, 150}),
/* NxS[ 151] */ // Shortest string "0Xe.e0_s"
      new Table(33, 60, 151, new short[] {-1, -1, 151, 151, 151, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 151, -1, 151, 151, 151, 151, 151, 
          151, 151, 151, 151, 151, 151, 151, -1, 151, 151, 151, 151, 151, 151, 151, 151, 
          151, 151, -1, 151, 473, -1}),
/* NxS[ 152] */ // Shortest string "0Xe.e0"
      new Table(64, 63, -1, new short[] {152, -1, 150, 152, 150, 154, 
          154, 152, 155, 150, 152, 150, 150, 150, -1, 154, 150, 155, 150, 150, 154, 154, 
          150, 150, 150, -1, 150, 478, -1, 150, 150, 153, 150, 154, 154, 150, -1, 471, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 152, -1, -1, 153, 150, 154}),
/* NxS[ 153] */ // Shortest string "0Xe.e0e"
      new Table(32, 68, -1, new short[] {139, -1, -1, 153, 150, 154, 
          -1, -1, -1, -1, 433, -1, 433, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139, -1, 150, 139, 150, 154, 
          154, 139, 155, 150, 139, 150, 150, 150, -1, 154, 150, 155, 150, 150, 154, 154, 
          150, 150, 150, -1, 150, 482, -1, 150, 150, 153, 150, 154, 154, 150}),
/* NxS[ 154] */ // Shortest string "0Xe.e0f"
      new Table(64, 63, -1, new short[] {428, -1, 150, 428, 150, 154, 
          154, 428, 155, 150, 428, 150, 150, 150, -1, 154, 150, 155, 150, 150, 154, 154, 
          150, 150, 150, -1, 150, 481, -1, 150, 150, 153, 150, 154, 154, 150, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 428, -1, -1, 153, 150, 154}),
/* NxS[ 155] */ // Shortest string "0Xe.e0P"
      new Table(32, 68, -1, new short[] {136, -1, -1, 150, 150, 150, 
          -1, -1, -1, -1, 433, -1, 433, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 136, -1, 150, 136, 150, 150, 
          150, 136, 150, 150, 136, 150, 150, 150, -1, 150, 150, 150, 150, 150, 150, 150, 
          150, 150, 150, -1, 150, 479, -1, 150, 150, 150, 150, 150, 150, 150}),
/* NxS[ 156] */ // Shortest string "0Xe_s"
      new Table(33, 60, 156, new short[] {-1, -1, 156, 156, 156, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 156, -1, 156, 156, 156, 156, 156, 
          156, 156, 156, 156, 156, 156, 156, -1, 156, 156, 156, 156, 156, 156, 156, 156, 
          156, 156, -1, 156, 485, -1}),
/* NxS[ 157] */ // Shortest string "0Xee0"
      new Table(64, 66, -1, new short[] {157, -1, 158, 157, 158, 157, 
          157, 157, 160, 158, 157, 158, 158, 158, -1, 157, 158, 160, 158, 158, 157, 157, 
          158, 158, 158, -1, 158, 449, -1, 158, 158, 159, 158, 157, 157, 158, -1, 450, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 157, -1, -1, 159, 158, 157, -1, -1, 451}),
/* NxS[ 158] */ // Shortest string "0Xee0s"
      new Table(66, 61, -1, new short[] {158, -1, 158, 147, 147, -1, 
          158, 158, -1, 158, 158, 158, -1, 147, 158, 158, 158, 158, 147, 147, 158, 158, 
          158, -1, 158, 489, -1, 158, 158, 147, 158, 147, 147, 158, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 147, 158, 147}),
/* NxS[ 159] */ // Shortest string "0Xee0e"
      new Table(32, 70, -1, new short[] {157, -1, -1, 159, 158, 157, 
          -1, -1, 451, -1, 453, -1, 453, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 157, -1, 158, 157, 158, 157, 
          157, 157, 160, 158, 157, 158, 158, 158, -1, 157, 158, 160, 158, 158, 157, 157, 
          158, 158, 158, -1, 158, 491, -1, 158, 158, 159, 158, 157, 157, 158, -1, 450}),
/* NxS[ 160] */ // Shortest string "0Xee0P"
      new Table(32, 68, -1, new short[] {146, -1, -1, 147, 158, 147, 
          -1, -1, -1, -1, 453, -1, 453, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 146, -1, 158, 146, 158, 147, 
          147, 146, 158, 158, 146, 158, 158, 158, -1, 147, 158, 158, 158, 158, 147, 147, 
          158, 158, 158, -1, 158, 487, -1, 158, 158, 147, 158, 147, 147, 158}),
/* NxS[ 161] */ // Shortest string "0Xee"
      new Table(32, 70, -1, new short[] {157, -1, -1, 161, 126, 134, 
          -1, -1, 451, -1, 453, -1, 453, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 157, -1, 126, 157, 126, 134, 
          134, 157, 162, 126, 157, 126, 126, 126, -1, 134, 126, 162, 126, 126, 134, 134, 
          126, 126, 126, -1, 126, 495, -1, 126, 126, 161, 126, 134, 134, 126, -1, 450}),
/* NxS[ 162] */ // Shortest string "0XeP"
      new Table(32, 68, -1, new short[] {146, -1, -1, 126, 126, 126, 
          -1, -1, -1, -1, 453, -1, 453, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 146, -1, 126, 146, 126, 126, 
          126, 146, 126, 126, 146, 126, 126, 126, -1, 126, 126, 126, 126, 126, 126, 126, 
          126, 126, 126, -1, 126, 493, -1, 126, 126, 126, 126, 126, 126, 126}),
/* NxS[ 163] */ // Shortest string "0Xee\\\n"
      new Table(32, 70, -1, new short[] {157, -1, -1, 161, 126, 134, 
          -1, -1, 451, -1, 453, -1, 453, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 157, -1, 126, 157, 126, 134, 
          134, 157, 162, 126, 157, 126, 126, 126, -1, 134, 126, 162, 126, 126, 134, 134, 
          126, 126, 126, -1, 126, 495, -1, 126, 126, 161, 126, 134, 134, 126, -1, 450}),
/* NxS[ 164] */ // Shortest string "0Xe\\\n"
      new Table(64, 66, -1, new short[] {135, -1, 126, 135, 126, 134, 
          134, 135, 162, 126, 135, 126, 126, 126, -1, 134, 126, 162, 126, 126, 134, 134, 
          126, 126, 126, -1, 126, 492, -1, 126, 126, 161, 126, 134, 134, 126, -1, 450, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 135, -1, -1, 161, 126, 134, -1, -1, 451}),
/* NxS[ 165] */ // Shortest string "0_s"
      new Table(33, 60, 165, new short[] {-1, -1, 165, 165, 165, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 165, -1, 165, 165, 165, 165, 165, 
          165, 165, 165, 165, 165, 165, 165, -1, 165, 165, 165, 165, 165, 165, 165, 165, 
          165, 165, -1, 165, 502, -1}),
/* NxS[ 166] */ // Shortest string "no"
      new Table(33, 60, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 511, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 169, 3, 3, 3, 
          3, 3, -1, 3, 218, -1}),
/* NxS[ 167] */ // Shortest string "no?:\\\nt"
      new Table(12, 35, -1, new short[] {512, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 513}),
/* NxS[ 168] */ new Table(0, 0, -1, null), // Shortest string "no?:\\\nt_eq"
/* NxS[ 169] */ // Shortest string "not"
      new Table(33, 69, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 513, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1, 3, 3, 3, 3, 3, 3, 3, 3, 170}),
/* NxS[ 170] */ // Shortest string "not_"
      new Table(33, 63, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 518, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1, 3, 3, 171}),
/* NxS[ 171] */ // Shortest string "not_e"
      new Table(33, 60, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 521, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1}),
/* NxS[ 172] */ // Shortest string "de"
      new Table(64, 63, -1, new short[] {3, -1, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, -1, 3, 527, -1, 3, 3, 3, 3, 173, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, 3, 3, 3}),
/* NxS[ 173] */ // Shortest string "def"
      new Table(33, 61, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 528, -1, 174}),
/* NxS[ 174] */ // Shortest string "defi"
      new Table(64, 63, -1, new short[] {3, -1, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, -1, 3, 529, -1, 3, 3, 3, 3, 3, 3, 175, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, 3, 3, 3}),
/* NxS[ 175] */ // Shortest string "defin"
      new Table(33, 63, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 530, -1, 3, 3, 176}),
/* NxS[ 176] */ // Shortest string "define"
      new Table(64, 63, -1, new short[] {3, -1, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, -1, 3, 531, -1, 3, 3, 3, 3, 3, 177, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, 3, 3, 3}),
/* NxS[ 177] */ // Shortest string "defined"
      new Table(33, 60, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1}),
/* NxS[ 178] */ // Shortest string "or"
      new Table(33, 69, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 539, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1, 3, 3, 3, 3, 3, 3, 3, 3, 179}),
/* NxS[ 179] */ // Shortest string "or_"
      new Table(33, 63, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 545, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1, 3, 3, 181}),
/* NxS[ 180] */ new Table(0, 0, -1, null), // Shortest string "o?:\\\nr_eq"
/* NxS[ 181] */ // Shortest string "or_e"
      new Table(33, 60, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, 548, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1}),
/* NxS[ 182] */ // Shortest string "o?:\\\nr"
      new Table(12, 35, -1, new short[] {543, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 539}),
/* NxS[ 183] */ new Table(0, 0, -1, null), // Shortest string "\\s"
/* NxS[ 184] */ // Shortest string "\\\t"
      new Table(3, 32, 183, new short[] {186, 183, 183, 183, 183, 183, 
          183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 
          183, 183, 183, 183, 183, 183, 183, 183, 184, 185}),
/* NxS[ 185] */ // Shortest string "\\<"
      new Table(34, 1, -1, new short[] {554}),
/* NxS[ 186] */ new Table(0, 0, -1, null), // Shortest string "\\\t\n"
/* NxS[ 187] */ // Shortest string "si"
      new Table(33, 62, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 560, -1, 3, 188}),
/* NxS[ 188] */ // Shortest string "siz"
      new Table(33, 63, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 561, -1, 3, 3, 189}),
/* NxS[ 189] */ // Shortest string "size"
      new Table(64, 63, -1, new short[] {3, -1, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, -1, 3, 562, -1, 3, 3, 3, 190, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, 3, 3, 3}),
/* NxS[ 190] */ // Shortest string "sizeo"
      new Table(64, 63, -1, new short[] {3, -1, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, -1, 3, 563, -1, 3, 3, 3, 3, 191, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, 3, 3, 3}),
/* NxS[ 191] */ // Shortest string "sizeof"
      new Table(33, 60, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1}),
/* NxS[ 192] */ // Shortest string "s"
      new Table(41, 10, 192, new short[] {-1, 192, 192, 192, 192, 192, 
          192, 192, 192, -1}),
/* NxS[ 193] */ new Table(0, 0, -1, null), // Shortest string "/"
/* NxS[ 194] */ new Table(0, 0, -1, null), // Shortest string "*s"
/* NxS[ 195] */ new Table(0, 0, -1, null), // Shortest string "*/"
/* NxS[ 196] */ // Shortest string "s"
      new Table(2, 2, 196, new short[] {-1, -1}),
/* NxS[ 197] */ new Table(0, 0, -1, null), // Shortest string "\n"
/* NxS[ 198] */ new Table(0, 0, -1, null), // Shortest string "\\s"
/* NxS[ 199] */ // Shortest string "\\\t"
      new Table(2, 33, 198, new short[] {573, 198, 198, 198, 198, 198, 
          198, 198, -1, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 
          198, 198, 198, 198, 198, 198, 198, 198, 198, 199, 200}),
/* NxS[ 200] */ // Shortest string "\\<"
      new Table(34, 1, -1, new short[] {574}),
/* NxS[ 201] */ new Table(0, 0, -1, null), // Shortest string "\\<<EOF>>"
/* NxS[ 202] */ new Table(0, 0, -1, null), // Shortest string "\\\\n"
/* NxS[ 203] */ new Table(0, 0, -1, null), // Shortest string "("
/* NxS[ 204] */ // Shortest string "s"
      new Table(56, 23, 204, new short[] {-1, 204, 204, 204, 204, 204, 
          204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 
          -1}),
/* NxS[ 205] */ // Shortest string ")"
      new Table(56, 23, 582, new short[] {-1, 582, 582, 582, 582, 582, 
          582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 
          207}),
/* NxS[ 206] */ new Table(0, 0, -1, null), // Shortest string "\""
/* NxS[ 207] */ // Shortest string ")\""
      new Table(35, 67, 582, new short[] {208, 208, 208, 582, 582, 582, 
          582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, -1, 
          582, 582, 582, 582, 582, 582, 582, 582, 582, 208, 582, 208, 208, 208, 582, 208, 
          208, 582, 208, 208, 208, 207, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 
          582, 208, 582, 582, 208, 208, 208, 208, 208, 208, 208, 582, 583}),
/* NxS[ 208] */ // Shortest string ")\"s"
      new Table(35, 65, 582, new short[] {208, 208, 208, 582, 582, 582, 
          582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, -1, 
          582, 582, 582, 582, 582, 582, 582, 582, 582, 208, 582, 208, 208, 208, 582, 208, 
          208, 582, 208, 208, 208, 207, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 
          582, 208, 587, 582, 208, 208, 208, 208, 208, 208, 208}),
/* NxS[ 209] */ // Shortest string ")\"_s"
      new Table(33, 60, 209, new short[] {582, 582, 209, 209, 209, 582, 
          582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 
          582, -1, 582, 582, 582, 582, 582, 582, 582, 209, 582, 209, 209, 209, 209, 209, 
          209, 209, 209, 209, 209, 209, 209, 207, 209, 209, 209, 209, 209, 209, 209, 209, 
          209, 209, 582, 209, 585, 582}),
/* NxS[ 210] */ new Table(0, 0, -1, null), // Shortest string "\n"
/* NxS[ 211] */ // Shortest string "\""
      new Table(66, 61, -1, new short[] {212, -1, 212, 212, 212, -1, 
          212, 212, -1, 212, 212, 212, -1, 212, 212, 212, 212, 212, 212, 212, 212, 212, 
          212, -1, 212, -1, -1, 212, 212, 212, 212, 212, 212, 212, -1, 591, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 212, 212, 212}),
/* NxS[ 212] */ // Shortest string "\"s"
      new Table(66, 61, -1, new short[] {212, -1, 212, 212, 212, -1, 
          212, 212, -1, 212, 212, 212, -1, 212, 212, 212, 212, 212, 212, 212, 212, 212, 
          212, -1, 212, 592, -1, 212, 212, 212, 212, 212, 212, 212, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 212, 212, 212}),
/* NxS[ 213] */ // Shortest string "\"_s"
      new Table(33, 60, 213, new short[] {-1, -1, 213, 213, 213, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 213, -1, 213, 213, 213, 213, 213, 
          213, 213, 213, 213, 213, 213, 213, -1, 213, 213, 213, 213, 213, 213, 213, 213, 
          213, 213, -1, 213, 593, -1}),
/* NxS[ 214] */ new Table(0, 0, -1, null), // Shortest string "\\s"
/* NxS[ 215] */ new Table(0, 0, -1, null), // Shortest string "\\\n"
/* NxS[ 216] */ // Shortest string ""
      new Table(31, 69, 3, new short[] {-1, 7, 8, 9, 3, 3, 
          3, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 
          25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, -1, 3, 36, 3, 
          3, 3, 36, 3, 37, 36, 38, 38, 39, 40, 41, 3, 3, 3, 3, 42, 
          43, 3, 44, 3, -1, 1, 217, 2, 3, 3, 3, 4, 3, 5, 6}),
/* NxS[ 217] */ // Shortest string "\\"
      new Table(3, 32, 183, new short[] {8, 183, 183, 183, 183, 183, 
          183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 
          183, 183, 183, 183, 183, 183, 183, 183, 184, 185}),
/* NxS[ 218] */ // Shortest string "i\\"
      new Table(3, 1, -1, new short[] {239}),
/* NxS[ 219] */ // Shortest string "x?"
      new Table(39, 1, -1, new short[] {220}),
/* NxS[ 220] */ // Shortest string "x?:"
      new Table(2, 1, -1, new short[] {221}),
/* NxS[ 221] */ // Shortest string "x?:\\"
      new Table(3, 1, -1, new short[] {222}),
/* NxS[ 222] */ // Shortest string "x?:\\\n"
      new Table(7, 40, -1, new short[] {223, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 219}),
/* NxS[ 223] */ // Shortest string "xo?:\\\n"
      new Table(46, 41, -1, new short[] {224, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 46}),
/* NxS[ 224] */ // Shortest string "xo?"
      new Table(39, 1, -1, new short[] {237}),
/* NxS[ 225] */ // Shortest string "xo?:\\\nr_"
      new Table(6, 41, -1, new short[] {230, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 231}),
/* NxS[ 226] */ // Shortest string "xor?"
      new Table(39, 1, -1, new short[] {227}),
/* NxS[ 227] */ // Shortest string "xor?:"
      new Table(2, 1, -1, new short[] {228}),
/* NxS[ 228] */ // Shortest string "xor?:\\"
      new Table(3, 1, -1, new short[] {229}),
/* NxS[ 229] */ // Shortest string "xor?:\\\n"
      new Table(12, 35, -1, new short[] {225, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 226}),
/* NxS[ 230] */ // Shortest string "xo?:\\\nr_e"
      new Table(46, 43, -1, new short[] {234, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 47}),
/* NxS[ 231] */ // Shortest string "xor_?"
      new Table(39, 1, -1, new short[] {232}),
/* NxS[ 232] */ // Shortest string "xor_?:"
      new Table(2, 1, -1, new short[] {233}),
/* NxS[ 233] */ // Shortest string "xor_?:\\"
      new Table(3, 1, -1, new short[] {225}),
/* NxS[ 234] */ // Shortest string "xor_e?"
      new Table(39, 1, -1, new short[] {235}),
/* NxS[ 235] */ // Shortest string "xor_e?:"
      new Table(2, 1, -1, new short[] {236}),
/* NxS[ 236] */ // Shortest string "xor_e?:\\"
      new Table(3, 1, -1, new short[] {230}),
/* NxS[ 237] */ // Shortest string "xo?:"
      new Table(2, 1, -1, new short[] {238}),
/* NxS[ 238] */ // Shortest string "xo?:\\"
      new Table(3, 1, -1, new short[] {223}),
/* NxS[ 239] */ // Shortest string "i\\\n"
      new Table(33, 60, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 218, -1}),
/* NxS[ 240] */ // Shortest string "a?"
      new Table(39, 1, -1, new short[] {241}),
/* NxS[ 241] */ // Shortest string "a?:"
      new Table(2, 1, -1, new short[] {242}),
/* NxS[ 242] */ // Shortest string "a?:\\"
      new Table(3, 1, -1, new short[] {243}),
/* NxS[ 243] */ // Shortest string "a?:\\\n"
      new Table(10, 37, -1, new short[] {244, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 240}),
/* NxS[ 244] */ // Shortest string "an?:\\\n"
      new Table(9, 38, -1, new short[] {52, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 245}),
/* NxS[ 245] */ // Shortest string "an?"
      new Table(39, 1, -1, new short[] {246}),
/* NxS[ 246] */ // Shortest string "an?:"
      new Table(2, 1, -1, new short[] {247}),
/* NxS[ 247] */ // Shortest string "an?:\\"
      new Table(3, 1, -1, new short[] {244}),
/* NxS[ 248] */ // Shortest string "and_?:\\\n"
      new Table(6, 41, -1, new short[] {253, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 254}),
/* NxS[ 249] */ // Shortest string "and?"
      new Table(39, 1, -1, new short[] {250}),
/* NxS[ 250] */ // Shortest string "and?:"
      new Table(2, 1, -1, new short[] {251}),
/* NxS[ 251] */ // Shortest string "and?:\\"
      new Table(3, 1, -1, new short[] {252}),
/* NxS[ 252] */ // Shortest string "and?:\\\n"
      new Table(12, 35, -1, new short[] {248, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 249}),
/* NxS[ 253] */ // Shortest string "and_e?:\\\n"
      new Table(46, 43, -1, new short[] {257, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 53}),
/* NxS[ 254] */ // Shortest string "and_?"
      new Table(39, 1, -1, new short[] {255}),
/* NxS[ 255] */ // Shortest string "and_?:"
      new Table(2, 1, -1, new short[] {256}),
/* NxS[ 256] */ // Shortest string "and_?:\\"
      new Table(3, 1, -1, new short[] {248}),
/* NxS[ 257] */ // Shortest string "and_e?"
      new Table(39, 1, -1, new short[] {258}),
/* NxS[ 258] */ // Shortest string "and_e?:"
      new Table(2, 1, -1, new short[] {259}),
/* NxS[ 259] */ // Shortest string "and_e?:\\"
      new Table(3, 1, -1, new short[] {253}),
/* NxS[ 260] */ // Shortest string "b?"
      new Table(39, 1, -1, new short[] {261}),
/* NxS[ 261] */ // Shortest string "b?:"
      new Table(2, 1, -1, new short[] {262}),
/* NxS[ 262] */ // Shortest string "b?:\\"
      new Table(3, 1, -1, new short[] {263}),
/* NxS[ 263] */ // Shortest string "b?:\\\n"
      new Table(4, 43, -1, new short[] {264, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 260}),
/* NxS[ 264] */ // Shortest string "bi?:\\\n"
      new Table(46, 38, -1, new short[] {265, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 266}),
/* NxS[ 265] */ // Shortest string "bi?"
      new Table(39, 1, -1, new short[] {282}),
/* NxS[ 266] */ // Shortest string "bi?:\\\nt"
      new Table(46, 51, -1, new short[] {268, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 269, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 267}),
/* NxS[ 267] */ // Shortest string "bi?:\\\nto"
      new Table(46, 41, -1, new short[] {279, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 59}),
/* NxS[ 268] */ // Shortest string "bit?"
      new Table(39, 1, -1, new short[] {277}),
/* NxS[ 269] */ // Shortest string "bi?:\\\nta"
      new Table(10, 37, -1, new short[] {270, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 271}),
/* NxS[ 270] */ // Shortest string "bi?:\\\ntan"
      new Table(9, 38, -1, new short[] {58, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 274}),
/* NxS[ 271] */ // Shortest string "bita?"
      new Table(39, 1, -1, new short[] {272}),
/* NxS[ 272] */ // Shortest string "bita?:"
      new Table(2, 1, -1, new short[] {273}),
/* NxS[ 273] */ // Shortest string "bita?:\\"
      new Table(3, 1, -1, new short[] {269}),
/* NxS[ 274] */ // Shortest string "bitan?"
      new Table(39, 1, -1, new short[] {275}),
/* NxS[ 275] */ // Shortest string "bitan?:"
      new Table(2, 1, -1, new short[] {276}),
/* NxS[ 276] */ // Shortest string "bitan?:\\"
      new Table(3, 1, -1, new short[] {270}),
/* NxS[ 277] */ // Shortest string "bit?:"
      new Table(2, 1, -1, new short[] {278}),
/* NxS[ 278] */ // Shortest string "bit?:\\"
      new Table(3, 1, -1, new short[] {266}),
/* NxS[ 279] */ // Shortest string "bito?"
      new Table(39, 1, -1, new short[] {280}),
/* NxS[ 280] */ // Shortest string "bito?:"
      new Table(2, 1, -1, new short[] {281}),
/* NxS[ 281] */ // Shortest string "bito?:\\"
      new Table(3, 1, -1, new short[] {267}),
/* NxS[ 282] */ // Shortest string "bi?:"
      new Table(2, 1, -1, new short[] {283}),
/* NxS[ 283] */ // Shortest string "bi?:\\"
      new Table(3, 1, -1, new short[] {264}),
/* NxS[ 284] */ // Shortest string "c?"
      new Table(39, 1, -1, new short[] {285}),
/* NxS[ 285] */ // Shortest string "c?:"
      new Table(2, 1, -1, new short[] {286}),
/* NxS[ 286] */ // Shortest string "c?:\\"
      new Table(3, 1, -1, new short[] {287}),
/* NxS[ 287] */ // Shortest string "c?:\\\n"
      new Table(7, 40, -1, new short[] {288, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 284}),
/* NxS[ 288] */ // Shortest string "co?:\\\n"
      new Table(46, 35, -1, new short[] {289, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 290}),
/* NxS[ 289] */ // Shortest string "co?"
      new Table(39, 1, -1, new short[] {298}),
/* NxS[ 290] */ // Shortest string "co?:\\\nm"
      new Table(46, 36, -1, new short[] {291, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 292}),
/* NxS[ 291] */ // Shortest string "com?"
      new Table(39, 1, -1, new short[] {296}),
/* NxS[ 292] */ // Shortest string "co?:\\\nmp"
      new Table(46, 37, -1, new short[] {293, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65}),
/* NxS[ 293] */ // Shortest string "comp?"
      new Table(39, 1, -1, new short[] {294}),
/* NxS[ 294] */ // Shortest string "comp?:"
      new Table(2, 1, -1, new short[] {295}),
/* NxS[ 295] */ // Shortest string "comp?:\\"
      new Table(3, 1, -1, new short[] {292}),
/* NxS[ 296] */ // Shortest string "com?:"
      new Table(2, 1, -1, new short[] {297}),
/* NxS[ 297] */ // Shortest string "com?:\\"
      new Table(3, 1, -1, new short[] {290}),
/* NxS[ 298] */ // Shortest string "co?:"
      new Table(2, 1, -1, new short[] {299}),
/* NxS[ 299] */ // Shortest string "co?:\\"
      new Table(3, 1, -1, new short[] {288}),
/* NxS[ 300] */ // Shortest string "R\\"
      new Table(3, 1, -1, new short[] {301}),
/* NxS[ 301] */ // Shortest string "R\\\n"
      new Table(33, 60, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 68, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 300, -1}),
/* NxS[ 302] */ // Shortest string "U\\"
      new Table(3, 1, -1, new short[] {303}),
/* NxS[ 303] */ // Shortest string "U\\\n"
      new Table(33, 60, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 39, 40, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 302, -1}),
/* NxS[ 304] */ // Shortest string "u\\"
      new Table(3, 1, -1, new short[] {305}),
/* NxS[ 305] */ // Shortest string "u\\\n"
      new Table(33, 60, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 38, 3, 3, 39, 40, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 304, -1}),
/* NxS[ 306] */ // Shortest string "9\\"
      new Table(3, 1, -1, new short[] {36}),
/* NxS[ 307] */ // Shortest string "9_"
      new Table(66, 61, -1, new short[] {81, -1, 81, 81, 81, -1, 
          81, 81, -1, 81, 81, 81, -1, 81, 81, 81, 81, 81, 81, 81, 81, 81, 
          81, -1, 81, 331, -1, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 
          81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 
          -1, -1, -1, -1, 81, 81, 81}),
/* NxS[ 308] */ // Shortest string "0.\\"
      new Table(3, 1, -1, new short[] {330}),
/* NxS[ 309] */ // Shortest string "0._"
      new Table(66, 61, -1, new short[] {79, -1, 79, 79, 79, -1, 
          79, 79, -1, 79, 79, 79, -1, 79, 79, 79, 79, 79, 79, 79, 79, 79, 
          79, -1, 79, 321, -1, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 
          79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 
          -1, -1, -1, -1, 79, 79, 79}),
/* NxS[ 310] */ // Shortest string ".0\\"
      new Table(3, 1, -1, new short[] {74}),
/* NxS[ 311] */ // Shortest string ".0_"
      new Table(66, 61, -1, new short[] {77, -1, 77, 77, 77, -1, 
          77, 77, -1, 77, 77, 77, -1, 77, 77, 77, 77, 77, 77, 77, 77, 77, 
          77, -1, 77, 312, -1, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 
          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 
          -1, -1, -1, -1, 77, 77, 77}),
/* NxS[ 312] */ // Shortest string ".0s\\"
      new Table(3, 1, -1, new short[] {311}),
/* NxS[ 313] */ // Shortest string ".0_s\\"
      new Table(3, 1, -1, new short[] {314}),
/* NxS[ 314] */ // Shortest string ".0_s\\\n"
      new Table(33, 60, 77, new short[] {-1, -1, 77, 77, 77, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, 77, 77, 77, 77, 77, 
          77, 77, 77, 77, 77, 77, 77, -1, 77, 77, 77, 77, 77, 77, 77, 77, 
          77, 77, -1, 77, 313, -1}),
/* NxS[ 315] */ // Shortest string ".0e\\"
      new Table(3, 1, -1, new short[] {319}),
/* NxS[ 316] */ // Shortest string ".0e-"
      new Table(64, 58, -1, new short[] {78, -1, -1, 78, -1, -1, 
          -1, 78, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 317, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 78}),
/* NxS[ 317] */ // Shortest string ".0e-\\"
      new Table(3, 1, -1, new short[] {316}),
/* NxS[ 318] */ // Shortest string ".0e0\\"
      new Table(3, 1, -1, new short[] {78}),
/* NxS[ 319] */ // Shortest string ".0e\\\n"
      new Table(32, 68, -1, new short[] {78, -1, -1, 75, 75, 75, 
          -1, -1, -1, -1, 316, -1, 316, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, -1, 75, 78, 75, 75, 
          75, 78, 75, 75, 78, 75, 75, 75, -1, 75, 75, 75, 75, 75, 75, 75, 
          75, 75, 75, -1, 75, 315, -1, 75, 75, 75, 75, 75, 75, 75}),
/* NxS[ 320] */ // Shortest string ""
      new Table(66, 61, -1, new short[] {75, -1, 75, 75, 75, -1, 
          75, 75, -1, 75, 75, 75, -1, 75, 75, 75, 75, 75, 75, 75, 75, 75, 
          75, -1, 75, 312, -1, 75, 75, 75, 75, 75, 75, 75, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 75, 75, 75}),
/* NxS[ 321] */ // Shortest string "0.s\\"
      new Table(3, 1, -1, new short[] {309}),
/* NxS[ 322] */ // Shortest string "0._s\\"
      new Table(3, 1, -1, new short[] {323}),
/* NxS[ 323] */ // Shortest string "0._s\\\n"
      new Table(33, 60, 79, new short[] {-1, -1, 79, 79, 79, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 79, -1, 79, 79, 79, 79, 79, 
          79, 79, 79, 79, 79, 79, 79, -1, 79, 79, 79, 79, 79, 79, 79, 79, 
          79, 79, -1, 79, 322, -1}),
/* NxS[ 324] */ // Shortest string "0.e\\"
      new Table(3, 1, -1, new short[] {328}),
/* NxS[ 325] */ // Shortest string "0.e-"
      new Table(64, 58, -1, new short[] {80, -1, -1, 80, -1, -1, 
          -1, 80, -1, -1, 80, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 326, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 80}),
/* NxS[ 326] */ // Shortest string "0.e-\\"
      new Table(3, 1, -1, new short[] {325}),
/* NxS[ 327] */ // Shortest string "0.e0\\"
      new Table(3, 1, -1, new short[] {80}),
/* NxS[ 328] */ // Shortest string "0.e\\\n"
      new Table(32, 68, -1, new short[] {80, -1, -1, 72, 72, 72, 
          -1, -1, -1, -1, 325, -1, 325, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 80, -1, 72, 80, 72, 72, 
          72, 80, 72, 72, 80, 72, 72, 72, -1, 72, 72, 72, 72, 72, 72, 72, 
          72, 72, 72, -1, 72, 324, -1, 72, 72, 72, 72, 72, 72, 72}),
/* NxS[ 329] */ // Shortest string ""
      new Table(66, 61, -1, new short[] {72, -1, 72, 72, 72, -1, 
          72, 72, -1, 72, 72, 72, -1, 72, 72, 72, 72, 72, 72, 72, 72, 72, 
          72, -1, 72, 321, -1, 72, 72, 72, 72, 72, 72, 72, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 72, 72, 72}),
/* NxS[ 330] */ // Shortest string "0.\\\n"
      new Table(64, 63, -1, new short[] {74, -1, 72, 74, 72, 72, 
          72, 74, 73, 72, 74, 72, 72, 72, -1, 72, 72, 73, 72, 72, 72, 72, 
          72, 72, 72, -1, 72, 308, -1, 72, 72, 73, 72, 72, 72, 72, -1, 309, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 74, -1, -1, 73, 72, 72}),
/* NxS[ 331] */ // Shortest string "9s\\"
      new Table(3, 1, -1, new short[] {307}),
/* NxS[ 332] */ // Shortest string "9_s\\"
      new Table(3, 1, -1, new short[] {333}),
/* NxS[ 333] */ // Shortest string "9_s\\\n"
      new Table(33, 60, 81, new short[] {-1, -1, 81, 81, 81, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, -1, 81, 81, 81, 81, 81, 
          81, 81, 81, 81, 81, 81, 81, -1, 81, 81, 81, 81, 81, 81, 81, 81, 
          81, 81, -1, 81, 332, -1}),
/* NxS[ 334] */ // Shortest string "9e\\"
      new Table(3, 1, -1, new short[] {343}),
/* NxS[ 335] */ // Shortest string "0e-"
      new Table(64, 58, -1, new short[] {82, -1, -1, 82, -1, -1, 
          -1, 82, -1, -1, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 336, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 82}),
/* NxS[ 336] */ // Shortest string "0e-\\"
      new Table(3, 1, -1, new short[] {335}),
/* NxS[ 337] */ // Shortest string "0e0\\"
      new Table(3, 1, -1, new short[] {82}),
/* NxS[ 338] */ // Shortest string "0e0_"
      new Table(66, 61, -1, new short[] {84, -1, 84, 84, 84, -1, 
          84, 84, -1, 84, 84, 84, -1, 84, 84, 84, 84, 84, 84, 84, 84, 84, 
          84, -1, 84, 339, -1, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 
          84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 
          -1, -1, -1, -1, 84, 84, 84}),
/* NxS[ 339] */ // Shortest string "0e0s\\"
      new Table(3, 1, -1, new short[] {338}),
/* NxS[ 340] */ // Shortest string "0e0_s\\"
      new Table(3, 1, -1, new short[] {341}),
/* NxS[ 341] */ // Shortest string "0e0_s\\\n"
      new Table(33, 60, 84, new short[] {-1, -1, 84, 84, 84, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 84, -1, 84, 84, 84, 84, 84, 
          84, 84, 84, 84, 84, 84, 84, -1, 84, 84, 84, 84, 84, 84, 84, 84, 
          84, 84, -1, 84, 340, -1}),
/* NxS[ 342] */ // Shortest string ""
      new Table(66, 61, -1, new short[] {83, -1, 83, 83, 83, -1, 
          83, 83, -1, 83, 83, 83, -1, 83, 83, 83, 83, 83, 83, 83, 83, 83, 
          83, -1, 83, 339, -1, 83, 83, 83, 83, 83, 83, 83, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 83, 83, 83}),
/* NxS[ 343] */ // Shortest string "9e\\\n"
      new Table(32, 68, -1, new short[] {82, -1, -1, 69, 69, 69, 
          -1, -1, -1, -1, 335, -1, 335, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 82, -1, 69, 82, 69, 69, 
          69, 82, 69, 69, 82, 69, 69, 69, -1, 69, 69, 69, 69, 69, 69, 69, 
          69, 69, 69, -1, 69, 334, -1, 69, 69, 69, 69, 69, 69, 69}),
/* NxS[ 344] */ // Shortest string ""
      new Table(66, 61, -1, new short[] {69, -1, 69, 69, 69, -1, 
          69, 69, -1, 69, 69, 69, -1, 69, 69, 69, 69, 69, 69, 69, 69, 69, 
          69, -1, 69, 331, -1, 69, 69, 69, 69, 69, 69, 69, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 69, 69, 69}),
/* NxS[ 345] */ // Shortest string "#\\"
      new Table(3, 1, -1, new short[] {350}),
/* NxS[ 346] */ // Shortest string "#%"
      new Table(39, 8, -1, new short[] {86, -1, -1, -1, -1, -1, 
          -1, 347}),
/* NxS[ 347] */ // Shortest string "#%?"
      new Table(39, 1, -1, new short[] {348}),
/* NxS[ 348] */ // Shortest string "#%?:"
      new Table(2, 1, -1, new short[] {349}),
/* NxS[ 349] */ // Shortest string "#%?:\\"
      new Table(3, 1, -1, new short[] {346}),
/* NxS[ 350] */ // Shortest string "#\\\n"
      new Table(53, 39, -1, new short[] {85, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          345}),
/* NxS[ 351] */ // Shortest string "%\\"
      new Table(3, 1, -1, new short[] {364}),
/* NxS[ 352] */ // Shortest string "%?"
      new Table(39, 1, -1, new short[] {353}),
/* NxS[ 353] */ // Shortest string "%?:"
      new Table(2, 1, -1, new short[] {354}),
/* NxS[ 354] */ // Shortest string "%?:\\"
      new Table(3, 1, -1, new short[] {355}),
/* NxS[ 355] */ // Shortest string "%?:\\\n"
      new Table(38, 9, -1, new short[] {87, 88, -1, -1, -1, -1, 
          -1, -1, 352}),
/* NxS[ 356] */ // Shortest string "%:?"
      new Table(39, 1, -1, new short[] {361}),
/* NxS[ 357] */ // Shortest string "%:%"
      new Table(39, 8, -1, new short[] {91, -1, -1, -1, -1, -1, 
          -1, 358}),
/* NxS[ 358] */ // Shortest string "%:%?"
      new Table(39, 1, -1, new short[] {359}),
/* NxS[ 359] */ // Shortest string "%:%?:"
      new Table(2, 1, -1, new short[] {360}),
/* NxS[ 360] */ // Shortest string "%:%?:\\"
      new Table(3, 1, -1, new short[] {357}),
/* NxS[ 361] */ // Shortest string "%:?:"
      new Table(2, 1, -1, new short[] {362}),
/* NxS[ 362] */ // Shortest string "%:?:\\"
      new Table(3, 1, -1, new short[] {363}),
/* NxS[ 363] */ // Shortest string "%:?:\\\n"
      new Table(46, 7, -1, new short[] {356, -1, -1, -1, -1, -1, 
          357}),
/* NxS[ 364] */ // Shortest string "%\\\n"
      new Table(2, 42, -1, new short[] {351, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 89}),
/* NxS[ 365] */ // Shortest string "^\\"
      new Table(3, 1, -1, new short[] {366}),
/* NxS[ 366] */ // Shortest string "^\\\n"
      new Table(2, 42, -1, new short[] {365, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 92}),
/* NxS[ 367] */ // Shortest string "/\\"
      new Table(3, 1, -1, new short[] {368}),
/* NxS[ 368] */ // Shortest string "/\\\n"
      new Table(2, 49, -1, new short[] {367, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 93, -1, 94, -1, -1, -1, -1, -1, -1, 95}),
/* NxS[ 369] */ // Shortest string "&\\"
      new Table(3, 1, -1, new short[] {370}),
/* NxS[ 370] */ // Shortest string "&\\\n"
      new Table(2, 48, -1, new short[] {369, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 96, -1, -1, -1, -1, -1, 97}),
/* NxS[ 371] */ // Shortest string "!\\"
      new Table(3, 1, -1, new short[] {372}),
/* NxS[ 372] */ // Shortest string "!\\\n"
      new Table(2, 42, -1, new short[] {371, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 98}),
/* NxS[ 373] */ // Shortest string "?\\"
      new Table(3, 1, -1, new short[] {374}),
/* NxS[ 374] */ // Shortest string "?\\\n"
      new Table(2, 46, -1, new short[] {373, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          99, -1, -1, -1, -1, -1, 100, 101}),
/* NxS[ 375] */ // Shortest string "|\\"
      new Table(3, 1, -1, new short[] {376}),
/* NxS[ 376] */ // Shortest string "|\\\n"
      new Table(2, 44, -1, new short[] {375, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 102, -1, 103}),
/* NxS[ 377] */ // Shortest string "+\\"
      new Table(3, 1, -1, new short[] {378}),
/* NxS[ 378] */ // Shortest string "+\\\n"
      new Table(2, 43, -1, new short[] {377, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 104, 105}),
/* NxS[ 379] */ // Shortest string "=\\"
      new Table(3, 1, -1, new short[] {380}),
/* NxS[ 380] */ // Shortest string "=\\\n"
      new Table(2, 42, -1, new short[] {379, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 106, -1, 
          -1, -1, -1, 107}),
/* NxS[ 381] */ // Shortest string "-\\"
      new Table(3, 1, -1, new short[] {384}),
/* NxS[ 382] */ // Shortest string "->\\"
      new Table(3, 1, -1, new short[] {383}),
/* NxS[ 383] */ // Shortest string "->\\\n"
      new Table(2, 40, -1, new short[] {382, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 111}),
/* NxS[ 384] */ // Shortest string "-\\\n"
      new Table(2, 42, -1, new short[] {381, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, 
          -1, -1, 109, 110}),
/* NxS[ 385] */ // Shortest string "*\\"
      new Table(3, 1, -1, new short[] {386}),
/* NxS[ 386] */ // Shortest string "*\\\n"
      new Table(2, 42, -1, new short[] {385, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 112}),
/* NxS[ 387] */ // Shortest string ".\\"
      new Table(3, 1, -1, new short[] {390}),
/* NxS[ 388] */ // Shortest string ".."
      new Table(2, 39, -1, new short[] {389, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          114}),
/* NxS[ 389] */ // Shortest string "..\\"
      new Table(3, 1, -1, new short[] {388}),
/* NxS[ 390] */ // Shortest string ".\\\n"
      new Table(32, 60, -1, new short[] {74, -1, -1, -1, -1, -1, 
          -1, -1, 388, 113, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, -1, -1, 74, -1, -1, 
          -1, 74, -1, -1, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 387}),
/* NxS[ 391] */ // Shortest string ":\\"
      new Table(3, 1, -1, new short[] {396}),
/* NxS[ 392] */ // Shortest string ":?"
      new Table(39, 1, -1, new short[] {393}),
/* NxS[ 393] */ // Shortest string ":?:"
      new Table(2, 1, -1, new short[] {394}),
/* NxS[ 394] */ // Shortest string ":?:\\"
      new Table(3, 1, -1, new short[] {395}),
/* NxS[ 395] */ // Shortest string ":?:\\\n"
      new Table(38, 9, -1, new short[] {115, -1, -1, -1, -1, -1, 
          -1, -1, 392}),
/* NxS[ 396] */ // Shortest string ":\\\n"
      new Table(2, 38, -1, new short[] {391, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 116}),
/* NxS[ 397] */ // Shortest string ">\\"
      new Table(3, 1, -1, new short[] {400}),
/* NxS[ 398] */ // Shortest string ">>\\"
      new Table(3, 1, -1, new short[] {399}),
/* NxS[ 399] */ // Shortest string ">>\\\n"
      new Table(2, 42, -1, new short[] {398, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 119}),
/* NxS[ 400] */ // Shortest string ">\\\n"
      new Table(2, 42, -1, new short[] {397, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 117, -1, 
          -1, -1, -1, 118}),
/* NxS[ 401] */ // Shortest string "<\\"
      new Table(3, 1, -1, new short[] {410}),
/* NxS[ 402] */ // Shortest string "<?"
      new Table(39, 1, -1, new short[] {403}),
/* NxS[ 403] */ // Shortest string "<?:"
      new Table(2, 1, -1, new short[] {404}),
/* NxS[ 404] */ // Shortest string "<?:\\"
      new Table(3, 1, -1, new short[] {405}),
/* NxS[ 405] */ // Shortest string "<?:\\\n"
      new Table(39, 14, -1, new short[] {121, -1, -1, -1, -1, -1, 
          -1, 402, -1, -1, -1, -1, -1, 123}),
/* NxS[ 406] */ // Shortest string "<=\\"
      new Table(3, 1, -1, new short[] {407}),
/* NxS[ 407] */ // Shortest string "<=\\\n"
      new Table(2, 37, -1, new short[] {406, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 124}),
/* NxS[ 408] */ // Shortest string "<<\\"
      new Table(3, 1, -1, new short[] {409}),
/* NxS[ 409] */ // Shortest string "<<\\\n"
      new Table(2, 42, -1, new short[] {408, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 125}),
/* NxS[ 410] */ // Shortest string "<\\\n"
      new Table(2, 42, -1, new short[] {401, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 120, -1, -1, -1, -1, -1, 
          -1, -1, -1, 122}),
/* NxS[ 411] */ // Shortest string "\t\\"
      new Table(3, 1, -1, new short[] {8}),
/* NxS[ 412] */ // Shortest string "0\\"
      new Table(3, 1, -1, new short[] {7}),
/* NxS[ 413] */ // Shortest string "0_"
      new Table(66, 61, -1, new short[] {165, -1, 165, 165, 165, -1, 
          165, 165, -1, 165, 165, 165, -1, 165, 165, 165, 165, 165, 165, 165, 165, 165, 
          165, -1, 165, 501, -1, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 
          165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 
          -1, -1, -1, -1, 165, 165, 165}),
/* NxS[ 414] */ // Shortest string "09"
      new Table(32, 64, -1, new short[] {414, -1, -1, 498, -1, -1, 
          -1, -1, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 414, 414, -1, 414, -1, -1, 
          -1, 414, 498, -1, 414, -1, -1, -1, -1, -1, -1, 498, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 497, -1, -1, -1, 498}),
/* NxS[ 415] */ // Shortest string "0B\\"
      new Table(3, 1, -1, new short[] {422}),
/* NxS[ 416] */ // Shortest string "0B0\\"
      new Table(3, 1, -1, new short[] {131}),
/* NxS[ 417] */ // Shortest string "0B0_"
      new Table(66, 61, -1, new short[] {133, -1, 133, 133, 133, -1, 
          133, 133, -1, 133, 133, 133, -1, 133, 133, 133, 133, 133, 133, 133, 133, 133, 
          133, -1, 133, 418, -1, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 
          133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 
          -1, -1, -1, -1, 133, 133, 133}),
/* NxS[ 418] */ // Shortest string "0B0s\\"
      new Table(3, 1, -1, new short[] {417}),
/* NxS[ 419] */ // Shortest string "0B0_s\\"
      new Table(3, 1, -1, new short[] {420}),
/* NxS[ 420] */ // Shortest string "0B0_s\\\n"
      new Table(33, 60, 133, new short[] {-1, -1, 133, 133, 133, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 133, -1, 133, 133, 133, 133, 133, 
          133, 133, 133, 133, 133, 133, 133, -1, 133, 133, 133, 133, 133, 133, 133, 133, 
          133, 133, -1, 133, 419, -1}),
/* NxS[ 421] */ // Shortest string ""
      new Table(66, 61, -1, new short[] {132, -1, 132, 132, 132, -1, 
          132, 132, -1, 132, 132, 132, -1, 132, 132, 132, 132, 132, 132, 132, 132, 132, 
          132, -1, 132, 418, -1, 132, 132, 132, 132, 132, 132, 132, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 132, 132, 132}),
/* NxS[ 422] */ // Shortest string "0B\\\n"
      new Table(66, 61, -1, new short[] {126, -1, 126, 126, 126, 131, 
          126, 126, -1, 126, 126, 126, -1, 126, 126, 126, 126, 126, 126, 126, 126, 126, 
          126, -1, 126, 415, -1, 126, 126, 126, 126, 126, 126, 126, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 131, -1, -1, 126, 126, 126}),
/* NxS[ 423] */ // Shortest string "0s\\"
      new Table(3, 1, -1, new short[] {424}),
/* NxS[ 424] */ // Shortest string "0s\\\n"
      new Table(66, 61, -1, new short[] {126, -1, 126, 126, 126, -1, 
          126, 126, -1, 126, 126, 126, -1, 126, 126, 126, 126, 126, 126, 126, 126, 126, 
          126, -1, 126, 423, -1, 126, 126, 126, 126, 126, 126, 126, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 126, 126, 126}),
/* NxS[ 425] */ // Shortest string "0X\\"
      new Table(3, 1, -1, new short[] {496}),
/* NxS[ 426] */ // Shortest string "0X."
      new Table(64, 63, -1, new short[] {428, -1, -1, 428, -1, 428, 
          428, 428, -1, -1, 428, -1, -1, -1, -1, 428, -1, -1, -1, -1, 428, 428, 
          -1, -1, -1, -1, -1, 427, -1, -1, -1, 428, -1, 428, 428, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 428, -1, -1, 428, -1, 428}),
/* NxS[ 427] */ // Shortest string "0X.\\"
      new Table(3, 1, -1, new short[] {426}),
/* NxS[ 428] */ // Shortest string "0X.e"
      new Table(64, 63, -1, new short[] {428, -1, -1, 428, -1, 428, 
          428, 428, 431, -1, 428, -1, -1, -1, -1, 428, -1, 431, -1, -1, 428, 428, 
          -1, -1, -1, -1, -1, 429, -1, -1, -1, 430, -1, 428, 428, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 428, -1, -1, 430, -1, 428}),
/* NxS[ 429] */ // Shortest string "0X.e\\"
      new Table(3, 1, -1, new short[] {428}),
/* NxS[ 430] */ // Shortest string "0X.ee"
      new Table(32, 67, -1, new short[] {139, -1, -1, 430, -1, 428, 
          -1, -1, -1, -1, 433, -1, 433, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139, -1, -1, 139, -1, 428, 
          428, 139, 431, -1, 139, -1, -1, -1, -1, 428, -1, 431, -1, -1, 428, 428, 
          -1, -1, -1, -1, -1, 441, -1, -1, -1, 430, -1, 428, 428}),
/* NxS[ 431] */ // Shortest string "0X.eP"
      new Table(32, 60, -1, new short[] {136, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 433, -1, 433, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 136, -1, -1, 136, -1, -1, 
          -1, 136, -1, -1, 136, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 432}),
/* NxS[ 432] */ // Shortest string "0X.eP\\"
      new Table(3, 1, -1, new short[] {431}),
/* NxS[ 433] */ // Shortest string "0X.ee-"
      new Table(64, 58, -1, new short[] {136, -1, -1, 136, -1, -1, 
          -1, 136, -1, -1, 136, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 434, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 136}),
/* NxS[ 434] */ // Shortest string "0X.ee-\\"
      new Table(3, 1, -1, new short[] {433}),
/* NxS[ 435] */ // Shortest string "0X.eP0\\"
      new Table(3, 1, -1, new short[] {136}),
/* NxS[ 436] */ // Shortest string "0X.ee0_"
      new Table(66, 61, -1, new short[] {138, -1, 138, 138, 138, -1, 
          138, 138, -1, 138, 138, 138, -1, 138, 138, 138, 138, 138, 138, 138, 138, 138, 
          138, -1, 138, 437, -1, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 
          138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 
          -1, -1, -1, -1, 138, 138, 138}),
/* NxS[ 437] */ // Shortest string "0X.ee0s\\"
      new Table(3, 1, -1, new short[] {436}),
/* NxS[ 438] */ // Shortest string "0X.ee0_s\\"
      new Table(3, 1, -1, new short[] {439}),
/* NxS[ 439] */ // Shortest string "0X.ee0_s\\\n"
      new Table(33, 60, 138, new short[] {-1, -1, 138, 138, 138, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 138, -1, 138, 138, 138, 138, 138, 
          138, 138, 138, 138, 138, 138, 138, -1, 138, 138, 138, 138, 138, 138, 138, 138, 
          138, 138, -1, 138, 438, -1}),
/* NxS[ 440] */ // Shortest string ""
      new Table(66, 61, -1, new short[] {137, -1, 137, 137, 137, -1, 
          137, 137, -1, 137, 137, 137, -1, 137, 137, 137, 137, 137, 137, 137, 137, 137, 
          137, -1, 137, 437, -1, 137, 137, 137, 137, 137, 137, 137, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 137, 137, 137}),
/* NxS[ 441] */ // Shortest string "0X.ee\\"
      new Table(3, 1, -1, new short[] {430}),
/* NxS[ 442] */ // Shortest string "0X.ee0\\"
      new Table(3, 1, -1, new short[] {139}),
/* NxS[ 443] */ // Shortest string "0X.ee0P\\"
      new Table(3, 1, -1, new short[] {444}),
/* NxS[ 444] */ // Shortest string "0X.ee0P\\\n"
      new Table(32, 68, -1, new short[] {136, -1, -1, 137, 137, 137, 
          -1, -1, -1, -1, 433, -1, 433, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 136, -1, 137, 136, 137, 137, 
          137, 136, 137, 137, 136, 137, 137, 137, -1, 137, 137, 137, 137, 137, 137, 137, 
          137, 137, 137, -1, 137, 443, -1, 137, 137, 137, 137, 137, 137, 137}),
/* NxS[ 445] */ // Shortest string "0X.ee0f\\"
      new Table(3, 1, -1, new short[] {448}),
/* NxS[ 446] */ // Shortest string "0X.ee0e\\"
      new Table(3, 1, -1, new short[] {447}),
/* NxS[ 447] */ // Shortest string "0X.ee0e\\\n"
      new Table(32, 68, -1, new short[] {139, -1, -1, 140, 137, 141, 
          -1, -1, -1, -1, 433, -1, 433, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139, -1, 137, 139, 137, 141, 
          141, 139, 142, 137, 139, 137, 137, 137, -1, 141, 137, 142, 137, 137, 141, 141, 
          137, 137, 137, -1, 137, 446, -1, 137, 137, 140, 137, 141, 141, 137}),
/* NxS[ 448] */ // Shortest string "0X.ee0f\\\n"
      new Table(64, 63, -1, new short[] {428, -1, 137, 428, 137, 141, 
          141, 428, 142, 137, 428, 137, 137, 137, -1, 141, 137, 142, 137, 137, 141, 141, 
          137, 137, 137, -1, 137, 445, -1, 137, 137, 140, 137, 141, 141, 137, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 428, -1, -1, 140, 137, 141}),
/* NxS[ 449] */ // Shortest string "0X0\\"
      new Table(3, 1, -1, new short[] {135}),
/* NxS[ 450] */ // Shortest string "0Xe_"
      new Table(66, 61, -1, new short[] {156, -1, 156, 156, 156, -1, 
          156, 156, -1, 156, 156, 156, -1, 156, 156, 156, 156, 156, 156, 156, 156, 156, 
          156, -1, 156, 462, -1, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 
          156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 
          -1, -1, -1, -1, 156, 156, 156}),
/* NxS[ 451] */ // Shortest string "0Xe."
      new Table(64, 63, -1, new short[] {428, -1, -1, 428, -1, 428, 
          428, 428, 466, -1, 428, -1, -1, -1, -1, 428, -1, 466, -1, -1, 428, 428, 
          -1, -1, -1, -1, -1, 464, -1, -1, -1, 465, -1, 428, 428, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 428, -1, -1, 465, -1, 428}),
/* NxS[ 452] */ // Shortest string "0X0P\\"
      new Table(3, 1, -1, new short[] {461}),
/* NxS[ 453] */ // Shortest string "0Xee-"
      new Table(64, 58, -1, new short[] {146, -1, -1, 146, -1, -1, 
          -1, 146, -1, -1, 146, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 454, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 146}),
/* NxS[ 454] */ // Shortest string "0Xee-\\"
      new Table(3, 1, -1, new short[] {453}),
/* NxS[ 455] */ // Shortest string "0XeP0\\"
      new Table(3, 1, -1, new short[] {146}),
/* NxS[ 456] */ // Shortest string "0XeP0_"
      new Table(66, 61, -1, new short[] {148, -1, 148, 148, 148, -1, 
          148, 148, -1, 148, 148, 148, -1, 148, 148, 148, 148, 148, 148, 148, 148, 148, 
          148, -1, 148, 457, -1, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 
          148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 
          -1, -1, -1, -1, 148, 148, 148}),
/* NxS[ 457] */ // Shortest string "0XeP0s\\"
      new Table(3, 1, -1, new short[] {456}),
/* NxS[ 458] */ // Shortest string "0XeP0_s\\"
      new Table(3, 1, -1, new short[] {459}),
/* NxS[ 459] */ // Shortest string "0XeP0_s\\\n"
      new Table(33, 60, 148, new short[] {-1, -1, 148, 148, 148, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 148, -1, 148, 148, 148, 148, 148, 
          148, 148, 148, 148, 148, 148, 148, -1, 148, 148, 148, 148, 148, 148, 148, 148, 
          148, 148, -1, 148, 458, -1}),
/* NxS[ 460] */ // Shortest string ""
      new Table(66, 61, -1, new short[] {147, -1, 147, 147, 147, -1, 
          147, 147, -1, 147, 147, 147, -1, 147, 147, 147, 147, 147, 147, 147, 147, 147, 
          147, -1, 147, 457, -1, 147, 147, 147, 147, 147, 147, 147, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 147, 147, 147}),
/* NxS[ 461] */ // Shortest string "0X0P\\\n"
      new Table(32, 68, -1, new short[] {146, -1, -1, -1, 143, -1, 
          -1, -1, -1, -1, 453, -1, 453, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 146, -1, 143, 146, 143, -1, 
          -1, 146, 143, 143, 146, 143, 143, 143, -1, -1, 143, 143, 143, 143, -1, -1, 
          143, 143, 143, -1, 143, 452, -1, 143, 143, -1, 143, -1, -1, 143}),
/* NxS[ 462] */ // Shortest string "0Xe_\\"
      new Table(3, 1, -1, new short[] {463}),
/* NxS[ 463] */ // Shortest string "0Xe_\\\n"
      new Table(66, 60, -1, new short[] {143, -1, 143, -1, -1, -1, 
          143, 143, -1, 143, 143, 143, -1, -1, 143, 143, 143, 143, -1, -1, 143, 143, 
          143, -1, 143, 462, -1, 143, 143, -1, 143, -1, -1, 143, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 143}),
/* NxS[ 464] */ // Shortest string "0Xe.\\"
      new Table(3, 1, -1, new short[] {451}),
/* NxS[ 465] */ // Shortest string "0Xe.e"
      new Table(32, 67, -1, new short[] {152, -1, -1, 430, -1, 428, 
          -1, -1, -1, -1, 468, -1, 468, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 152, -1, -1, 152, -1, 428, 
          428, 152, 431, -1, 152, -1, -1, -1, -1, 428, -1, 431, -1, -1, 428, 428, 
          -1, -1, -1, -1, -1, 477, -1, -1, -1, 430, -1, 428, 428}),
/* NxS[ 466] */ // Shortest string "0Xe.P"
      new Table(32, 60, -1, new short[] {149, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 468, -1, 468, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 149, -1, -1, 149, -1, -1, 
          -1, 149, -1, -1, 149, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 467}),
/* NxS[ 467] */ // Shortest string "0Xe.P\\"
      new Table(3, 1, -1, new short[] {466}),
/* NxS[ 468] */ // Shortest string "0Xe.e-"
      new Table(64, 58, -1, new short[] {149, -1, -1, 149, -1, -1, 
          -1, 149, -1, -1, 149, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 469, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 149}),
/* NxS[ 469] */ // Shortest string "0Xe.e-\\"
      new Table(3, 1, -1, new short[] {468}),
/* NxS[ 470] */ // Shortest string "0Xe.P0\\"
      new Table(3, 1, -1, new short[] {149}),
/* NxS[ 471] */ // Shortest string "0Xe.e0_"
      new Table(66, 61, -1, new short[] {151, -1, 151, 151, 151, -1, 
          151, 151, -1, 151, 151, 151, -1, 151, 151, 151, 151, 151, 151, 151, 151, 151, 
          151, -1, 151, 472, -1, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 
          151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 
          -1, -1, -1, -1, 151, 151, 151}),
/* NxS[ 472] */ // Shortest string "0Xe.e0_\\"
      new Table(3, 1, -1, new short[] {471}),
/* NxS[ 473] */ // Shortest string "0Xe.e0_s\\"
      new Table(3, 1, -1, new short[] {474}),
/* NxS[ 474] */ // Shortest string "0Xe.e0_s\\\n"
      new Table(33, 60, 151, new short[] {-1, -1, 151, 151, 151, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 151, -1, 151, 151, 151, 151, 151, 
          151, 151, 151, 151, 151, 151, 151, -1, 151, 151, 151, 151, 151, 151, 151, 151, 
          151, 151, -1, 151, 473, -1}),
/* NxS[ 475] */ // Shortest string "0Xe.e0s\\"
      new Table(3, 1, -1, new short[] {476}),
/* NxS[ 476] */ // Shortest string "0Xe.e0s\\\n"
      new Table(66, 61, -1, new short[] {150, -1, 150, 150, 150, -1, 
          150, 150, -1, 150, 150, 150, -1, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
          150, -1, 150, 475, -1, 150, 150, 150, 150, 150, 150, 150, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 150, 150, 150}),
/* NxS[ 477] */ // Shortest string "0Xe.e\\"
      new Table(3, 1, -1, new short[] {465}),
/* NxS[ 478] */ // Shortest string "0Xe.e0\\"
      new Table(3, 1, -1, new short[] {152}),
/* NxS[ 479] */ // Shortest string "0Xe.e0P\\"
      new Table(3, 1, -1, new short[] {480}),
/* NxS[ 480] */ // Shortest string "0Xe.e0P\\\n"
      new Table(32, 68, -1, new short[] {136, -1, -1, 150, 150, 150, 
          -1, -1, -1, -1, 433, -1, 433, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 136, -1, 150, 136, 150, 150, 
          150, 136, 150, 150, 136, 150, 150, 150, -1, 150, 150, 150, 150, 150, 150, 150, 
          150, 150, 150, -1, 150, 479, -1, 150, 150, 150, 150, 150, 150, 150}),
/* NxS[ 481] */ // Shortest string "0Xe.e0f\\"
      new Table(3, 1, -1, new short[] {484}),
/* NxS[ 482] */ // Shortest string "0Xe.e0e\\"
      new Table(3, 1, -1, new short[] {483}),
/* NxS[ 483] */ // Shortest string "0Xe.e0e\\\n"
      new Table(32, 68, -1, new short[] {139, -1, -1, 153, 150, 154, 
          -1, -1, -1, -1, 433, -1, 433, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139, -1, 150, 139, 150, 154, 
          154, 139, 155, 150, 139, 150, 150, 150, -1, 154, 150, 155, 150, 150, 154, 154, 
          150, 150, 150, -1, 150, 482, -1, 150, 150, 153, 150, 154, 154, 150}),
/* NxS[ 484] */ // Shortest string "0Xe.e0f\\\n"
      new Table(64, 63, -1, new short[] {428, -1, 150, 428, 150, 154, 
          154, 428, 155, 150, 428, 150, 150, 150, -1, 154, 150, 155, 150, 150, 154, 154, 
          150, 150, 150, -1, 150, 481, -1, 150, 150, 153, 150, 154, 154, 150, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 428, -1, -1, 153, 150, 154}),
/* NxS[ 485] */ // Shortest string "0Xe_s\\"
      new Table(3, 1, -1, new short[] {486}),
/* NxS[ 486] */ // Shortest string "0Xe_s\\\n"
      new Table(33, 60, 156, new short[] {-1, -1, 156, 156, 156, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 156, -1, 156, 156, 156, 156, 156, 
          156, 156, 156, 156, 156, 156, 156, -1, 156, 156, 156, 156, 156, 156, 156, 156, 
          156, 156, -1, 156, 485, -1}),
/* NxS[ 487] */ // Shortest string "0Xee0P\\"
      new Table(3, 1, -1, new short[] {488}),
/* NxS[ 488] */ // Shortest string "0Xee0P\\\n"
      new Table(32, 68, -1, new short[] {146, -1, -1, 147, 158, 147, 
          -1, -1, -1, -1, 453, -1, 453, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 146, -1, 158, 146, 158, 147, 
          147, 146, 158, 158, 146, 158, 158, 158, -1, 147, 158, 158, 158, 158, 147, 147, 
          158, 158, 158, -1, 158, 487, -1, 158, 158, 147, 158, 147, 147, 158}),
/* NxS[ 489] */ // Shortest string "0Xee0s\\"
      new Table(3, 1, -1, new short[] {490}),
/* NxS[ 490] */ // Shortest string "0Xee0s\\\n"
      new Table(66, 61, -1, new short[] {158, -1, 158, 147, 147, -1, 
          158, 158, -1, 158, 158, 158, -1, 147, 158, 158, 158, 158, 147, 147, 158, 158, 
          158, -1, 158, 489, -1, 158, 158, 147, 158, 147, 147, 158, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 147, 158, 147}),
/* NxS[ 491] */ // Shortest string "0X0e\\"
      new Table(3, 1, -1, new short[] {159}),
/* NxS[ 492] */ // Shortest string "0Xe\\"
      new Table(3, 1, -1, new short[] {164}),
/* NxS[ 493] */ // Shortest string "0XeP\\"
      new Table(3, 1, -1, new short[] {494}),
/* NxS[ 494] */ // Shortest string "0XeP\\\n"
      new Table(32, 68, -1, new short[] {146, -1, -1, 126, 126, 126, 
          -1, -1, -1, -1, 453, -1, 453, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 146, -1, 126, 146, 126, 126, 
          126, 146, 126, 126, 146, 126, 126, 126, -1, 126, 126, 126, 126, 126, 126, 126, 
          126, 126, 126, -1, 126, 493, -1, 126, 126, 126, 126, 126, 126, 126}),
/* NxS[ 495] */ // Shortest string "0Xee\\"
      new Table(3, 1, -1, new short[] {163}),
/* NxS[ 496] */ // Shortest string "0X\\\n"
      new Table(64, 66, -1, new short[] {135, -1, 126, 135, 126, 134, 
          134, 135, 126, 126, 135, 126, 126, 126, -1, 134, 126, 126, 126, 126, 134, 134, 
          126, 126, 126, -1, 126, 425, -1, 126, 126, 134, 126, 134, 134, 126, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 135, -1, -1, 134, 126, 134, -1, -1, 426}),
/* NxS[ 497] */ // Shortest string "09\\"
      new Table(3, 1, -1, new short[] {414}),
/* NxS[ 498] */ // Shortest string "09e"
      new Table(32, 60, -1, new short[] {82, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 335, -1, 335, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 82, -1, -1, 82, -1, -1, 
          -1, 82, -1, -1, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 499}),
/* NxS[ 499] */ // Shortest string "09e\\"
      new Table(3, 1, -1, new short[] {498}),
/* NxS[ 500] */ // Shortest string "00\\"
      new Table(3, 1, -1, new short[] {128}),
/* NxS[ 501] */ // Shortest string "0_\\"
      new Table(3, 1, -1, new short[] {413}),
/* NxS[ 502] */ // Shortest string "0_s\\"
      new Table(3, 1, -1, new short[] {503}),
/* NxS[ 503] */ // Shortest string "0_s\\\n"
      new Table(33, 60, 165, new short[] {-1, -1, 165, 165, 165, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 165, -1, 165, 165, 165, 165, 165, 
          165, 165, 165, 165, 165, 165, 165, -1, 165, 165, 165, 165, 165, 165, 165, 165, 
          165, 165, -1, 165, 502, -1}),
/* NxS[ 504] */ // Shortest string "0e\\"
      new Table(3, 1, -1, new short[] {505}),
/* NxS[ 505] */ // Shortest string "0e\\\n"
      new Table(32, 68, -1, new short[] {82, -1, -1, 126, 126, 126, 
          -1, -1, -1, -1, 335, -1, 335, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 82, -1, 126, 82, 126, 126, 
          126, 82, 126, 126, 82, 126, 126, 126, -1, 126, 126, 126, 126, 126, 126, 126, 
          126, 126, 126, -1, 126, 504, -1, 126, 126, 126, 126, 126, 126, 126}),
/* NxS[ 506] */ // Shortest string "n?"
      new Table(39, 1, -1, new short[] {507}),
/* NxS[ 507] */ // Shortest string "n?:"
      new Table(2, 1, -1, new short[] {508}),
/* NxS[ 508] */ // Shortest string "n?:\\"
      new Table(3, 1, -1, new short[] {509}),
/* NxS[ 509] */ // Shortest string "n?:\\\n"
      new Table(7, 40, -1, new short[] {510, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 506}),
/* NxS[ 510] */ // Shortest string "no?:\\\n"
      new Table(46, 38, -1, new short[] {511, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 167}),
/* NxS[ 511] */ // Shortest string "no?"
      new Table(39, 1, -1, new short[] {524}),
/* NxS[ 512] */ // Shortest string "no?:\\\nt_"
      new Table(6, 41, -1, new short[] {517, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 518}),
/* NxS[ 513] */ // Shortest string "not?"
      new Table(39, 1, -1, new short[] {514}),
/* NxS[ 514] */ // Shortest string "not?:"
      new Table(2, 1, -1, new short[] {515}),
/* NxS[ 515] */ // Shortest string "not?:\\"
      new Table(3, 1, -1, new short[] {516}),
/* NxS[ 516] */ // Shortest string "not?:\\\n"
      new Table(12, 35, -1, new short[] {512, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 513}),
/* NxS[ 517] */ // Shortest string "no?:\\\nt_e"
      new Table(46, 43, -1, new short[] {521, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 168}),
/* NxS[ 518] */ // Shortest string "not_?"
      new Table(39, 1, -1, new short[] {519}),
/* NxS[ 519] */ // Shortest string "not_?:"
      new Table(2, 1, -1, new short[] {520}),
/* NxS[ 520] */ // Shortest string "not_?:\\"
      new Table(3, 1, -1, new short[] {512}),
/* NxS[ 521] */ // Shortest string "not_e?"
      new Table(39, 1, -1, new short[] {522}),
/* NxS[ 522] */ // Shortest string "not_e?:"
      new Table(2, 1, -1, new short[] {523}),
/* NxS[ 523] */ // Shortest string "not_e?:\\"
      new Table(3, 1, -1, new short[] {517}),
/* NxS[ 524] */ // Shortest string "no?:"
      new Table(2, 1, -1, new short[] {525}),
/* NxS[ 525] */ // Shortest string "no?:\\"
      new Table(3, 1, -1, new short[] {510}),
/* NxS[ 526] */ // Shortest string "d\\"
      new Table(3, 1, -1, new short[] {537}),
/* NxS[ 527] */ // Shortest string "de\\"
      new Table(3, 1, -1, new short[] {536}),
/* NxS[ 528] */ // Shortest string "def\\"
      new Table(3, 1, -1, new short[] {535}),
/* NxS[ 529] */ // Shortest string "defi\\"
      new Table(3, 1, -1, new short[] {534}),
/* NxS[ 530] */ // Shortest string "defin\\"
      new Table(3, 1, -1, new short[] {533}),
/* NxS[ 531] */ // Shortest string "define\\"
      new Table(3, 1, -1, new short[] {532}),
/* NxS[ 532] */ // Shortest string "define\\\n"
      new Table(64, 63, -1, new short[] {3, -1, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, -1, 3, 531, -1, 3, 3, 3, 3, 3, 177, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, 3, 3, 3}),
/* NxS[ 533] */ // Shortest string "defin\\\n"
      new Table(33, 63, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 530, -1, 3, 3, 176}),
/* NxS[ 534] */ // Shortest string "defi\\\n"
      new Table(64, 63, -1, new short[] {3, -1, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, -1, 3, 529, -1, 3, 3, 3, 3, 3, 3, 175, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, 3, 3, 3}),
/* NxS[ 535] */ // Shortest string "def\\\n"
      new Table(33, 61, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 528, -1, 174}),
/* NxS[ 536] */ // Shortest string "de\\\n"
      new Table(64, 63, -1, new short[] {3, -1, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, -1, 3, 527, -1, 3, 3, 3, 3, 173, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, 3, 3, 3}),
/* NxS[ 537] */ // Shortest string "d\\\n"
      new Table(33, 63, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 526, -1, 3, 3, 172}),
/* NxS[ 538] */ // Shortest string "o?"
      new Table(39, 1, -1, new short[] {551}),
/* NxS[ 539] */ // Shortest string "or?"
      new Table(39, 1, -1, new short[] {540}),
/* NxS[ 540] */ // Shortest string "or?:"
      new Table(2, 1, -1, new short[] {541}),
/* NxS[ 541] */ // Shortest string "or?:\\"
      new Table(3, 1, -1, new short[] {542}),
/* NxS[ 542] */ // Shortest string "or?:\\\n"
      new Table(12, 35, -1, new short[] {543, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 539}),
/* NxS[ 543] */ // Shortest string "o?:\\\nr_"
      new Table(6, 41, -1, new short[] {544, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 545}),
/* NxS[ 544] */ // Shortest string "o?:\\\nr_e"
      new Table(46, 43, -1, new short[] {548, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 180}),
/* NxS[ 545] */ // Shortest string "or_?"
      new Table(39, 1, -1, new short[] {546}),
/* NxS[ 546] */ // Shortest string "or_?:"
      new Table(2, 1, -1, new short[] {547}),
/* NxS[ 547] */ // Shortest string "or_?:\\"
      new Table(3, 1, -1, new short[] {543}),
/* NxS[ 548] */ // Shortest string "or_e?"
      new Table(39, 1, -1, new short[] {549}),
/* NxS[ 549] */ // Shortest string "or_e?:"
      new Table(2, 1, -1, new short[] {550}),
/* NxS[ 550] */ // Shortest string "or_e?:\\"
      new Table(3, 1, -1, new short[] {544}),
/* NxS[ 551] */ // Shortest string "o?:"
      new Table(2, 1, -1, new short[] {552}),
/* NxS[ 552] */ // Shortest string "o?:\\"
      new Table(3, 1, -1, new short[] {553}),
/* NxS[ 553] */ // Shortest string "o?:\\\n"
      new Table(46, 41, -1, new short[] {538, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 182}),
/* NxS[ 554] */ // Shortest string "\\<<"
      new Table(35, 1, -1, new short[] {555}),
/* NxS[ 555] */ // Shortest string "\\<<E"
      new Table(36, 1, -1, new short[] {556}),
/* NxS[ 556] */ // Shortest string "\\<<EO"
      new Table(37, 1, -1, new short[] {557}),
/* NxS[ 557] */ // Shortest string "\\<<EOF"
      new Table(38, 1, -1, new short[] {558}),
/* NxS[ 558] */ // Shortest string "\\<<EOF>"
      new Table(38, 1, -1, new short[] {183}),
/* NxS[ 559] */ // Shortest string "s\\"
      new Table(3, 1, -1, new short[] {568}),
/* NxS[ 560] */ // Shortest string "si\\"
      new Table(3, 1, -1, new short[] {567}),
/* NxS[ 561] */ // Shortest string "siz\\"
      new Table(3, 1, -1, new short[] {566}),
/* NxS[ 562] */ // Shortest string "size\\"
      new Table(3, 1, -1, new short[] {565}),
/* NxS[ 563] */ // Shortest string "sizeo\\"
      new Table(3, 1, -1, new short[] {564}),
/* NxS[ 564] */ // Shortest string "sizeo\\\n"
      new Table(64, 63, -1, new short[] {3, -1, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, -1, 3, 563, -1, 3, 3, 3, 3, 191, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, 3, 3, 3}),
/* NxS[ 565] */ // Shortest string "size\\\n"
      new Table(64, 63, -1, new short[] {3, -1, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, -1, 3, 562, -1, 3, 3, 3, 190, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, -1, -1, 3, 3, 3}),
/* NxS[ 566] */ // Shortest string "siz\\\n"
      new Table(33, 63, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 561, -1, 3, 3, 189}),
/* NxS[ 567] */ // Shortest string "si\\\n"
      new Table(33, 62, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 560, -1, 3, 188}),
/* NxS[ 568] */ // Shortest string "s\\\n"
      new Table(33, 61, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, -1, 3, 559, -1, 187}),
/* NxS[ 569] */ // Shortest string ""
      new Table(41, 10, 192, new short[] {570, 192, 192, 192, 192, 192, 
          192, 192, 192, 193}),
/* NxS[ 570] */ // Shortest string "*"
      new Table(50, 1, 194, new short[] {195}),
/* NxS[ 571] */ // Shortest string ""
      new Table(2, 2, 196, new short[] {572, 197}),
/* NxS[ 572] */ // Shortest string "\\"
      new Table(2, 33, 198, new short[] {573, 198, 198, 198, 198, 198, 
          198, 198, -1, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 
          198, 198, 198, 198, 198, 198, 198, 198, 198, 199, 200}),
/* NxS[ 573] */ // Shortest string "\\\\"
      new Table(10, 1, -1, new short[] {202}),
/* NxS[ 574] */ // Shortest string "\\<<"
      new Table(35, 1, -1, new short[] {575}),
/* NxS[ 575] */ // Shortest string "\\<<E"
      new Table(36, 1, -1, new short[] {576}),
/* NxS[ 576] */ // Shortest string "\\<<EO"
      new Table(37, 1, -1, new short[] {577}),
/* NxS[ 577] */ // Shortest string "\\<<EOF"
      new Table(38, 1, -1, new short[] {578}),
/* NxS[ 578] */ // Shortest string "\\<<EOF>"
      new Table(38, 1, -1, new short[] {201}),
/* NxS[ 579] */ // Shortest string ""
      new Table(55, 1, 580, new short[] {203}),
/* NxS[ 580] */ // Shortest string "s"
      new Table(55, 1, 580, new short[] {203}),
/* NxS[ 581] */ // Shortest string ""
      new Table(56, 23, 204, new short[] {205, 204, 204, 204, 204, 204, 
          204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 
          206}),
/* NxS[ 582] */ // Shortest string ")s"
      new Table(56, 23, 582, new short[] {-1, 582, 582, 582, 582, 582, 
          582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 
          207}),
/* NxS[ 583] */ // Shortest string ")\"_"
      new Table(31, 62, 209, new short[] {582, 582, 582, 582, 209, 209, 
          209, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 
          582, 582, 582, -1, 582, 582, 582, 582, 582, 582, 582, 582, 582, 209, 582, 209, 
          209, 209, 582, 209, 209, 582, 209, 209, 209, 207, 209, 209, 209, 209, 209, 209, 
          209, 209, 209, 209, 582, 209, 584, 582}),
/* NxS[ 584] */ // Shortest string ")\"_\\"
      new Table(56, 37, 582, new short[] {-1, 582, 582, 582, 582, 582, 
          582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 
          207, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 583}),
/* NxS[ 585] */ // Shortest string ")\"_s\\"
      new Table(56, 37, 582, new short[] {-1, 582, 582, 582, 582, 582, 
          582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 
          207, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 586}),
/* NxS[ 586] */ // Shortest string ")\"_s\\\n"
      new Table(33, 60, 209, new short[] {582, 582, 209, 209, 209, 582, 
          582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 
          582, -1, 582, 582, 582, 582, 582, 582, 582, 209, 582, 209, 209, 209, 209, 209, 
          209, 209, 209, 209, 209, 209, 209, 207, 209, 209, 209, 209, 209, 209, 209, 209, 
          209, 209, 582, 209, 585, 582}),
/* NxS[ 587] */ // Shortest string ")\"s\\"
      new Table(56, 37, 582, new short[] {-1, 582, 582, 582, 582, 582, 
          582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 
          207, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 588}),
/* NxS[ 588] */ // Shortest string ")\"s\\\n"
      new Table(35, 65, 582, new short[] {208, 208, 208, 582, 582, 582, 
          582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, -1, 
          582, 582, 582, 582, 582, 582, 582, 582, 582, 208, 582, 208, 208, 208, 582, 208, 
          208, 582, 208, 208, 208, 207, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 
          582, 208, 587, 582, 208, 208, 208, 208, 208, 208, 208}),
/* NxS[ 589] */ // Shortest string ""
      new Table(78, 15, -1, new short[] {211, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 590, 210}),
/* NxS[ 590] */ // Shortest string "\\"
      new Table(3, 1, 214, new short[] {215}),
/* NxS[ 591] */ // Shortest string "\"_"
      new Table(66, 61, -1, new short[] {213, -1, 213, 213, 213, -1, 
          213, 213, -1, 213, 213, 213, -1, 213, 213, 213, 213, 213, 213, 213, 213, 213, 
          213, -1, 213, 592, -1, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 
          213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 
          -1, -1, -1, -1, 213, 213, 213}),
/* NxS[ 592] */ // Shortest string "\"s\\"
      new Table(3, 1, -1, new short[] {591}),
/* NxS[ 593] */ // Shortest string "\"_s\\"
      new Table(3, 1, -1, new short[] {594}),
/* NxS[ 594] */ // Shortest string "\"_s\\\n"
      new Table(33, 60, 213, new short[] {-1, -1, 213, 213, 213, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 213, -1, 213, 213, 213, 213, 213, 
          213, 213, 213, 213, 213, 213, 213, -1, 213, 213, 213, 213, 213, 213, 213, 213, 
          213, 213, -1, 213, 593, -1}),
/* NxS[ 595] */ // Shortest string ""
      new Table(66, 61, -1, new short[] {212, -1, 212, 212, 212, -1, 
          212, 212, -1, 212, 212, 212, -1, 212, 212, 212, 212, 212, 212, 212, 212, 212, 
          212, -1, 212, 592, -1, 212, 212, 212, 212, 212, 212, 212, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 212, 212, 212}),
    };

int NextState() {
    if (code == ScanBuff.EndOfFile)
        return eofNum;
    else
        unchecked {
            int rslt;
            int idx = Map(code) - NxS[state].min;
            if (idx < 0) idx += 89;
            if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
            else rslt = NxS[state].nxt[idx];
            return rslt;
        }
}

#endregion


#if BACKUP
        // ==============================================================
        // == Nested struct used for backup in automata that do backup ==
        // ==============================================================

        struct Context // class used for automaton backup.
        {
            public int bPos;
            public int rPos; // scanner.readPos saved value
            public int cCol;
            public int lNum; // Need this in case of backup over EOL.
            public int state;
            public int cChr;
        }
        
        private Context ctx = new Context();
#endif // BACKUP

        // ==============================================================
        // ==== Nested struct to support input switching in scanners ====
        // ==============================================================

		struct BufferContext {
            internal ScanBuff buffSv;
			internal int chrSv;
			internal int cColSv;
			internal int lNumSv;
		}

        // ==============================================================
        // ===== Private methods to save and restore buffer contexts ====
        // ==============================================================

        /// <summary>
        /// This method creates a buffer context record from
        /// the current buffer object, together with some
        /// scanner state values. 
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        BufferContext MkBuffCtx()
		{
			BufferContext rslt;
			rslt.buffSv = this.buffer;
			rslt.chrSv = this.code;
			rslt.cColSv = this.cCol;
			rslt.lNumSv = this.lNum;
			return rslt;
		}

        /// <summary>
        /// This method restores the buffer value and allied
        /// scanner state from the given context record value.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void RestoreBuffCtx(BufferContext value)
		{
			this.buffer = value.buffSv;
			this.code = value.chrSv;
			this.cCol = value.cColSv;
			this.lNum = value.lNumSv;
        } 
        // =================== End Nested classes =======================

#if !NOFILES
     internal C_CPLUSPLUS_CSHARPScanner(Stream file) {
            SetSource(file, 0); // unicode option
        }

        public C_CPLUSPLUS_CSHARPScanner(Stream file, string codepage) {
            SetSource(file, CodePageHandling.GetCodePage(codepage));
        }   
#endif // !NOFILES

     internal C_CPLUSPLUS_CSHARPScanner() { }

        private int readPos;

        void GetCode()
        {
            if (code == '\n')  // This needs to be fixed for other conventions
                               // i.e. [\r\n\205\u2028\u2029]
            { 
                cCol = -1;
                lNum++;
            }
            readPos = buffer.Pos;

            // Now read new codepoint.
            code = buffer.Read();
            if (code > ScanBuff.EndOfFile)
            {
#if (!BYTEMODE)
                if (code >= 0xD800 && code <= 0xDBFF)
                {
                    int next = buffer.Read();
                    if (next < 0xDC00 || next > 0xDFFF)
                        code = ScanBuff.UnicodeReplacementChar;
                    else
                        code = (0x10000 + ((code & 0x3FF) << 10) + (next & 0x3FF));
                }
#endif
                cCol++;
            }
        }

        void MarkToken()
        {
#if (!PERSIST)
            buffer.Mark();
#endif
            tokPos = readPos;
            tokLin = lNum;
            tokCol = cCol;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokEPos = readPos;
            tokELin = lNum;
            tokECol = cCol;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int Peek()
        {
            int rslt, codeSv = code, cColSv = cCol, lNumSv = lNum, bPosSv = buffer.Pos;
            GetCode(); rslt = code;
            lNum = lNumSv; cCol = cColSv; code = codeSv; buffer.Pos = bPosSv;
            return rslt;
        }

        // ==============================================================
        // =====    Initialization of string-based input buffers     ====
        // ==============================================================

        /// <summary>
        /// Create and initialize a StringBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the input string</param>
        /// <param name="offset">starting offset in the string</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(string source, int offset)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.buffer.Pos = offset;
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

        // ================ LineBuffer Initialization ===================
        /// <summary>
        /// Create and initialize a LineBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the list of input strings</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(IList<string> source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            this.lNum = 0;
            GetCode();
        }

#if !NOFILES        
        // =============== StreamBuffer Initialization ==================

        /// <summary>
        /// Create and initialize a StreamBuff buffer object for this scanner.
        /// StreamBuff is buffer for 8-bit byte files.
        /// </summary>
        /// <param name="source">the input byte stream</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
        
#if !BYTEMODE
        // ================ TextBuffer Initialization ===================

        /// <summary>
        /// Create and initialize a TextBuff buffer object for this scanner.
        /// TextBuff is a buffer for encoded unicode files.
        /// </summary>
        /// <param name="source">the input text file</param>
        /// <param name="fallbackCodePage">Code page to use if file has
        /// no BOM. For 0, use machine default; for -1, 8-bit binary</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source, int fallbackCodePage)
        {
            this.buffer = ScanBuff.GetBuffer(source, fallbackCodePage);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
#endif // !BYTEMODE
#endif // !NOFILES
        
        // ==============================================================

#if BABEL
        //
        //  Get the next token for Visual Studio
        //
        //  "state" is the inout mode variable that maintains scanner
        //  state between calls, using the EolState property. In principle,
        //  if the calls of EolState are costly set could be called once
        //  only per line, at the start; and get called only at the end
        //  of the line. This needs more infrastructure ...
        //
        public int GetNext(ref int state, out int start, out int end)
        {
                Token next;
            int s, e;
            s = state;        // state at start
            EolState = state;
                next = (Token)Scan();
            state = EolState;
            e = state;       // state at end;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }        
#endif // BABEL

        // ======== AbstractScanner<> Implementation =========

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseToken is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yypos { get { return tokPos; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yyline { get { return tokLin; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yycol { get { return tokCol; } }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yytext")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yytext")]
        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        /// <summary>
        /// Discards all but the first "n" codepoints in the recognized pattern.
        /// Resets the buffer position so that only n codepoints have been consumed;
        /// yytext is also re-evaluated. 
        /// </summary>
        /// <param name="n">The number of codepoints to consume</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void yyless(int n)
        {
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cCol = tokCol - 1; 
            GetCode();
            // Now ensure that line counting is correct.
            lNum = tokLin;
            // And count the rest of the text.
            for (int i = 0; i < n; i++) GetCode();
            MarkEnd();
        }
       
        //
        //  It would be nice to count backward in the text
        //  but it does not seem possible to re-establish
        //  the correct column counts except by going forward.
        //
        /// <summary>
        /// Removes the last "n" code points from the pattern.
        /// </summary>
        /// <param name="n">The number to remove</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void _yytrunc(int n) { yyless(yyleng - n); }
        
        //
        // This is painful, but we no longer count
        // codepoints.  For the overwhelming majority 
        // of cases the single line code is fast, for
        // the others, well, at least it is all in the
        // buffer so no files are touched. Note that we
        // can't use (tokEPos - tokPos) because of the
        // possibility of surrogate pairs in the token.
        //
        /// <summary>
        /// The length of the pattern in codepoints (not the same as 
        /// string-length if the pattern contains any surrogate pairs).
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yyleng")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yyleng")]
        public int yyleng
        {
            get {
                if (tokELin == tokLin)
                    return tokECol - tokCol;
                else
#if BYTEMODE
                    return tokEPos - tokPos;
#else
                {
                    int ch;
                    int count = 0;
                    int save = buffer.Pos;
                    buffer.Pos = tokPos;
                    do {
                        ch = buffer.Read();
                        if (!char.IsHighSurrogate((char)ch)) count++;
                    } while (buffer.Pos < tokEPos && ch != ScanBuff.EndOfFile);
                    buffer.Pos = save;
                    return count;
                }
#endif // BYTEMODE
            }
        }
        
        // ============ methods available in actions ==============

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int YY_START {
            get { return currentScOrd; }
            set { currentScOrd = value; 
                  currentStart = startState[value]; 
            } 
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void BEGIN(int next) {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        int Scan() {
                for (; ; ) {
                    int next;              // next state to enter
#if LEFTANCHORS
                    for (;;) {
                        // Discard characters that do not start any pattern.
                        // Must check the left anchor condition after *every* GetCode!
                        state = ((cCol == 0) ? anchorState[currentScOrd] : currentStart);
                        if ((next = NextState()) != goStart) break; // LOOP EXIT HERE...
                        GetCode();
                    }
                    
#else // !LEFTANCHORS
                    state = currentStart;
                    while ((next = NextState()) == goStart) {
                        // At this point, the current character has no
                        // transition from the current state.  We discard 
                        // the "no-match" char.   In traditional LEX such 
                        // characters are echoed to the console.
                        GetCode();
                    }
#endif // LEFTANCHORS                    
                    // At last, a valid transition ...    
                    MarkToken();
                    state = next;
                    GetCode();                    
#if BACKUP
                    bool contextSaved = false;
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                        if (state <= maxAccept && next > maxAccept) { // need to prepare backup data
                            // Store data for the *latest* accept state that was found.
                            SaveStateAndPos( ref ctx );
                            contextSaved = true;
                        }
                        state = next;
                        GetCode();
                    }
                    if (state > maxAccept && contextSaved)
                        RestoreStateAndPos( ref ctx );
#else  // BACKUP
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                         state = next;
                         GetCode();
                    }
#endif // BACKUP
                    if (state <= maxAccept) {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162, 1522
    switch (state)
    {
        case eofNum:
            switch (currentStart) {
                case 216:
return (int)Token.EOF;
                    break;
                case 569:
throw new InvalidDataException("unterminated /*");
                    break;
                case 579:
throw new InvalidDataException("Unterminated Raw string prefix.");
                    break;
                case 581:
throw new InvalidDataException("Unterminated raw string.");
                    break;
                case 589:
throw new InvalidDataException("Unterminated raw string.");
                    break;
            }
            if (yywrap())
                return (int)Token.EOF;
            break;
        case 1: // Recognized '{Identifier}',	Shortest string "s"
        case 3: // Recognized '{Identifier}',	Shortest string "i"
        case 4: // Recognized '{Identifier}',	Shortest string "o"
        case 5: // Recognized '{Identifier}',	Shortest string "d"
        case 6: // Recognized '{Identifier}',	Shortest string "n"
        case 37: // Recognized '{Identifier}',	Shortest string "u"
        case 38: // Recognized '{Identifier}',	Shortest string "U"
        case 39: // Recognized '{Identifier}',	Shortest string "R"
        case 41: // Recognized '{Identifier}',	Shortest string "c"
        case 42: // Recognized '{Identifier}',	Shortest string "b"
        case 43: // Recognized '{Identifier}',	Shortest string "a"
        case 44: // Recognized '{Identifier}',	Shortest string "x"
        case 45: // Recognized '{Identifier}',	Shortest string "xo"
        case 48: // Recognized '{Identifier}',	Shortest string "xor"
        case 49: // Recognized '{Identifier}',	Shortest string "xor_"
        case 50: // Recognized '{Identifier}',	Shortest string "xor_e"
        case 51: // Recognized '{Identifier}',	Shortest string "an"
        case 54: // Recognized '{Identifier}',	Shortest string "and"
        case 55: // Recognized '{Identifier}',	Shortest string "and_"
        case 56: // Recognized '{Identifier}',	Shortest string "and_e"
        case 57: // Recognized '{Identifier}',	Shortest string "bi"
        case 60: // Recognized '{Identifier}',	Shortest string "bit"
        case 61: // Recognized '{Identifier}',	Shortest string "bito"
        case 62: // Recognized '{Identifier}',	Shortest string "bita"
        case 63: // Recognized '{Identifier}',	Shortest string "bitan"
        case 64: // Recognized '{Identifier}',	Shortest string "co"
        case 66: // Recognized '{Identifier}',	Shortest string "com"
        case 67: // Recognized '{Identifier}',	Shortest string "comp"
        case 166: // Recognized '{Identifier}',	Shortest string "no"
        case 169: // Recognized '{Identifier}',	Shortest string "not"
        case 170: // Recognized '{Identifier}',	Shortest string "not_"
        case 171: // Recognized '{Identifier}',	Shortest string "not_e"
        case 172: // Recognized '{Identifier}',	Shortest string "de"
        case 173: // Recognized '{Identifier}',	Shortest string "def"
        case 174: // Recognized '{Identifier}',	Shortest string "defi"
        case 175: // Recognized '{Identifier}',	Shortest string "defin"
        case 176: // Recognized '{Identifier}',	Shortest string "define"
        case 178: // Recognized '{Identifier}',	Shortest string "or"
        case 179: // Recognized '{Identifier}',	Shortest string "or_"
        case 181: // Recognized '{Identifier}',	Shortest string "or_e"
        case 187: // Recognized '{Identifier}',	Shortest string "si"
        case 188: // Recognized '{Identifier}',	Shortest string "siz"
        case 189: // Recognized '{Identifier}',	Shortest string "size"
        case 190: // Recognized '{Identifier}',	Shortest string "sizeo"
Console.WriteLine("token: {0}", yytext); GetIdentifier(); return (int)Token.IDENTIFIER;
            break;
        case 2: // Recognized '\n',	Shortest string "\n"
Console.WriteLine("token: {0}", yytext); return (int)Token.NEWLINE;
            break;
        case 7: // Recognized '{octLit}((\\\n)*{numberSuffix})?',	Shortest string "0"
        case 126: // Recognized '{octLit}((\\\n)*{numberSuffix})?',	Shortest string "0s"
        case 127: // Recognized '{octLit}((\\\n)*{numberSuffix})?',	Shortest string "0e"
        case 128: // Recognized '{octLit}((\\\n)*{numberSuffix})?',	Shortest string "00"
        case 129: // Recognized '{octLit}((\\\n)*{numberSuffix})?',	Shortest string "0X"
        case 130: // Recognized '{octLit}((\\\n)*{numberSuffix})?',	Shortest string "0B"
        case 134: // Recognized '{octLit}((\\\n)*{numberSuffix})?',	Shortest string "0Xe"
        case 161: // Recognized '{octLit}((\\\n)*{numberSuffix})?',	Shortest string "0Xee"
        case 162: // Recognized '{octLit}((\\\n)*{numberSuffix})?',	Shortest string "0XeP"
        case 165: // Recognized '{octLit}((\\\n)*{numberSuffix})?',	Shortest string "0_s"
Console.WriteLine("token: {0}", yytext); GetNumber(); return (int)Token.NUMBER;
            break;
        case 8: // Recognized '{Whitespace}+',	Shortest string "\t"
Console.WriteLine("token: {0}", yytext);
            break;
        case 9: // Recognized '[<]',	Shortest string "<"
Console.WriteLine("token: {0}", yytext); return (int)Token.LESS_THEN;
            break;
        case 10: // Recognized '[>]',	Shortest string ">"
Console.WriteLine("token: {0}", yytext); return (int)Token.GREATER_THEN;
            break;
        case 11: // Recognized ':',	Shortest string ":"
Console.WriteLine("token: {0}", yytext); return (int)Token.COLON;
            break;
        case 12: // Recognized '\.',	Shortest string "."
Console.WriteLine("token: {0}", yytext); return (int)Token.PERIOD;
            break;
        case 13: // Recognized '\*',	Shortest string "*"
Console.WriteLine("token: {0}", yytext); return (int)Token.ASTERISK;
            break;
        case 14: // Recognized '-',	Shortest string "-"
Console.WriteLine("token: {0}", yytext); return (int)Token.MINUS_SIGN;
            break;
        case 15: // Recognized '=',	Shortest string "="
Console.WriteLine("token: {0}", yytext); return (int)Token.EQUAL_SIGN;
            break;
        case 16: // Recognized '\+',	Shortest string "+"
Console.WriteLine("token: {0}", yytext); return (int)Token.PLUS_SIGN;
            break;
        case 17: // Recognized '\|',	Shortest string "|"
Console.WriteLine("token: {0}", yytext); return (int)Token.PIPE;
            break;
        case 18: // Recognized '\?',	Shortest string "?"
Console.WriteLine("token: {0}", yytext); return (int)Token.QUESTION_MARK;
            break;
        case 19: // Recognized '\[',	Shortest string "["
Console.WriteLine("token: {0}", yytext); return (int)Token.L_SQ_BRACKET;
            break;
        case 20: // Recognized '!',	Shortest string "!"
Console.WriteLine("token: {0}", yytext); return (int)Token.EXCLAIMATION_MARK;
            break;
        case 21: // Recognized '&',	Shortest string "&"
Console.WriteLine("token: {0}", yytext); return (int)Token.AMPERSTAND;
            break;
        case 22: // Recognized '\/',	Shortest string "/"
Console.WriteLine("token: {0}", yytext); return (int)Token.FORWARD_SLASH;
            break;
        case 23: // Recognized '\^',	Shortest string "^"
Console.WriteLine("token: {0}", yytext); return (int)Token.CARROT;
            break;
        case 24: // Recognized '%',	Shortest string "%"
Console.WriteLine("token: {0}", yytext); return (int)Token.PERCENT;
            break;
        case 25: // Recognized '#',	Shortest string "#"
Console.WriteLine("token: {0}", yytext); return (int)Token.HASH;
            break;
        case 26: // Recognized '\]',	Shortest string "]"
Console.WriteLine("token: {0}", yytext); return (int)Token.R_SQ_BRACKET;
            break;
        case 27: // Recognized '\(',	Shortest string "("
Console.WriteLine("token: {0}", yytext); return (int)Token.L_PAREN;
            break;
        case 28: // Recognized '\)',	Shortest string ")"
Console.WriteLine("token: {0}", yytext); return (int)Token.R_PAREN;
            break;
        case 29: // Recognized '\{',	Shortest string "{"
Console.WriteLine("token: {0}", yytext); return (int)Token.L_CURLY_BRACE;
            break;
        case 30: // Recognized '\}',	Shortest string "}"
Console.WriteLine("token: {0}", yytext); return (int)Token.R_CURLY_BRACE;
            break;
        case 31: // Recognized '~',	Shortest string "~"
Console.WriteLine("token: {0}", yytext); return (int)Token.TILDE;
            break;
        case 32: // Recognized ',',	Shortest string ","
Console.WriteLine("token: {0}", yytext); return (int)Token.COMMA;
            break;
        case 33: // Recognized ';',	Shortest string ";"
Console.WriteLine("token: {0}", yytext); return (int)Token.SEMI_COLON;
            break;
        case 34: // Recognized '@',	Shortest string "@"
Console.WriteLine("token: {0}", yytext); return (int)Token.AT;
            break;
        case 35: // Recognized '`',	Shortest string "`"
Console.WriteLine("token: {0}", yytext); return (int)Token.GRAVE;
            break;
        case 36: // Recognized '{decimalLit}((\\\n)*{numberSuffix})?',	Shortest string "9"
        case 69: // Recognized '{decimalLit}((\\\n)*{numberSuffix})?',	Shortest string "9s"
        case 70: // Recognized '{decimalLit}((\\\n)*{numberSuffix})?',	Shortest string "9e"
        case 81: // Recognized '{decimalLit}((\\\n)*{numberSuffix})?',	Shortest string "9_s"
Console.WriteLine("token: {0}", yytext); GetNumber(); return (int)Token.NUMBER;
            break;
        case 40: // Recognized '({stringPrefix}(\\\n)*)?["]',	Shortest string "\""
curTokVal.Clear(); curTokVal.Append(yytext.Replace("\\n", "")); BEGIN(RAW_STRING_PREFIX);
            break;
        case 46: // Recognized 'x(?:\\\n)*o(?:\\\n)*r',	Shortest string "xo?:\\\nr"
if(!handleDigraphs) { Console.WriteLine("token: {0}", yytext); GetIdentifier(); return (int)Token.IDENTIFIER; } else { return (int)Token.CARROT; }
            break;
        case 47: // Recognized 'x(?:\\\n)*o(?:\\\n)*r(?:\\\n)*_(?:\\\n)*e(?:\\\n)*q',	Shortest string "xo?:\\\nr_eq"
if(!handleDigraphs) { Console.WriteLine("token: {0}", yytext); GetIdentifier(); return (int)Token.IDENTIFIER; } else { return (int)Token.CARROT_EQUALS; }
            break;
        case 52: // Recognized 'a(?:\\\n)*n(?:\\\n)*d',	Shortest string "an?:\\\nd"
if(!handleDigraphs) { Console.WriteLine("token: {0}", yytext); GetIdentifier(); return (int)Token.IDENTIFIER; } else { return (int)Token.AMPERSTAND_AMPERSTAND; }
            break;
        case 53: // Recognized 'a(?:\\\n)*n(?:\\\n)*d(?:\\\n)*_(?:\\\n)*e(?:\\\n)*q',	Shortest string "and_e?:\\\nq"
if(!handleDigraphs) { Console.WriteLine("token: {0}", yytext); GetIdentifier(); return (int)Token.IDENTIFIER; } else { return (int)Token.AMPERSTAND_EQUALS; }
            break;
        case 58: // Recognized 'b(?:\\\n)*i(?:\\\n)*t(?:\\\n)*a(?:\\\n)*n(?:\\\n)*d',	Shortest string "bi?:\\\ntand"
if(!handleDigraphs) { Console.WriteLine("token: {0}", yytext); GetIdentifier(); return (int)Token.IDENTIFIER; } else { return (int)Token.AMPERSTAND; }
            break;
        case 59: // Recognized 'b(?:\\\n)*i(?:\\\n)*t(?:\\\n)*o(?:\\\n)*r',	Shortest string "bi?:\\\ntor"
if(!handleDigraphs) { Console.WriteLine("token: {0}", yytext); GetIdentifier(); return (int)Token.IDENTIFIER; } else { return (int)Token.PIPE; }
            break;
        case 65: // Recognized 'c(?:\\\n)*o(?:\\\n)*m(?:\\\n)*p(?:\\\n)*l',	Shortest string "co?:\\\nmpl"
if(!handleDigraphs) { Console.WriteLine("token: {0}", yytext); GetIdentifier(); return (int)Token.IDENTIFIER; } else { return (int)Token.TILDE; }
            break;
        case 68: // Recognized '({stringPrefix}(\\\n)*)?R(\\\n)*["]',	Shortest string "R\""
curTokVal.Clear(); curTokVal.Append(yytext.Replace("\\n", ""));
            break;
        case 71: // Recognized '{mandDigSepSeq}(\\\n)*\.((\\\n)*{floatExp})?((\\\n)*{floatSufix})?',	Shortest string "0."
        case 72: // Recognized '{mandDigSepSeq}(\\\n)*\.((\\\n)*{floatExp})?((\\\n)*{floatSufix})?',	Shortest string "0.s"
        case 73: // Recognized '{mandDigSepSeq}(\\\n)*\.((\\\n)*{floatExp})?((\\\n)*{floatSufix})?',	Shortest string "0.e"
        case 79: // Recognized '{mandDigSepSeq}(\\\n)*\.((\\\n)*{floatExp})?((\\\n)*{floatSufix})?',	Shortest string "0._s"
        case 80: // Recognized '{mandDigSepSeq}(\\\n)*\.((\\\n)*{floatExp})?((\\\n)*{floatSufix})?',	Shortest string "0.e0"
Console.WriteLine("token: {0}", yytext); GetNumber(); return (int)Token.NUMBER;
            break;
        case 74: // Recognized '({mandDigSepSeq}(\\\n)*)?\.(\\\n)*{mandDigSepSeq}((\\\n)*{floatExp})?((\\\n)*{floatSufix})?',	Shortest string ".0"
        case 75: // Recognized '({mandDigSepSeq}(\\\n)*)?\.(\\\n)*{mandDigSepSeq}((\\\n)*{floatExp})?((\\\n)*{floatSufix})?',	Shortest string ".0s"
        case 76: // Recognized '({mandDigSepSeq}(\\\n)*)?\.(\\\n)*{mandDigSepSeq}((\\\n)*{floatExp})?((\\\n)*{floatSufix})?',	Shortest string ".0e"
        case 77: // Recognized '({mandDigSepSeq}(\\\n)*)?\.(\\\n)*{mandDigSepSeq}((\\\n)*{floatExp})?((\\\n)*{floatSufix})?',	Shortest string ".0_s"
        case 78: // Recognized '({mandDigSepSeq}(\\\n)*)?\.(\\\n)*{mandDigSepSeq}((\\\n)*{floatExp})?((\\\n)*{floatSufix})?',	Shortest string ".0e0"
Console.WriteLine("token: {0}", yytext); GetNumber(); return (int)Token.NUMBER;
            break;
        case 82: // Recognized '{mandDigSepSeq}(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0e0"
        case 83: // Recognized '{mandDigSepSeq}(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0e0s"
        case 84: // Recognized '{mandDigSepSeq}(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0e0_s"
Console.WriteLine("token: {0}", yytext); GetNumber(); return (int)Token.NUMBER;
            break;
        case 85: // Recognized '#(\\\n)*#',	Shortest string "##"
Console.WriteLine("token: {0}", yytext); return (int)Token.HASH_HASH;
            break;
        case 86: // Recognized '#%(?:\\\n)*:',	Shortest string "#%:"
if(!handleDigraphs) { yyless(1); return (int)Token.HASH; } else { return (int)Token.HASH_HASH; }
            break;
        case 87: // Recognized '%(?:\\\n)*[>]',	Shortest string "%>"
if(!handleDigraphs) { yyless(1); return (int)Token.PERCENT; } else { return (int)Token.R_CURLY_BRACE; }
            break;
        case 88: // Recognized '%(?:\\\n)*:',	Shortest string "%:"
if(!handleDigraphs) { yyless(1); return (int)Token.PERCENT; } else { return (int)Token.HASH; }
            break;
        case 89: // Recognized '%(\\\n)*=',	Shortest string "%="
Console.WriteLine("token: {0}", yytext); return (int)Token.PERCENT_EQUALS;
            break;
        case 90: // Recognized '%(?:\\\n)*:#',	Shortest string "%:#"
if(!handleDigraphs) { yyless(1); return (int)Token.PERCENT; } else { return (int)Token.HASH_HASH; }
            break;
        case 91: // Recognized '%(?:\\\n)*:(?:\\\n)*%(?:\\\n)*:',	Shortest string "%:%:"
if(!handleDigraphs) { yyless(1); return (int)Token.PERCENT; } else { return (int)Token.HASH_HASH; }
            break;
        case 92: // Recognized '\^(\\\n)*=',	Shortest string "^="
Console.WriteLine("token: {0}", yytext); return (int)Token.CARROT_EQUALS;
            break;
        case 93: // Recognized '\/(\\\n)*\*',	Shortest string "/*"
Console.WriteLine("BEGIN C_COMMENT: token: {0}", yytext); BEGIN(C_COMMENT); curTokVal.Clear(); curTokVal.Append("/*");
            break;
        case 94: // Recognized '\/(\\\n)*=',	Shortest string "/="
Console.WriteLine("token: {0}", yytext); return (int)Token.FORWARD_SLASH_EQUALS;
            break;
        case 95: // Recognized '\/(\\\n)*\/',	Shortest string "//"
Console.WriteLine("BEGIN CPP_COMMENT: token: {0}", yytext); BEGIN(CPP_COMMENT); curTokVal.Clear(); curTokVal.Append("//");
            break;
        case 96: // Recognized '&(\\\n)*=',	Shortest string "&="
Console.WriteLine("token: {0}", yytext); return (int)Token.AMPERSTAND_EQUALS;
            break;
        case 97: // Recognized '&(\\\n)*&',	Shortest string "&&"
Console.WriteLine("token: {0}", yytext); return (int)Token.AMPERSTAND_AMPERSTAND;
            break;
        case 98: // Recognized '!(\\\n)*=',	Shortest string "!="
Console.WriteLine("token: {0}", yytext); return (int)Token.NOT_EQUALS;
            break;
        case 99: // Recognized '\?(\\\n)*\.',	Shortest string "?."
Console.WriteLine("token: {0}", yytext); return (int)Token.QUESTION_MARK_PERIOD;
            break;
        case 100: // Recognized '\?(\\\n)*\?',	Shortest string "??"
Console.WriteLine("token: {0}", yytext); return (int)Token.QUESTION_MARK_QUESTION_MARK;
            break;
        case 101: // Recognized '\?(\\\n)*\[',	Shortest string "?["
Console.WriteLine("token: {0}", yytext); return (int)Token.QUESTION_MARK_L_SQ_BRACKET;
            break;
        case 102: // Recognized '\|(\\\n)*=',	Shortest string "|="
Console.WriteLine("token: {0}", yytext); return (int)Token.PIPE_EQUALS;
            break;
        case 103: // Recognized '\|(\\\n)*\|',	Shortest string "||"
Console.WriteLine("token: {0}", yytext); return (int)Token.PIPE_PIPE;
            break;
        case 104: // Recognized '\+(\\\n)*=',	Shortest string "+="
Console.WriteLine("token: {0}", yytext); return (int)Token.PLUS_EQUALS;
            break;
        case 105: // Recognized '\+(\\\n)*\+',	Shortest string "++"
Console.WriteLine("token: {0}", yytext); return (int)Token.PLUS_PLUS;
            break;
        case 106: // Recognized '=(\\\n)*>',	Shortest string "=>"
Console.WriteLine("token: {0}", yytext); return (int)Token.EQUALS_SIGN_GREATER_THEN;
            break;
        case 107: // Recognized '=(\\\n)*=',	Shortest string "=="
Console.WriteLine("token: {0}", yytext); return (int)Token.EQUALS_EQUALS;
            break;
        case 108: // Recognized '-(\\\n)*>',	Shortest string "->"
Console.WriteLine("token: {0}", yytext); return (int)Token.THIN_ARROW;
            break;
        case 109: // Recognized '-(\\\n)*-',	Shortest string "--"
Console.WriteLine("token: {0}", yytext); return (int)Token.MINUS_MINUS;
            break;
        case 110: // Recognized '-(\\\n)*=',	Shortest string "-="
Console.WriteLine("token: {0}", yytext); return (int)Token.MINUS_EQUALS;
            break;
        case 111: // Recognized '-(\\\n)*>(\\\n)*\*',	Shortest string "->*"
Console.WriteLine("token: {0}", yytext); return (int)Token.THIN_ARROW_STAR;
            break;
        case 112: // Recognized '\*(\\\n)*=',	Shortest string "*="
Console.WriteLine("token: {0}", yytext); return (int)Token.ASTERISK_EQUALS;
            break;
        case 113: // Recognized '\.(\\\n)*\*',	Shortest string ".*"
Console.WriteLine("token: {0}", yytext); return (int)Token.DOT_STAR;
            break;
        case 114: // Recognized '\.(\\\n)*\.(\\\n)*\.',	Shortest string "..."
Console.WriteLine("token: {0}", yytext); return (int)Token.ELLIPSE;
            break;
        case 115: // Recognized ':(?:\\\n)*[>]',	Shortest string ":>"
if(!handleDigraphs) { yyless(1); return (int)Token.COLON; } else { return (int)Token.R_SQ_BRACKET; }
            break;
        case 116: // Recognized ':(\\\n)*:',	Shortest string "::"
Console.WriteLine("token: {0}", yytext); return (int)Token.COLON_COLON;
            break;
        case 117: // Recognized '[>](\\\n)*[>]',	Shortest string ">>"
Console.WriteLine("token: {0}", yytext); return (int)Token.GREATER_THEN_GRATER_THEN;
            break;
        case 118: // Recognized '[>](\\\n)*=',	Shortest string ">="
Console.WriteLine("token: {0}", yytext); return (int)Token.GREATER_THEN_OR_EQUAL_TO;
            break;
        case 119: // Recognized '[>](\\\n)*[>](\\\n)*=',	Shortest string ">>="
Console.WriteLine("token: {0}", yytext); return (int)Token.GREATER_THEN_GREATER_THEN_EQUALS;
            break;
        case 120: // Recognized '[<](\\\n)*[<]',	Shortest string "<<"
Console.WriteLine("token: {0}", yytext); return (int)Token.LESS_THEN_LESS_THEN;
            break;
        case 121: // Recognized '[<](?:\\\n)*:',	Shortest string "<:"
if(!handleDigraphs) { yyless(1); return (int)Token.LESS_THEN; } else { return (int)Token.L_SQ_BRACKET; }
            break;
        case 122: // Recognized '[<](\\\n)*=',	Shortest string "<="
Console.WriteLine("token: {0}", yytext); return (int)Token.LESS_THEN_OR_EQUAL_TO;
            break;
        case 123: // Recognized '[<](?:\\\n)*%',	Shortest string "<%"
if(!handleDigraphs) { yyless(1); return (int)Token.LESS_THEN; } else { return (int)Token.L_CURLY_BRACE; }
            break;
        case 124: // Recognized '[<](\\\n)*=(\\\n)*[>]',	Shortest string "<=>"
Console.WriteLine("token: {0}", yytext); return (int)Token.SAUCER;
            break;
        case 125: // Recognized '[<](\\\n)*[<](\\\n)*=',	Shortest string "<<="
Console.WriteLine("token: {0}", yytext); return (int)Token.LESS_THEN_LESS_THEN_EQUALS;
            break;
        case 131: // Recognized '{binLit}((\\\n)*{numberSuffix})?',	Shortest string "0B0"
        case 132: // Recognized '{binLit}((\\\n)*{numberSuffix})?',	Shortest string "0B0s"
        case 133: // Recognized '{binLit}((\\\n)*{numberSuffix})?',	Shortest string "0B0_s"
Console.WriteLine("token: {0}", yytext); GetNumber(); return (int)Token.NUMBER;
            break;
        case 135: // Recognized '{hexLit}((\\\n)*{hexNumberSuffix})?',	Shortest string "0X0"
        case 143: // Recognized '{hexLit}((\\\n)*{hexNumberSuffix})?',	Shortest string "0X0s"
        case 144: // Recognized '{hexLit}((\\\n)*{hexNumberSuffix})?',	Shortest string "0X0e"
        case 145: // Recognized '{hexLit}((\\\n)*{hexNumberSuffix})?',	Shortest string "0X0P"
        case 156: // Recognized '{hexLit}((\\\n)*{hexNumberSuffix})?',	Shortest string "0Xe_s"
        case 157: // Recognized '{hexLit}((\\\n)*{hexNumberSuffix})?',	Shortest string "0Xee0"
        case 158: // Recognized '{hexLit}((\\\n)*{hexNumberSuffix})?',	Shortest string "0Xee0s"
        case 159: // Recognized '{hexLit}((\\\n)*{hexNumberSuffix})?',	Shortest string "0Xee0e"
        case 160: // Recognized '{hexLit}((\\\n)*{hexNumberSuffix})?',	Shortest string "0Xee0P"
        case 163: // Recognized '{hexLit}((\\\n)*{hexNumberSuffix})?',	Shortest string "0Xee\\\n"
        case 164: // Recognized '{hexLit}((\\\n)*{hexNumberSuffix})?',	Shortest string "0Xe\\\n"
Console.WriteLine("token: {0}", yytext); GetNumber(); return (int)Token.NUMBER;
            break;
        case 136: // Recognized '0(\\\n)*[xX](\\\n)*({mandHexSeq}(\\\n)*)?\.(\\\n)*{mandHexSeq}(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0X.eP0"
        case 137: // Recognized '0(\\\n)*[xX](\\\n)*({mandHexSeq}(\\\n)*)?\.(\\\n)*{mandHexSeq}(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0X.ee0s"
        case 138: // Recognized '0(\\\n)*[xX](\\\n)*({mandHexSeq}(\\\n)*)?\.(\\\n)*{mandHexSeq}(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0X.ee0_s"
        case 139: // Recognized '0(\\\n)*[xX](\\\n)*({mandHexSeq}(\\\n)*)?\.(\\\n)*{mandHexSeq}(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0X.ee0"
        case 140: // Recognized '0(\\\n)*[xX](\\\n)*({mandHexSeq}(\\\n)*)?\.(\\\n)*{mandHexSeq}(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0X.ee0e"
        case 141: // Recognized '0(\\\n)*[xX](\\\n)*({mandHexSeq}(\\\n)*)?\.(\\\n)*{mandHexSeq}(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0X.ee0f"
        case 142: // Recognized '0(\\\n)*[xX](\\\n)*({mandHexSeq}(\\\n)*)?\.(\\\n)*{mandHexSeq}(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0X.ee0P"
Console.WriteLine("token: {0}", yytext); GetNumber(); return (int)Token.NUMBER;
            break;
        case 146: // Recognized '0(\\\n)*[xX](\\\n)*{mandHexSeq}(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0XeP0"
        case 147: // Recognized '0(\\\n)*[xX](\\\n)*{mandHexSeq}(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0XeP0s"
        case 148: // Recognized '0(\\\n)*[xX](\\\n)*{mandHexSeq}(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0XeP0_s"
Console.WriteLine("token: {0}", yytext); GetNumber(); return (int)Token.NUMBER;
            break;
        case 149: // Recognized '0(\\\n)*[xX](\\\n)*{mandHexSeq}(\\\n)*\.(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0Xe.P0"
        case 150: // Recognized '0(\\\n)*[xX](\\\n)*{mandHexSeq}(\\\n)*\.(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0Xe.e0s"
        case 151: // Recognized '0(\\\n)*[xX](\\\n)*{mandHexSeq}(\\\n)*\.(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0Xe.e0_s"
        case 152: // Recognized '0(\\\n)*[xX](\\\n)*{mandHexSeq}(\\\n)*\.(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0Xe.e0"
        case 153: // Recognized '0(\\\n)*[xX](\\\n)*{mandHexSeq}(\\\n)*\.(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0Xe.e0e"
        case 154: // Recognized '0(\\\n)*[xX](\\\n)*{mandHexSeq}(\\\n)*\.(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0Xe.e0f"
        case 155: // Recognized '0(\\\n)*[xX](\\\n)*{mandHexSeq}(\\\n)*\.(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0Xe.e0P"
Console.WriteLine("token: {0}", yytext); GetNumber(); return (int)Token.NUMBER;
            break;
        case 167: // Recognized 'n(?:\\\n)*o(?:\\\n)*t',	Shortest string "no?:\\\nt"
if(!handleDigraphs) { Console.WriteLine("token: {0}", yytext); GetIdentifier(); return (int)Token.IDENTIFIER; } else { return (int)Token.EXCLAIMATION_MARK; }
            break;
        case 168: // Recognized 'n(?:\\\n)*o(?:\\\n)*t(?:\\\n)*_(?:\\\n)*e(?:\\\n)*q',	Shortest string "no?:\\\nt_eq"
if(!handleDigraphs) { Console.WriteLine("token: {0}", yytext); GetIdentifier(); return (int)Token.IDENTIFIER; } else { return (int)Token.NOT_EQUALS; }
            break;
        case 177: // Recognized 'd(\\\n)*e(\\\n)*f(\\\n)*i(\\\n)*n(\\\n)*e(\\\n)*d',	Shortest string "defined"
Console.WriteLine("token: {0}", yytext); return (int)Token.DEFINED;
            break;
        case 180: // Recognized 'o(?:\\\n)*r(?:\\\n)*_(?:\\\n)*e(?:\\\n)*q',	Shortest string "o?:\\\nr_eq"
if(!handleDigraphs) { Console.WriteLine("token: {0}", yytext); GetIdentifier(); return (int)Token.IDENTIFIER; } else { return (int)Token.PIPE_EQUALS; }
            break;
        case 182: // Recognized 'o(?:\\\n)*r',	Shortest string "o?:\\\nr"
if(!handleDigraphs) { Console.WriteLine("token: {0}", yytext); GetIdentifier(); return (int)Token.IDENTIFIER; } else { return (int)Token.PIPE_PIPE; }
            break;
        case 183: // Recognized '\\{Space}*([^\n]|<<EOF>>)',	Shortest string "\\s"
        case 184: // Recognized '\\{Space}*([^\n]|<<EOF>>)',	Shortest string "\\\t"
        case 185: // Recognized '\\{Space}*([^\n]|<<EOF>>)',	Shortest string "\\<"
throw new InvalidDataException("Unexpected \\");
            break;
        case 186: // Recognized '\\{Space}*\n',	Shortest string "\\\t\n"
Console.WriteLine("token: {0}", yytext);
            break;
        case 191: // Recognized 's(\\\n)*i(\\\n)*z(\\\n)*e(\\\n)*o(\\\n)*f',	Shortest string "sizeof"
Console.WriteLine("token: {0}", yytext); return (int)Token.SIZEOF;
            break;
        case 192: // In <C_COMMENT> Recognized '[^*\/]+',	Shortest string "s"
curTokVal.Append(yytext);
            break;
        case 193: // In <C_COMMENT> Recognized '\/',	Shortest string "/"
curTokVal.Append(yytext);
            break;
        case 194: // In <C_COMMENT> Recognized '\*[^\/]',	Shortest string "*s"
curTokVal.Append(yytext);
            break;
        case 195: // In <C_COMMENT> Recognized '\*[\/]',	Shortest string "*/"
curTokVal.Append(yytext); Console.WriteLine("token: {0}", curTokVal.ToString()); GetComment(); BEGIN(INITIAL); return (int)Token.COMMENT;
            break;
        case 196: // In <CPP_COMMENT> Recognized '[^\\\n]+',	Shortest string "s"
curTokVal.Append(yytext);
            break;
        case 197: // In <CPP_COMMENT> Recognized '\n',	Shortest string "\n"
curTokVal.Append(yytext); Console.WriteLine("token: {0}", curTokVal.ToString()); GetComment(); BEGIN(INITIAL); return (int)Token.COMMENT;
            break;
        case 198: // In <CPP_COMMENT> Recognized '\\{Space}*[^\\n]',	Shortest string "\\s"
        case 199: // In <CPP_COMMENT> Recognized '\\{Space}*[^\\n]',	Shortest string "\\\t"
        case 200: // In <CPP_COMMENT> Recognized '\\{Space}*[^\\n]',	Shortest string "\\<"
curTokVal.Append(yytext);
            break;
        case 201: // In <CPP_COMMENT> Recognized '\\{Space}*<<EOF>>',	Shortest string "\\<<EOF>>"
throw new InvalidDataException("unterminated //");
            break;
        case 202: // In <CPP_COMMENT> Recognized '\\{Space}*\\n',	Shortest string "\\\\n"
curTokVal.Append(yytext);
            break;
        case 203: // In <RAW_STRING_PREFIX> Recognized '[^\(]*\(',	Shortest string "("
rawStringPrefix = yytext.Substring(0, yytext.Length - 1);
            break;
        case 204: // In <RAW_STRING> Recognized '[^\)"]+',	Shortest string "s"
curTokVal.Append(yytext);
            break;
        case 205: // In <RAW_STRING> Recognized '(\)|["])',	Shortest string ")"
        case 206: // In <RAW_STRING> Recognized '(\)|["])',	Shortest string "\""
curTokVal.Append(yytext);
            break;
        case 207: // In <RAW_STRING> Recognized '\)[^\)]*["]{stringSuffix}?',	Shortest string ")\""
        case 208: // In <RAW_STRING> Recognized '\)[^\)]*["]{stringSuffix}?',	Shortest string ")\"s"
        case 209: // In <RAW_STRING> Recognized '\)[^\)]*["]{stringSuffix}?',	Shortest string ")\"_s"
curTokVal.Append(yytext); if(yytext.Substring(1, yytext.LastIndexOf('"') - 1).Equals(rawStringPrefix)) { BEGIN(INITIAL); }
            break;
        case 210: // In <STRING> Recognized '\n',	Shortest string "\n"
throw new InvalidDataException("Unterminated \"");
            break;
        case 211: // In <STRING> Recognized '["]{stringSuffix}?',	Shortest string "\""
        case 212: // In <STRING> Recognized '["]{stringSuffix}?',	Shortest string "\"s"
        case 213: // In <STRING> Recognized '["]{stringSuffix}?',	Shortest string "\"_s"
curTokVal.Append(yytext); BEGIN(INITIAL);
            break;
        case 214: // In <STRING> Recognized '\\[^\n]',	Shortest string "\\s"
curTokVal.Append(yytext);
            break;
        case 215: // In <STRING> Recognized '\\\n',	Shortest string "\\\n"
if(!allowSlashNInString) { throw new InvalidDataException("Unterminated \""); } if(!treatStringSlashNAsNothing) { curTokVal.Append(yytext); }
            break;
        default:
            break;
    }
#pragma warning restore 162, 1522
#endregion
                    }
                }
        }

#if BACKUP
        void SaveStateAndPos(ref Context ctx) {
            ctx.bPos  = buffer.Pos;
            ctx.rPos  = readPos;
            ctx.cCol  = cCol;
            ctx.lNum  = lNum;
            ctx.state = state;
            ctx.cChr  = code;
        }

        void RestoreStateAndPos(ref Context ctx) {
            buffer.Pos = ctx.bPos;
            readPos = ctx.rPos;
            cCol  = ctx.cCol;
            lNum  = ctx.lNum;
            state = ctx.state;
            code  = ctx.cChr;
        }
#endif  // BACKUP

        // ============= End of the tokenizer code ================

#if STACK        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void yy_clear_stack() { scStack.Clear(); }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int yy_top_state() { return scStack.Peek(); }
        
        internal void yy_push_state(int state)
        {
            scStack.Push(currentScOrd);
            BEGIN(state);
        }
        
        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
				int newSc = scStack.Pop();
				BEGIN(newSc);
            } // Otherwise leave stack unchanged.
        }
 #endif // STACK

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void ECHO() { Console.Out.Write(yytext); }
        
    } // end class $Scanner


} // end namespace
