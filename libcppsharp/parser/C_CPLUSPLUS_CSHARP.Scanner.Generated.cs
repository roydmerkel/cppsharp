//
//  This CSharp output file generated by Gardens Point LEX
//  Gardens Point LEX (GPLEX) is Copyright (c) John Gough, QUT 2006-2014.
//  Output produced by GPLEX is the property of the user.
//  See accompanying file GPLEXcopyright.rtf.
//
//  GPLEX Version:  1.2.2
//  Machine:  ubuntu
//  DateTime: 3/23/2018 7:29:19 PM
//  UserName: rmerkel
//  GPLEX input file <parser/C_CPLUSPLUS_CSHARP.Language.analyzer.lex - 3/23/2018 7:29:16 PM>
//  GPLEX frame file <embedded resource>
//
//  Option settings: unicode, verbose, parser, stack, minimize
//  Option settings: classes, compressMap, compressNext, persistBuffer, noEmbedBuffers
//  Fallback code page: Target machine default
//

//
// Revised backup code
// Version 1.2.1 of 24-June-2013
//
//
#define BACKUP
#define STACK
#define PERSIST

using System;
using System.IO;
using System.Text;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Diagnostics.CodeAnalysis;

using QUT.GplexBuffers;

namespace libcppsharp.parser
{   
    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>
    
#if STANDALONE
    //
    // These are the dummy declarations for stand-alone GPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

     internal enum Token
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

     internal abstract class ScanBase
    {
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public abstract int yylex();

        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yywrap")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yywrap")]
        protected virtual bool yywrap() { return true; }

#if BABEL
        protected abstract int CurrentSc { get; set; }
        // EolState is the 32-bit of state data persisted at 
        // the end of each line for Visual Studio colorization.  
        // The default is to return CurrentSc.  You must override
        // this if you want more complicated behavior.
        public virtual int EolState { 
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }
    }
    
     internal interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
#endif // BABEL
    }

#endif // STANDALONE
    
    // If the compiler can't find the scanner base class maybe you
    // need to run GPPG with the /gplex option, or GPLEX with /noparser
#if BABEL
     internal sealed partial class C_CPLUSPLUS_CSHARPScanner : ScanBase, IColorScan
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return currentScOrd; }  // i.e. return YY_START;
             set { currentScOrd = value;   // i.e. BEGIN(value);
                   currentStart = startState[value]; }
        }
#else  // BABEL
     internal sealed partial class C_CPLUSPLUS_CSHARPScanner : ScanBase
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
#endif // BABEL
        
        /// <summary>
        /// The input buffer for this scanner.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public ScanBuff Buffer { get { return buffer; } }
        
        private static int GetMaxParseToken() {
     System.Reflection.FieldInfo f = typeof(Token).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }
        
        static int parserMax = GetMaxParseToken();
        
        enum Result {accept, noMatch, contextFound};

        const int maxAccept = 149;
        const int initial = 150;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;
        const int C_COMMENT = 1;
        const int CPP_COMMENT = 2;

#region user code
/*

  C_CPLUSPLUS_CSHARP.Language.analyzer.lex

  Author:
       Roy Merkel <merkel-roy@comcast.net>

  Copyright (c) 2018 Roy Merkel

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
StringBuilder curTokVal = new StringBuilder();
#endregion user code

        int state;
        int currentStart = startState[0];
        int code;      // last code read
        int cCol;      // column number of code
        int lNum;      // current line number
        //
        // The following instance variables are used, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK          
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public short[] nxt;
        public Table(int m, int x, int d, short[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = new int[] {150, 357, 359, 0};

#region TwoLevelCharacterMap
    //
    // There are 74 equivalence classes
    // There are 256 character sequence regions
    // There are 19 tables, 4864 entries
    //
    static sbyte[] mLo0 = new sbyte[256] {
/*     '\0' */ 73, 0, 0, 0, 0, 0, 0, 0, 0, 33, 3, 33, 33, 0, 0, 0, 
/*   '\x10' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x20' */ 33, 48, 0, 53, 11, 52, 49, 65, 55, 56, 41, 44, 60, 42, 40, 50, 
/*      '0' */ 32, 71, 67, 67, 67, 67, 67, 67, 64, 64, 39, 61, 34, 43, 38, 46, 
/*      '@' */ 62, 69, 70, 69, 69, 35, 37, 66, 66, 66, 66, 66, 66, 66, 66, 36, 
/*      'P' */ 72, 66, 66, 66, 66, 66, 66, 66, 68, 66, 66, 47, 2, 54, 51, 12, 
/*      '`' */ 63, 69, 70, 69, 9, 6, 8, 66, 66, 4, 66, 66, 66, 66, 10, 7, 
/*      'p' */ 72, 66, 66, 1, 66, 66, 66, 66, 68, 66, 5, 57, 45, 58, 59, 0, 
/*   '\x80' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x90' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\xA0' */ 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 13, 0, 0, 13, 0, 13, 
/*   '\xB0' */ 0, 0, 13, 13, 13, 13, 0, 13, 13, 13, 13, 0, 13, 13, 13, 0, 
/*   '\xC0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/*   '\xD0' */ 13, 13, 13, 13, 13, 13, 13, 0, 13, 13, 13, 13, 13, 13, 13, 13, 
/*   '\xE0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/*   '\xF0' */ 13, 13, 13, 13, 13, 13, 13, 0, 13, 13, 13, 13, 13, 13, 13, 13 };
    static sbyte[] mLo1 = new sbyte[256] {
/* '\u0100' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u0110' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u0120' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u0130' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u0140' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u0150' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u0160' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u0170' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u0180' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u0190' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u01A0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u01B0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u01C0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u01D0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u01E0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u01F0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13 };
    static sbyte[] mLo3 = new sbyte[256] {
/* '\u0300' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
/* '\u0310' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
/* '\u0320' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
/* '\u0330' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
/* '\u0340' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
/* '\u0350' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
/* '\u0360' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
/* '\u0370' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u0380' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u0390' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u03A0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u03B0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u03C0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u03D0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u03E0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u03F0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13 };
    static sbyte[] mLo22 = new sbyte[256] {
/* '\u1600' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1610' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1620' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1630' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1640' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1650' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1660' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1670' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1680' */ 0, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1690' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u16A0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u16B0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u16C0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u16D0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u16E0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u16F0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13 };
    static sbyte[] mLo24 = new sbyte[256] {
/* '\u1800' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 0, 13, 
/* '\u1810' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1820' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1830' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1840' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1850' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1860' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1870' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1880' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1890' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u18A0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u18B0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u18C0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u18D0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u18E0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u18F0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13 };
    static sbyte[] mLo29 = new sbyte[256] {
/* '\u1D00' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1D10' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1D20' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1D30' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1D40' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1D50' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1D60' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1D70' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1D80' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1D90' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1DA0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1DB0' */ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
/* '\u1DC0' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
/* '\u1DD0' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
/* '\u1DE0' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
/* '\u1DF0' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31 };
    static sbyte[] mLo32 = new sbyte[256] {
/* '\u2000' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 14, 14, 0, 0, 
/* '\u2010' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2020' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 14, 14, 14, 14, 0, 
/* '\u2030' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 
/* '\u2040' */ 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2050' */ 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2060' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2070' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2080' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2090' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u20A0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u20B0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u20C0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u20D0' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
/* '\u20E0' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
/* '\u20F0' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31 };
    static sbyte[] mLo33 = new sbyte[256] {
/* '\u2100' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2110' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2120' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2130' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2140' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2150' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2160' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2170' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2180' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2190' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u21A0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u21B0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u21C0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u21D0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u21E0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u21F0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo34 = new sbyte[256] {
/* '\u2200' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2210' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2220' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2230' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2240' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2250' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2260' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2270' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2280' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2290' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u22A0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u22B0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u22C0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u22D0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u22E0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u22F0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo36 = new sbyte[256] {
/* '\u2400' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2410' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2420' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2430' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2440' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2450' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2460' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2470' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2480' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2490' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u24A0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u24B0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u24C0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u24D0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u24E0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u24F0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 };
    static sbyte[] mLo39 = new sbyte[256] {
/* '\u2700' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2710' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2720' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2730' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2740' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2750' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2760' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2770' */ 0, 0, 0, 0, 0, 0, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2780' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2790' */ 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u27A0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u27B0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u27C0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u27D0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u27E0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u27F0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] mLo44 = new sbyte[256] {
/* '\u2C00' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2C10' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2C20' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2C30' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2C40' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2C50' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2C60' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2C70' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2C80' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2C90' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2CA0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2CB0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2CC0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2CD0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2CE0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2CF0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 };
    static sbyte[] mLo46 = new sbyte[256] {
/* '\u2E00' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2E10' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2E20' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2E30' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2E40' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2E50' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2E60' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2E70' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u2E80' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2E90' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2EA0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2EB0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2EC0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2ED0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2EE0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
/* '\u2EF0' */ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 };
    static sbyte[] mLo48 = new sbyte[256] {
/* '\u3000' */ 0, 0, 0, 0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u3010' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\u3020' */ 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3030' */ 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3040' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3050' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3060' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3070' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3080' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3090' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u30A0' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u30B0' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u30C0' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u30D0' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u30E0' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u30F0' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 };
    static sbyte[] mLo49 = new sbyte[256] {
/* '\u3100' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3110' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3120' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3130' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3140' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3150' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3160' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3170' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3180' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u3190' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u31A0' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u31B0' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u31C0' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u31D0' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u31E0' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
/* '\u31F0' */ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 };
    static sbyte[] mLo249 = new sbyte[256] {
/* '\uF900' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF910' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF920' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF930' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF940' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF950' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF960' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF970' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF980' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF990' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF9A0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF9B0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF9C0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF9D0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF9E0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uF9F0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 };
    static sbyte[] mLo253 = new sbyte[256] {
/* '\uFD00' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFD10' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFD20' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFD30' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 
/* '\uFD40' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFD50' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFD60' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFD70' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFD80' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFD90' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFDA0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFDB0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFDC0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFDD0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uFDE0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* '\uFDF0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 };
    static sbyte[] mLo254 = new sbyte[256] {
/* '\uFE00' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFE10' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFE20' */ 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
/* '\uFE30' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFE40' */ 16, 16, 16, 16, 16, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFE50' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFE60' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFE70' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFE80' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFE90' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFEA0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFEB0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFEC0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFED0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFEE0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFEF0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 };
    static sbyte[] mLo255 = new sbyte[256] {
/* '\uFF00' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFF10' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFF20' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFF30' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFF40' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFF50' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFF60' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFF70' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFF80' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFF90' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFFA0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFFB0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFFC0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFFD0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFFE0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
/* '\uFFF0' */ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0 };

    static sbyte[][] map = new sbyte[256][] {
/* '\u00xx' */ mLo0, mLo1, mLo1, mLo3, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\u10xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo22, mLo1, mLo24, mLo1, mLo1, mLo1, mLo1, mLo29, mLo1, mLo1, 
/* '\u20xx' */ mLo32, mLo33, mLo34, mLo34, mLo36, mLo34, mLo34, mLo39, mLo34, mLo34, mLo34, mLo34, mLo44, mLo44, mLo46, mLo44, 
/* '\u30xx' */ mLo48, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, 
/* '\u40xx' */ mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, 
/* '\u50xx' */ mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, 
/* '\u60xx' */ mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, 
/* '\u70xx' */ mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, 
/* '\u80xx' */ mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, 
/* '\u90xx' */ mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, 
/* '\uA0xx' */ mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, 
/* '\uB0xx' */ mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, 
/* '\uC0xx' */ mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, 
/* '\uD0xx' */ mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo49, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, 
/* '\uE0xx' */ mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, 
/* '\uF0xx' */ mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo34, mLo249, mLo249, mLo249, mLo249, mLo253, mLo254, mLo255};

#endregion

#region CompressedCharacterMap
    //
    // There are 74 equivalence classes
    // There are 28 character sequence regions
    // There are 0 tables, 0 entries
    // There are 28 runs, 0 singletons
    // Decision tree depth is 5
    //

    static sbyte MapC(int code)
    { // '\U00010000' <= code <= '\U0010FFFF'
      if (code < 524288) // '\U00010000' <= code <= '\U0007FFFF'
        if (code < 327678) // '\U00010000' <= code <= '\U0004FFFD'
          if (code < 196606) // '\U00010000' <= code <= '\U0002FFFD'
            if (code < 131070) // '\U00010000' <= code <= '\U0001FFFD'
              return (sbyte)17;
            else // '\U0001FFFE' <= code <= '\U0002FFFD'
              if (code < 131072) // '\U0001FFFE' <= code <= '\U0001FFFF'
                return (sbyte)0;
              else // '\U00020000' <= code <= '\U0002FFFD'
                return (sbyte)18;
          else // '\U0002FFFE' <= code <= '\U0004FFFD'
            if (code < 262142) // '\U0002FFFE' <= code <= '\U0003FFFD'
              if (code < 196608) // '\U0002FFFE' <= code <= '\U0002FFFF'
                return (sbyte)0;
              else // '\U00030000' <= code <= '\U0003FFFD'
                return (sbyte)19;
            else // '\U0003FFFE' <= code <= '\U0004FFFD'
              if (code < 262144) // '\U0003FFFE' <= code <= '\U0003FFFF'
                return (sbyte)0;
              else // '\U00040000' <= code <= '\U0004FFFD'
                return (sbyte)20;
        else // '\U0004FFFE' <= code <= '\U0007FFFF'
          if (code < 393216) // '\U0004FFFE' <= code <= '\U0005FFFF'
            if (code < 327680) // '\U0004FFFE' <= code <= '\U0004FFFF'
              return (sbyte)0;
            else // '\U00050000' <= code <= '\U0005FFFF'
              if (code < 393214) // '\U00050000' <= code <= '\U0005FFFD'
                return (sbyte)21;
              else // '\U0005FFFE' <= code <= '\U0005FFFF'
                return (sbyte)0;
          else // '\U00060000' <= code <= '\U0007FFFF'
            if (code < 458752) // '\U00060000' <= code <= '\U0006FFFF'
              if (code < 458750) // '\U00060000' <= code <= '\U0006FFFD'
                return (sbyte)22;
              else // '\U0006FFFE' <= code <= '\U0006FFFF'
                return (sbyte)0;
            else // '\U00070000' <= code <= '\U0007FFFF'
              if (code < 524286) // '\U00070000' <= code <= '\U0007FFFD'
                return (sbyte)23;
              else // '\U0007FFFE' <= code <= '\U0007FFFF'
                return (sbyte)0;
      else // '\U00080000' <= code <= '\U0010FFFF'
        if (code < 786430) // '\U00080000' <= code <= '\U000BFFFD'
          if (code < 655358) // '\U00080000' <= code <= '\U0009FFFD'
            if (code < 589822) // '\U00080000' <= code <= '\U0008FFFD'
              return (sbyte)24;
            else // '\U0008FFFE' <= code <= '\U0009FFFD'
              if (code < 589824) // '\U0008FFFE' <= code <= '\U0008FFFF'
                return (sbyte)0;
              else // '\U00090000' <= code <= '\U0009FFFD'
                return (sbyte)25;
          else // '\U0009FFFE' <= code <= '\U000BFFFD'
            if (code < 720894) // '\U0009FFFE' <= code <= '\U000AFFFD'
              if (code < 655360) // '\U0009FFFE' <= code <= '\U0009FFFF'
                return (sbyte)0;
              else // '\U000A0000' <= code <= '\U000AFFFD'
                return (sbyte)26;
            else // '\U000AFFFE' <= code <= '\U000BFFFD'
              if (code < 720896) // '\U000AFFFE' <= code <= '\U000AFFFF'
                return (sbyte)0;
              else // '\U000B0000' <= code <= '\U000BFFFD'
                return (sbyte)27;
        else // '\U000BFFFE' <= code <= '\U0010FFFF'
          if (code < 851968) // '\U000BFFFE' <= code <= '\U000CFFFF'
            if (code < 786432) // '\U000BFFFE' <= code <= '\U000BFFFF'
              return (sbyte)0;
            else // '\U000C0000' <= code <= '\U000CFFFF'
              if (code < 851966) // '\U000C0000' <= code <= '\U000CFFFD'
                return (sbyte)28;
              else // '\U000CFFFE' <= code <= '\U000CFFFF'
                return (sbyte)0;
          else // '\U000D0000' <= code <= '\U0010FFFF'
            if (code < 917504) // '\U000D0000' <= code <= '\U000DFFFF'
              if (code < 917502) // '\U000D0000' <= code <= '\U000DFFFD'
                return (sbyte)29;
              else // '\U000DFFFE' <= code <= '\U000DFFFF'
                return (sbyte)0;
            else // '\U000E0000' <= code <= '\U0010FFFF'
              if (code < 983038) // '\U000E0000' <= code <= '\U000EFFFD'
                return (sbyte)30;
              else // '\U000EFFFE' <= code <= '\U0010FFFF'
                return (sbyte)0;
    }
#endregion


    static sbyte Map(int code)
    { 
        if (code <= 65535)
            return map[code / 256][code % 256];
        else
            return MapC(code);
    }

    static Table[] NxS = new Table[367] {
/* NxS[   0] */ new Table(0, 0, 0, null), // Shortest string ""
/* NxS[   1] */ // Shortest string "s"
      new Table(33, 46, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, -1, -1, 3, 347, -1, 134}),
/* NxS[   2] */ new Table(0, 0, -1, null), // Shortest string "\n"
/* NxS[   3] */ // Shortest string "i"
      new Table(33, 45, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, -1, -1, 3, 328, -1}),
/* NxS[   4] */ // Shortest string "d"
      new Table(33, 48, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, -1, -1, 3, 330, -1, 3, 3, 124}),
/* NxS[   5] */ // Shortest string "0"
      new Table(64, 51, -1, new short[] {236, 236, 84, 86, 87, 84, 
          88, 86, 85, -1, -1, 84, 234, -1, 84, 84, 85, 84, 84, 84, 84, -1, 
          235, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 86, -1, -1, 85, 84, 84, -1, -1, 37}),
/* NxS[   6] */ // Shortest string "\t"
      new Table(2, 32, -1, new short[] {233, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 6}),
/* NxS[   7] */ // Shortest string "<"
      new Table(2, 42, -1, new short[] {227, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 80, -1, -1, -1, -1, -1, 
          -1, -1, -1, 81}),
/* NxS[   8] */ // Shortest string ">"
      new Table(38, 39, -1, new short[] {77, -1, -1, -1, -1, 78, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          223}),
/* NxS[   9] */ // Shortest string ":"
      new Table(39, 38, -1, new short[] {76, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 221}),
/* NxS[  10] */ // Shortest string "."
      new Table(32, 45, -1, new short[] {40, -1, -1, -1, -1, -1, 
          -1, -1, 218, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, 40, -1, -1, 
          -1, 40, -1, -1, -1, -1, 217}),
/* NxS[  11] */ // Shortest string "*"
      new Table(43, 34, -1, new short[] {73, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 215}),
/* NxS[  12] */ // Shortest string "-"
      new Table(38, 39, -1, new short[] {69, -1, -1, -1, 70, 71, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          211}),
/* NxS[  13] */ // Shortest string "="
      new Table(38, 39, -1, new short[] {67, -1, -1, -1, -1, 68, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          209}),
/* NxS[  14] */ // Shortest string "+"
      new Table(43, 34, -1, new short[] {65, 66, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 207}),
/* NxS[  15] */ // Shortest string "|"
      new Table(43, 34, -1, new short[] {63, -1, 64, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 205}),
/* NxS[  16] */ // Shortest string "?"
      new Table(40, 37, -1, new short[] {60, -1, -1, -1, -1, -1, 
          61, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 203}),
/* NxS[  17] */ new Table(0, 0, -1, null), // Shortest string "["
/* NxS[  18] */ // Shortest string "!"
      new Table(43, 34, -1, new short[] {59, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 201}),
/* NxS[  19] */ // Shortest string "&"
      new Table(43, 34, -1, new short[] {57, -1, -1, -1, -1, -1, 
          58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 199}),
/* NxS[  20] */ // Shortest string "/"
      new Table(41, 36, -1, new short[] {54, -1, 55, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, 197}),
/* NxS[  21] */ // Shortest string "^"
      new Table(43, 34, -1, new short[] {53, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 195}),
/* NxS[  22] */ // Shortest string "%"
      new Table(43, 34, -1, new short[] {52, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 193}),
/* NxS[  23] */ // Shortest string "#"
      new Table(53, 24, -1, new short[] {51, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 191}),
/* NxS[  24] */ new Table(0, 0, -1, null), // Shortest string "]"
/* NxS[  25] */ new Table(0, 0, -1, null), // Shortest string "("
/* NxS[  26] */ new Table(0, 0, -1, null), // Shortest string ")"
/* NxS[  27] */ new Table(0, 0, -1, null), // Shortest string "{"
/* NxS[  28] */ new Table(0, 0, -1, null), // Shortest string "}"
/* NxS[  29] */ new Table(0, 0, -1, null), // Shortest string "~"
/* NxS[  30] */ new Table(0, 0, -1, null), // Shortest string ","
/* NxS[  31] */ new Table(0, 0, -1, null), // Shortest string ";"
/* NxS[  32] */ new Table(0, 0, -1, null), // Shortest string "@"
/* NxS[  33] */ new Table(0, 0, -1, null), // Shortest string "`"
/* NxS[  34] */ // Shortest string "8"
      new Table(64, 51, -1, new short[] {34, 34, 35, 34, 35, 35, 
          35, 34, 36, -1, -1, 35, 152, -1, 35, 35, 36, 35, 35, 35, 35, -1, 
          153, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 34, -1, -1, 36, 35, 35, -1, -1, 37}),
/* NxS[  35] */ // Shortest string "8s"
      new Table(66, 46, -1, new short[] {35, -1, 35, 35, 35, -1, 
          35, -1, -1, 35, 177, -1, 35, 35, 35, 35, 35, 35, 35, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 35, 35, 35}),
/* NxS[  36] */ // Shortest string "8e"
      new Table(32, 53, -1, new short[] {48, -1, -1, 35, 35, 35, 
          -1, -1, -1, -1, 181, -1, 181, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, 35, 48, 35, 35, 
          35, 48, 35, -1, -1, 35, 180, -1, 35, 35, 35, 35, 35, 35, 35}),
/* NxS[  37] */ // Shortest string "0."
      new Table(64, 48, -1, new short[] {40, -1, 38, 40, 38, 38, 
          38, 40, 39, -1, -1, 38, 154, -1, 38, 38, 39, 38, 38, 38, 38, -1, 
          155, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 40, -1, -1, 39, 38, 38}),
/* NxS[  38] */ // Shortest string "0.s"
      new Table(66, 46, -1, new short[] {38, -1, 38, 38, 38, -1, 
          38, -1, -1, 38, 167, -1, 38, 38, 38, 38, 38, 38, 38, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 38, 38, 38}),
/* NxS[  39] */ // Shortest string "0.e"
      new Table(32, 53, -1, new short[] {46, -1, -1, 38, 38, 38, 
          -1, -1, -1, -1, 171, -1, 171, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, 38, 46, 38, 38, 
          38, 46, 38, -1, -1, 38, 170, -1, 38, 38, 38, 38, 38, 38, 38}),
/* NxS[  40] */ // Shortest string ".0"
      new Table(64, 48, -1, new short[] {40, 40, 41, 40, 41, 41, 
          41, 40, 42, -1, -1, 41, 156, -1, 41, 41, 42, 41, 41, 41, 41, -1, 
          157, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 40, -1, -1, 42, 41, 41}),
/* NxS[  41] */ // Shortest string ".0s"
      new Table(66, 46, -1, new short[] {41, -1, 41, 41, 41, -1, 
          41, -1, -1, 41, 158, -1, 41, 41, 41, 41, 41, 41, 41, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 41, 41, 41}),
/* NxS[  42] */ // Shortest string ".0e"
      new Table(32, 53, -1, new short[] {44, -1, -1, 41, 41, 41, 
          -1, -1, -1, -1, 162, -1, 162, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, 41, 44, 41, 41, 
          41, 44, 41, -1, -1, 41, 161, -1, 41, 41, 41, 41, 41, 41, 41}),
/* NxS[  43] */ // Shortest string ".0_s"
      new Table(33, 45, 43, new short[] {-1, -1, 43, 43, 43, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, 43, 43, 43, 43, 43, 
          43, 43, -1, -1, 43, 159, -1}),
/* NxS[  44] */ // Shortest string ".0e0"
      new Table(64, 48, -1, new short[] {44, -1, 41, 44, 41, 41, 
          41, 44, 41, -1, -1, 41, 164, -1, 41, 41, 41, 41, 41, 41, 41, -1, 
          157, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 44, -1, -1, 41, 41, 41}),
/* NxS[  45] */ // Shortest string "0._s"
      new Table(33, 45, 45, new short[] {-1, -1, 45, 45, 45, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, 45, 45, 45, 45, 45, 
          45, 45, -1, -1, 45, 168, -1}),
/* NxS[  46] */ // Shortest string "0.e0"
      new Table(64, 48, -1, new short[] {46, -1, 38, 46, 38, 38, 
          38, 46, 38, -1, -1, 38, 173, -1, 38, 38, 38, 38, 38, 38, 38, -1, 
          155, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 46, -1, -1, 38, 38, 38}),
/* NxS[  47] */ // Shortest string "8_s"
      new Table(33, 45, 47, new short[] {-1, -1, 47, 47, 47, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, 47, 47, 47, 47, 47, 
          47, 47, -1, -1, 47, 178, -1}),
/* NxS[  48] */ // Shortest string "0e0"
      new Table(64, 48, -1, new short[] {48, -1, 49, 48, 49, 49, 
          49, 48, 49, -1, -1, 49, 183, -1, 49, 49, 49, 49, 49, 49, 49, -1, 
          184, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 48, -1, -1, 49, 49, 49}),
/* NxS[  49] */ // Shortest string "0e0s"
      new Table(66, 46, -1, new short[] {49, -1, 49, 49, 49, -1, 
          49, -1, -1, 49, 185, -1, 49, 49, 49, 49, 49, 49, 49, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 49, 49, 49}),
/* NxS[  50] */ // Shortest string "0e0_s"
      new Table(33, 45, 50, new short[] {-1, -1, 50, 50, 50, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, -1, 50, 50, 50, 50, 50, 
          50, 50, -1, -1, 50, 186, -1}),
/* NxS[  51] */ new Table(0, 0, -1, null), // Shortest string "##"
/* NxS[  52] */ new Table(0, 0, -1, null), // Shortest string "%="
/* NxS[  53] */ new Table(0, 0, -1, null), // Shortest string "^="
/* NxS[  54] */ new Table(0, 0, -1, null), // Shortest string "/*"
/* NxS[  55] */ new Table(0, 0, -1, null), // Shortest string "/="
/* NxS[  56] */ new Table(0, 0, -1, null), // Shortest string "/\0"
/* NxS[  57] */ new Table(0, 0, -1, null), // Shortest string "&="
/* NxS[  58] */ new Table(0, 0, -1, null), // Shortest string "&&"
/* NxS[  59] */ new Table(0, 0, -1, null), // Shortest string "!="
/* NxS[  60] */ new Table(0, 0, -1, null), // Shortest string "?."
/* NxS[  61] */ new Table(0, 0, -1, null), // Shortest string "??"
/* NxS[  62] */ new Table(0, 0, -1, null), // Shortest string "?["
/* NxS[  63] */ new Table(0, 0, -1, null), // Shortest string "|="
/* NxS[  64] */ new Table(0, 0, -1, null), // Shortest string "||"
/* NxS[  65] */ new Table(0, 0, -1, null), // Shortest string "+="
/* NxS[  66] */ new Table(0, 0, -1, null), // Shortest string "++"
/* NxS[  67] */ new Table(0, 0, -1, null), // Shortest string "=>"
/* NxS[  68] */ new Table(0, 0, -1, null), // Shortest string "=="
/* NxS[  69] */ // Shortest string "->"
      new Table(41, 36, -1, new short[] {72, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 212}),
/* NxS[  70] */ new Table(0, 0, -1, null), // Shortest string "--"
/* NxS[  71] */ new Table(0, 0, -1, null), // Shortest string "-="
/* NxS[  72] */ new Table(0, 0, -1, null), // Shortest string "->*"
/* NxS[  73] */ new Table(0, 0, -1, null), // Shortest string "*="
/* NxS[  74] */ new Table(0, 0, -1, null), // Shortest string ".*"
/* NxS[  75] */ new Table(0, 0, -1, null), // Shortest string "..."
/* NxS[  76] */ new Table(0, 0, -1, null), // Shortest string "::"
/* NxS[  77] */ // Shortest string ">>"
      new Table(43, 34, -1, new short[] {79, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 224}),
/* NxS[  78] */ new Table(0, 0, -1, null), // Shortest string ">="
/* NxS[  79] */ new Table(0, 0, -1, null), // Shortest string ">>="
/* NxS[  80] */ // Shortest string "<<"
      new Table(43, 34, -1, new short[] {83, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 230}),
/* NxS[  81] */ // Shortest string "<="
      new Table(2, 37, -1, new short[] {228, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 82}),
/* NxS[  82] */ new Table(0, 0, -1, null), // Shortest string "<=>"
/* NxS[  83] */ new Table(0, 0, -1, null), // Shortest string "<<="
/* NxS[  84] */ // Shortest string "0s"
      new Table(66, 46, -1, new short[] {84, -1, 84, 84, 84, -1, 
          84, -1, -1, 84, 245, -1, 84, 84, 84, 84, 84, 84, 84, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 84, 84, 84}),
/* NxS[  85] */ // Shortest string "0e"
      new Table(32, 53, -1, new short[] {48, -1, -1, 84, 84, 84, 
          -1, -1, -1, -1, 181, -1, 181, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, 84, 48, 84, 84, 
          84, 48, 84, -1, -1, 84, 326, -1, 84, 84, 84, 84, 84, 84, 84}),
/* NxS[  86] */ // Shortest string "00"
      new Table(64, 51, -1, new short[] {236, 236, 84, 86, 84, 84, 
          84, 86, 85, -1, -1, 84, 322, -1, 84, 84, 85, 84, 84, 84, 84, -1, 
          235, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 86, -1, -1, 85, 84, 84, -1, -1, 37}),
/* NxS[  87] */ // Shortest string "0X"
      new Table(64, 51, -1, new short[] {93, -1, 84, 93, 84, 92, 
          92, 93, 84, -1, -1, 84, 247, -1, 84, 84, 92, 84, 92, 92, 84, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 93, -1, -1, 92, 84, 92, -1, -1, 248}),
/* NxS[  88] */ // Shortest string "0B"
      new Table(66, 46, -1, new short[] {84, -1, 84, 84, 84, 89, 
          84, -1, -1, 84, 237, -1, 84, 84, 84, 84, 84, 84, 84, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 89, -1, -1, 84, 84, 84}),
/* NxS[  89] */ // Shortest string "0B0"
      new Table(66, 46, -1, new short[] {90, -1, 90, 90, 90, 89, 
          90, -1, -1, 90, 238, -1, 90, 90, 90, 90, 90, 90, 90, -1, 239, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 89, -1, -1, 90, 90, 90}),
/* NxS[  90] */ // Shortest string "0B0s"
      new Table(66, 46, -1, new short[] {90, -1, 90, 90, 90, -1, 
          90, -1, -1, 90, 240, -1, 90, 90, 90, 90, 90, 90, 90, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 90, 90, 90}),
/* NxS[  91] */ // Shortest string "0B0_s"
      new Table(33, 45, 91, new short[] {-1, -1, 91, 91, 91, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 91, -1, 91, 91, 91, 91, 91, 
          91, 91, -1, -1, 91, 241, -1}),
/* NxS[  92] */ // Shortest string "0Xe"
      new Table(64, 51, -1, new short[] {93, -1, 84, 93, 84, 92, 
          92, 93, 120, -1, -1, 84, 314, -1, 84, 84, 119, 84, 92, 92, 84, -1, 
          272, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 93, -1, -1, 119, 84, 92, -1, -1, 273}),
/* NxS[  93] */ // Shortest string "0X0"
      new Table(64, 51, -1, new short[] {93, -1, 101, 93, 101, 93, 
          93, 93, 103, -1, -1, 101, 271, -1, 101, 101, 102, 101, 93, 93, 101, -1, 
          272, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 93, -1, -1, 102, 101, 93, -1, -1, 273}),
/* NxS[  94] */ // Shortest string "0X.eP0"
      new Table(64, 48, -1, new short[] {94, -1, 95, 94, 95, 95, 
          95, 94, 95, -1, -1, 95, 257, -1, 95, 95, 95, 95, 95, 95, 95, -1, 
          258, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 94, -1, -1, 95, 95, 95}),
/* NxS[  95] */ // Shortest string "0X.ee0s"
      new Table(66, 46, -1, new short[] {95, -1, 95, 95, 95, -1, 
          95, -1, -1, 95, 259, -1, 95, 95, 95, 95, 95, 95, 95, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 95, 95, 95}),
/* NxS[  96] */ // Shortest string "0X.ee0_s"
      new Table(33, 45, 96, new short[] {-1, -1, 96, 96, 96, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 96, -1, 96, 96, 96, 96, 96, 
          96, 96, -1, -1, 96, 260, -1}),
/* NxS[  97] */ // Shortest string "0X.ee0"
      new Table(64, 48, -1, new short[] {97, -1, 95, 97, 95, 99, 
          99, 97, 100, -1, -1, 95, 264, -1, 95, 95, 98, 95, 99, 99, 95, -1, 
          258, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 97, -1, -1, 98, 95, 99}),
/* NxS[  98] */ // Shortest string "0X.ee0e"
      new Table(32, 53, -1, new short[] {97, -1, -1, 98, 95, 99, 
          -1, -1, -1, -1, 255, -1, 255, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 97, -1, 95, 97, 95, 99, 
          99, 97, 100, -1, -1, 95, 268, -1, 95, 95, 98, 95, 99, 99, 95}),
/* NxS[  99] */ // Shortest string "0X.ee0f"
      new Table(64, 48, -1, new short[] {250, -1, 95, 250, 95, 99, 
          99, 250, 100, -1, -1, 95, 267, -1, 95, 95, 98, 95, 99, 99, 95, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 250, -1, -1, 98, 95, 99}),
/* NxS[ 100] */ // Shortest string "0X.ee0P"
      new Table(32, 53, -1, new short[] {94, -1, -1, 95, 95, 95, 
          -1, -1, -1, -1, 255, -1, 255, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 94, -1, 95, 94, 95, 95, 
          95, 94, 95, -1, -1, 95, 265, -1, 95, 95, 95, 95, 95, 95, 95}),
/* NxS[ 101] */ // Shortest string "0X0s"
      new Table(66, 45, -1, new short[] {101, -1, 101, -1, -1, -1, 
          101, -1, -1, 101, 284, -1, 101, 101, -1, 101, -1, -1, 101, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 101}),
/* NxS[ 102] */ // Shortest string "0X0e"
      new Table(32, 55, -1, new short[] {115, -1, -1, 102, 101, 93, 
          -1, -1, 273, -1, 275, -1, 275, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 101, 115, 101, 93, 
          93, 115, 103, -1, -1, 101, 313, -1, 101, 101, 102, 101, 93, 93, 101, -1, 
          272}),
/* NxS[ 103] */ // Shortest string "0X0P"
      new Table(32, 53, -1, new short[] {104, -1, -1, -1, 101, -1, 
          -1, -1, -1, -1, 275, -1, 275, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 104, -1, 101, 104, 101, -1, 
          -1, 104, 101, -1, -1, 101, 274, -1, 101, 101, -1, 101, -1, -1, 101}),
/* NxS[ 104] */ // Shortest string "0XeP0"
      new Table(64, 48, -1, new short[] {104, -1, 105, 104, 105, 105, 
          105, 104, 105, -1, -1, 105, 277, -1, 105, 105, 105, 105, 105, 105, 105, -1, 
          278, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 104, -1, -1, 105, 105, 105}),
/* NxS[ 105] */ // Shortest string "0XeP0s"
      new Table(66, 46, -1, new short[] {105, -1, 105, 105, 105, -1, 
          105, -1, -1, 105, 279, -1, 105, 105, 105, 105, 105, 105, 105, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 105, 105, 105}),
/* NxS[ 106] */ // Shortest string "0XeP0_s"
      new Table(33, 45, 106, new short[] {-1, -1, 106, 106, 106, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 106, -1, 106, 106, 106, 106, 106, 
          106, 106, -1, -1, 106, 280, -1}),
/* NxS[ 107] */ // Shortest string "0Xe.P0"
      new Table(64, 48, -1, new short[] {107, -1, 108, 107, 108, 108, 
          108, 107, 108, -1, -1, 108, 292, -1, 108, 108, 108, 108, 108, 108, 108, -1, 
          293, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 107, -1, -1, 108, 108, 108}),
/* NxS[ 108] */ // Shortest string "0Xe.e0s"
      new Table(66, 46, -1, new short[] {108, -1, 108, 108, 108, -1, 
          108, -1, -1, 108, 297, -1, 108, 108, 108, 108, 108, 108, 108, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 108, 108, 108}),
/* NxS[ 109] */ // Shortest string "0Xe.e0_s"
      new Table(33, 45, 109, new short[] {-1, -1, 109, 109, 109, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 109, -1, 109, 109, 109, 109, 109, 
          109, 109, -1, -1, 109, 295, -1}),
/* NxS[ 110] */ // Shortest string "0Xe.e0"
      new Table(64, 48, -1, new short[] {110, -1, 108, 110, 108, 112, 
          112, 110, 113, -1, -1, 108, 300, -1, 108, 108, 111, 108, 112, 112, 108, -1, 
          293, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 110, -1, -1, 111, 108, 112}),
/* NxS[ 111] */ // Shortest string "0Xe.e0e"
      new Table(32, 53, -1, new short[] {97, -1, -1, 111, 108, 112, 
          -1, -1, -1, -1, 255, -1, 255, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 97, -1, 108, 97, 108, 112, 
          112, 97, 113, -1, -1, 108, 304, -1, 108, 108, 111, 108, 112, 112, 108}),
/* NxS[ 112] */ // Shortest string "0Xe.e0f"
      new Table(64, 48, -1, new short[] {250, -1, 108, 250, 108, 112, 
          112, 250, 113, -1, -1, 108, 303, -1, 108, 108, 111, 108, 112, 112, 108, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 250, -1, -1, 111, 108, 112}),
/* NxS[ 113] */ // Shortest string "0Xe.e0P"
      new Table(32, 53, -1, new short[] {94, -1, -1, 108, 108, 108, 
          -1, -1, -1, -1, 255, -1, 255, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 94, -1, 108, 94, 108, 108, 
          108, 94, 108, -1, -1, 108, 301, -1, 108, 108, 108, 108, 108, 108, 108}),
/* NxS[ 114] */ // Shortest string "0Xe_s"
      new Table(33, 45, 114, new short[] {-1, -1, 114, 114, 114, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 114, -1, 114, 114, 114, 114, 114, 
          114, 114, -1, -1, 114, 307, -1}),
/* NxS[ 115] */ // Shortest string "0Xee0"
      new Table(64, 51, -1, new short[] {115, -1, 116, 115, 116, 115, 
          115, 115, 118, -1, -1, 116, 271, -1, 116, 116, 117, 116, 115, 115, 116, -1, 
          272, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 115, -1, -1, 117, 116, 115, -1, -1, 273}),
/* NxS[ 116] */ // Shortest string "0Xee0s"
      new Table(66, 46, -1, new short[] {116, -1, 116, 105, 105, -1, 
          116, -1, -1, 116, 311, -1, 116, 116, 105, 116, 105, 105, 116, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 105, 116, 105}),
/* NxS[ 117] */ // Shortest string "0Xee0e"
      new Table(32, 55, -1, new short[] {115, -1, -1, 117, 116, 115, 
          -1, -1, 273, -1, 275, -1, 275, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 116, 115, 116, 115, 
          115, 115, 118, -1, -1, 116, 313, -1, 116, 116, 117, 116, 115, 115, 116, -1, 
          272}),
/* NxS[ 118] */ // Shortest string "0Xee0P"
      new Table(32, 53, -1, new short[] {104, -1, -1, 105, 116, 105, 
          -1, -1, -1, -1, 275, -1, 275, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 104, -1, 116, 104, 116, 105, 
          105, 104, 116, -1, -1, 116, 309, -1, 116, 116, 105, 116, 105, 105, 116}),
/* NxS[ 119] */ // Shortest string "0Xee"
      new Table(32, 55, -1, new short[] {115, -1, -1, 119, 84, 92, 
          -1, -1, 273, -1, 275, -1, 275, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 84, 115, 84, 92, 
          92, 115, 120, -1, -1, 84, 317, -1, 84, 84, 119, 84, 92, 92, 84, -1, 
          272}),
/* NxS[ 120] */ // Shortest string "0XeP"
      new Table(32, 53, -1, new short[] {104, -1, -1, 84, 84, 84, 
          -1, -1, -1, -1, 275, -1, 275, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 104, -1, 84, 104, 84, 84, 
          84, 104, 84, -1, -1, 84, 315, -1, 84, 84, 84, 84, 84, 84, 84}),
/* NxS[ 121] */ // Shortest string "0Xee\\\n"
      new Table(32, 55, -1, new short[] {115, -1, -1, 119, 84, 92, 
          -1, -1, 273, -1, 275, -1, 275, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 84, 115, 84, 92, 
          92, 115, 120, -1, -1, 84, 317, -1, 84, 84, 119, 84, 92, 92, 84, -1, 
          272}),
/* NxS[ 122] */ // Shortest string "0Xe\\\n"
      new Table(64, 51, -1, new short[] {93, -1, 84, 93, 84, 92, 
          92, 93, 120, -1, -1, 84, 314, -1, 84, 84, 119, 84, 92, 92, 84, -1, 
          272, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 93, -1, -1, 119, 84, 92, -1, -1, 273}),
/* NxS[ 123] */ // Shortest string "0_s"
      new Table(33, 45, 123, new short[] {-1, -1, 123, 123, 123, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 123, -1, 123, 123, 123, 123, 123, 
          123, 123, -1, -1, 123, 324, -1}),
/* NxS[ 124] */ // Shortest string "de"
      new Table(64, 48, -1, new short[] {3, -1, 3, 3, 3, 3, 
          3, 3, 3, -1, -1, 3, 331, -1, 3, 3, 3, 3, 125, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, -1, -1, 3, 3, 3}),
/* NxS[ 125] */ // Shortest string "def"
      new Table(33, 46, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, -1, -1, 3, 332, -1, 126}),
/* NxS[ 126] */ // Shortest string "defi"
      new Table(64, 48, -1, new short[] {3, -1, 3, 3, 3, 3, 
          3, 3, 3, -1, -1, 3, 333, -1, 3, 3, 3, 3, 3, 3, 127, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, -1, -1, 3, 3, 3}),
/* NxS[ 127] */ // Shortest string "defin"
      new Table(33, 48, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, -1, -1, 3, 334, -1, 3, 3, 128}),
/* NxS[ 128] */ // Shortest string "define"
      new Table(64, 48, -1, new short[] {3, -1, 3, 3, 3, 3, 
          3, 3, 3, -1, -1, 3, 335, -1, 3, 3, 3, 3, 3, 129, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, -1, -1, 3, 3, 3}),
/* NxS[ 129] */ // Shortest string "defined"
      new Table(33, 45, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, -1, -1, 3, 328, -1}),
/* NxS[ 130] */ new Table(0, 0, -1, null), // Shortest string "\\s"
/* NxS[ 131] */ // Shortest string "\\\t"
      new Table(3, 32, 130, new short[] {133, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 131, 132}),
/* NxS[ 132] */ // Shortest string "\\<"
      new Table(34, 1, -1, new short[] {342}),
/* NxS[ 133] */ new Table(0, 0, -1, null), // Shortest string "\\\t\n"
/* NxS[ 134] */ // Shortest string "si"
      new Table(33, 47, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, -1, -1, 3, 348, -1, 3, 135}),
/* NxS[ 135] */ // Shortest string "siz"
      new Table(33, 48, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, -1, -1, 3, 349, -1, 3, 3, 136}),
/* NxS[ 136] */ // Shortest string "size"
      new Table(64, 48, -1, new short[] {3, -1, 3, 3, 3, 3, 
          3, 3, 3, -1, -1, 3, 350, -1, 3, 3, 3, 137, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, -1, -1, 3, 3, 3}),
/* NxS[ 137] */ // Shortest string "sizeo"
      new Table(64, 48, -1, new short[] {3, -1, 3, 3, 3, 3, 
          3, 3, 3, -1, -1, 3, 351, -1, 3, 3, 3, 3, 138, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, -1, -1, 3, 3, 3}),
/* NxS[ 138] */ // Shortest string "sizeof"
      new Table(33, 45, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, -1, -1, 3, 328, -1}),
/* NxS[ 139] */ // Shortest string "s"
      new Table(41, 10, 139, new short[] {-1, 139, 139, 139, 139, 139, 
          139, 139, 139, -1}),
/* NxS[ 140] */ new Table(0, 0, -1, null), // Shortest string "/"
/* NxS[ 141] */ new Table(0, 0, -1, null), // Shortest string "*s"
/* NxS[ 142] */ new Table(0, 0, -1, null), // Shortest string "*/"
/* NxS[ 143] */ // Shortest string "s"
      new Table(2, 2, 143, new short[] {-1, -1}),
/* NxS[ 144] */ new Table(0, 0, -1, null), // Shortest string "\n"
/* NxS[ 145] */ new Table(0, 0, -1, null), // Shortest string "\\s"
/* NxS[ 146] */ // Shortest string "\\\t"
      new Table(2, 33, 145, new short[] {361, 145, 145, 145, 145, 145, 
          145, 145, -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 
          145, 145, 145, 145, 145, 145, 145, 145, 145, 146, 147}),
/* NxS[ 147] */ // Shortest string "\\<"
      new Table(34, 1, -1, new short[] {362}),
/* NxS[ 148] */ new Table(0, 0, -1, null), // Shortest string "\\<<EOF>>"
/* NxS[ 149] */ new Table(0, 0, -1, null), // Shortest string "\\\\n"
/* NxS[ 150] */ // Shortest string ""
      new Table(31, 53, 3, new short[] {-1, 5, 6, 7, 3, 3, 
          3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 
          23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, -1, 3, 34, 3, 
          3, 3, 34, 3, -1, -1, 1, 151, 2, 3, 3, 3, 3, 3, 4}),
/* NxS[ 151] */ // Shortest string "\\"
      new Table(3, 32, 130, new short[] {6, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 130, 130, 130, 131, 132}),
/* NxS[ 152] */ // Shortest string "8\\"
      new Table(3, 1, -1, new short[] {34}),
/* NxS[ 153] */ // Shortest string "8_"
      new Table(66, 46, -1, new short[] {47, -1, 47, 47, 47, -1, 
          47, -1, -1, 47, 177, -1, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 
          47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 
          47, -1, -1, -1, -1, 47, 47, 47}),
/* NxS[ 154] */ // Shortest string "0.\\"
      new Table(3, 1, -1, new short[] {176}),
/* NxS[ 155] */ // Shortest string "0._"
      new Table(66, 46, -1, new short[] {45, -1, 45, 45, 45, -1, 
          45, -1, -1, 45, 167, -1, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 
          45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 
          45, -1, -1, -1, -1, 45, 45, 45}),
/* NxS[ 156] */ // Shortest string ".0\\"
      new Table(3, 1, -1, new short[] {40}),
/* NxS[ 157] */ // Shortest string ".0_"
      new Table(66, 46, -1, new short[] {43, -1, 43, 43, 43, -1, 
          43, -1, -1, 43, 158, -1, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 
          43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 
          43, -1, -1, -1, -1, 43, 43, 43}),
/* NxS[ 158] */ // Shortest string ".0s\\"
      new Table(3, 1, -1, new short[] {157}),
/* NxS[ 159] */ // Shortest string ".0_s\\"
      new Table(3, 1, -1, new short[] {160}),
/* NxS[ 160] */ // Shortest string ".0_s\\\n"
      new Table(33, 45, 43, new short[] {-1, -1, 43, 43, 43, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, 43, 43, 43, 43, 43, 
          43, 43, -1, -1, 43, 159, -1}),
/* NxS[ 161] */ // Shortest string ".0e\\"
      new Table(3, 1, -1, new short[] {165}),
/* NxS[ 162] */ // Shortest string ".0e-"
      new Table(64, 43, -1, new short[] {44, -1, -1, 44, -1, -1, 
          -1, 44, -1, -1, -1, -1, 163, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 44}),
/* NxS[ 163] */ // Shortest string ".0e-\\"
      new Table(3, 1, -1, new short[] {162}),
/* NxS[ 164] */ // Shortest string ".0e0\\"
      new Table(3, 1, -1, new short[] {44}),
/* NxS[ 165] */ // Shortest string ".0e\\\n"
      new Table(32, 53, -1, new short[] {44, -1, -1, 41, 41, 41, 
          -1, -1, -1, -1, 162, -1, 162, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, 41, 44, 41, 41, 
          41, 44, 41, -1, -1, 41, 161, -1, 41, 41, 41, 41, 41, 41, 41}),
/* NxS[ 166] */ // Shortest string ""
      new Table(66, 46, -1, new short[] {41, -1, 41, 41, 41, -1, 
          41, -1, -1, 41, 158, -1, 41, 41, 41, 41, 41, 41, 41, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 41, 41, 41}),
/* NxS[ 167] */ // Shortest string "0.s\\"
      new Table(3, 1, -1, new short[] {155}),
/* NxS[ 168] */ // Shortest string "0._s\\"
      new Table(3, 1, -1, new short[] {169}),
/* NxS[ 169] */ // Shortest string "0._s\\\n"
      new Table(33, 45, 45, new short[] {-1, -1, 45, 45, 45, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, 45, 45, 45, 45, 45, 
          45, 45, -1, -1, 45, 168, -1}),
/* NxS[ 170] */ // Shortest string "0.e\\"
      new Table(3, 1, -1, new short[] {174}),
/* NxS[ 171] */ // Shortest string "0.e-"
      new Table(64, 43, -1, new short[] {46, -1, -1, 46, -1, -1, 
          -1, 46, -1, -1, -1, -1, 172, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 46}),
/* NxS[ 172] */ // Shortest string "0.e-\\"
      new Table(3, 1, -1, new short[] {171}),
/* NxS[ 173] */ // Shortest string "0.e0\\"
      new Table(3, 1, -1, new short[] {46}),
/* NxS[ 174] */ // Shortest string "0.e\\\n"
      new Table(32, 53, -1, new short[] {46, -1, -1, 38, 38, 38, 
          -1, -1, -1, -1, 171, -1, 171, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, 38, 46, 38, 38, 
          38, 46, 38, -1, -1, 38, 170, -1, 38, 38, 38, 38, 38, 38, 38}),
/* NxS[ 175] */ // Shortest string ""
      new Table(66, 46, -1, new short[] {38, -1, 38, 38, 38, -1, 
          38, -1, -1, 38, 167, -1, 38, 38, 38, 38, 38, 38, 38, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 38, 38, 38}),
/* NxS[ 176] */ // Shortest string "0.\\\n"
      new Table(64, 48, -1, new short[] {40, -1, 38, 40, 38, 38, 
          38, 40, 39, -1, -1, 38, 154, -1, 38, 38, 39, 38, 38, 38, 38, -1, 
          155, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 40, -1, -1, 39, 38, 38}),
/* NxS[ 177] */ // Shortest string "8s\\"
      new Table(3, 1, -1, new short[] {153}),
/* NxS[ 178] */ // Shortest string "8_s\\"
      new Table(3, 1, -1, new short[] {179}),
/* NxS[ 179] */ // Shortest string "8_s\\\n"
      new Table(33, 45, 47, new short[] {-1, -1, 47, 47, 47, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, 47, 47, 47, 47, 47, 
          47, 47, -1, -1, 47, 178, -1}),
/* NxS[ 180] */ // Shortest string "8e\\"
      new Table(3, 1, -1, new short[] {189}),
/* NxS[ 181] */ // Shortest string "0e-"
      new Table(64, 43, -1, new short[] {48, -1, -1, 48, -1, -1, 
          -1, 48, -1, -1, -1, -1, 182, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 48}),
/* NxS[ 182] */ // Shortest string "0e-\\"
      new Table(3, 1, -1, new short[] {181}),
/* NxS[ 183] */ // Shortest string "0e0\\"
      new Table(3, 1, -1, new short[] {48}),
/* NxS[ 184] */ // Shortest string "0e0_"
      new Table(66, 46, -1, new short[] {50, -1, 50, 50, 50, -1, 
          50, -1, -1, 50, 185, -1, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
          50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
          50, -1, -1, -1, -1, 50, 50, 50}),
/* NxS[ 185] */ // Shortest string "0e0s\\"
      new Table(3, 1, -1, new short[] {184}),
/* NxS[ 186] */ // Shortest string "0e0_s\\"
      new Table(3, 1, -1, new short[] {187}),
/* NxS[ 187] */ // Shortest string "0e0_s\\\n"
      new Table(33, 45, 50, new short[] {-1, -1, 50, 50, 50, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, -1, 50, 50, 50, 50, 50, 
          50, 50, -1, -1, 50, 186, -1}),
/* NxS[ 188] */ // Shortest string ""
      new Table(66, 46, -1, new short[] {49, -1, 49, 49, 49, -1, 
          49, -1, -1, 49, 185, -1, 49, 49, 49, 49, 49, 49, 49, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 49, 49, 49}),
/* NxS[ 189] */ // Shortest string "8e\\\n"
      new Table(32, 53, -1, new short[] {48, -1, -1, 35, 35, 35, 
          -1, -1, -1, -1, 181, -1, 181, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, 35, 48, 35, 35, 
          35, 48, 35, -1, -1, 35, 180, -1, 35, 35, 35, 35, 35, 35, 35}),
/* NxS[ 190] */ // Shortest string ""
      new Table(66, 46, -1, new short[] {35, -1, 35, 35, 35, -1, 
          35, -1, -1, 35, 177, -1, 35, 35, 35, 35, 35, 35, 35, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 35, 35, 35}),
/* NxS[ 191] */ // Shortest string "#\\"
      new Table(3, 1, -1, new short[] {192}),
/* NxS[ 192] */ // Shortest string "#\\\n"
      new Table(53, 24, -1, new short[] {51, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 191}),
/* NxS[ 193] */ // Shortest string "%\\"
      new Table(3, 1, -1, new short[] {194}),
/* NxS[ 194] */ // Shortest string "%\\\n"
      new Table(43, 34, -1, new short[] {52, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 193}),
/* NxS[ 195] */ // Shortest string "^\\"
      new Table(3, 1, -1, new short[] {196}),
/* NxS[ 196] */ // Shortest string "^\\\n"
      new Table(43, 34, -1, new short[] {53, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 195}),
/* NxS[ 197] */ // Shortest string "/\\"
      new Table(3, 1, -1, new short[] {198}),
/* NxS[ 198] */ // Shortest string "/\\\n"
      new Table(41, 36, -1, new short[] {54, -1, 55, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, 197}),
/* NxS[ 199] */ // Shortest string "&\\"
      new Table(3, 1, -1, new short[] {200}),
/* NxS[ 200] */ // Shortest string "&\\\n"
      new Table(43, 34, -1, new short[] {57, -1, -1, -1, -1, -1, 
          58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 199}),
/* NxS[ 201] */ // Shortest string "!\\"
      new Table(3, 1, -1, new short[] {202}),
/* NxS[ 202] */ // Shortest string "!\\\n"
      new Table(43, 34, -1, new short[] {59, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 201}),
/* NxS[ 203] */ // Shortest string "?\\"
      new Table(3, 1, -1, new short[] {204}),
/* NxS[ 204] */ // Shortest string "?\\\n"
      new Table(40, 37, -1, new short[] {60, -1, -1, -1, -1, -1, 
          61, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 203}),
/* NxS[ 205] */ // Shortest string "|\\"
      new Table(3, 1, -1, new short[] {206}),
/* NxS[ 206] */ // Shortest string "|\\\n"
      new Table(43, 34, -1, new short[] {63, -1, 64, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 205}),
/* NxS[ 207] */ // Shortest string "+\\"
      new Table(3, 1, -1, new short[] {208}),
/* NxS[ 208] */ // Shortest string "+\\\n"
      new Table(43, 34, -1, new short[] {65, 66, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 207}),
/* NxS[ 209] */ // Shortest string "=\\"
      new Table(3, 1, -1, new short[] {210}),
/* NxS[ 210] */ // Shortest string "=\\\n"
      new Table(38, 39, -1, new short[] {67, -1, -1, -1, -1, 68, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          209}),
/* NxS[ 211] */ // Shortest string "-\\"
      new Table(3, 1, -1, new short[] {214}),
/* NxS[ 212] */ // Shortest string "->\\"
      new Table(3, 1, -1, new short[] {213}),
/* NxS[ 213] */ // Shortest string "->\\\n"
      new Table(41, 36, -1, new short[] {72, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 212}),
/* NxS[ 214] */ // Shortest string "-\\\n"
      new Table(38, 39, -1, new short[] {69, -1, -1, -1, 70, 71, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          211}),
/* NxS[ 215] */ // Shortest string "*\\"
      new Table(3, 1, -1, new short[] {216}),
/* NxS[ 216] */ // Shortest string "*\\\n"
      new Table(43, 34, -1, new short[] {73, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 215}),
/* NxS[ 217] */ // Shortest string ".\\"
      new Table(3, 1, -1, new short[] {220}),
/* NxS[ 218] */ // Shortest string ".."
      new Table(40, 37, -1, new short[] {75, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 219}),
/* NxS[ 219] */ // Shortest string "..\\"
      new Table(3, 1, -1, new short[] {218}),
/* NxS[ 220] */ // Shortest string ".\\\n"
      new Table(32, 45, -1, new short[] {40, -1, -1, -1, -1, -1, 
          -1, -1, 218, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, 40, -1, -1, 
          -1, 40, -1, -1, -1, -1, 217}),
/* NxS[ 221] */ // Shortest string ":\\"
      new Table(3, 1, -1, new short[] {222}),
/* NxS[ 222] */ // Shortest string ":\\\n"
      new Table(39, 38, -1, new short[] {76, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 221}),
/* NxS[ 223] */ // Shortest string ">\\"
      new Table(3, 1, -1, new short[] {226}),
/* NxS[ 224] */ // Shortest string ">>\\"
      new Table(3, 1, -1, new short[] {225}),
/* NxS[ 225] */ // Shortest string ">>\\\n"
      new Table(43, 34, -1, new short[] {79, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 224}),
/* NxS[ 226] */ // Shortest string ">\\\n"
      new Table(38, 39, -1, new short[] {77, -1, -1, -1, -1, 78, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          223}),
/* NxS[ 227] */ // Shortest string "<\\"
      new Table(3, 1, -1, new short[] {232}),
/* NxS[ 228] */ // Shortest string "<=\\"
      new Table(3, 1, -1, new short[] {229}),
/* NxS[ 229] */ // Shortest string "<=\\\n"
      new Table(2, 37, -1, new short[] {228, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 82}),
/* NxS[ 230] */ // Shortest string "<<\\"
      new Table(3, 1, -1, new short[] {231}),
/* NxS[ 231] */ // Shortest string "<<\\\n"
      new Table(43, 34, -1, new short[] {83, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 230}),
/* NxS[ 232] */ // Shortest string "<\\\n"
      new Table(2, 42, -1, new short[] {227, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 80, -1, -1, -1, -1, -1, 
          -1, -1, -1, 81}),
/* NxS[ 233] */ // Shortest string "\t\\"
      new Table(3, 1, -1, new short[] {6}),
/* NxS[ 234] */ // Shortest string "0\\"
      new Table(3, 1, -1, new short[] {5}),
/* NxS[ 235] */ // Shortest string "0_"
      new Table(66, 46, -1, new short[] {123, -1, 123, 123, 123, -1, 
          123, -1, -1, 123, 323, -1, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 
          123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 
          123, -1, -1, -1, -1, 123, 123, 123}),
/* NxS[ 236] */ // Shortest string "08"
      new Table(32, 49, -1, new short[] {236, -1, -1, 320, -1, -1, 
          -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 236, 236, -1, 236, -1, -1, 
          -1, 236, 320, -1, -1, -1, 319, -1, -1, -1, 320}),
/* NxS[ 237] */ // Shortest string "0B\\"
      new Table(3, 1, -1, new short[] {244}),
/* NxS[ 238] */ // Shortest string "0B0\\"
      new Table(3, 1, -1, new short[] {89}),
/* NxS[ 239] */ // Shortest string "0B0_"
      new Table(66, 46, -1, new short[] {91, -1, 91, 91, 91, -1, 
          91, -1, -1, 91, 240, -1, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 
          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 
          91, -1, -1, -1, -1, 91, 91, 91}),
/* NxS[ 240] */ // Shortest string "0B0s\\"
      new Table(3, 1, -1, new short[] {239}),
/* NxS[ 241] */ // Shortest string "0B0_s\\"
      new Table(3, 1, -1, new short[] {242}),
/* NxS[ 242] */ // Shortest string "0B0_s\\\n"
      new Table(33, 45, 91, new short[] {-1, -1, 91, 91, 91, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 91, -1, 91, 91, 91, 91, 91, 
          91, 91, -1, -1, 91, 241, -1}),
/* NxS[ 243] */ // Shortest string ""
      new Table(66, 46, -1, new short[] {90, -1, 90, 90, 90, -1, 
          90, -1, -1, 90, 240, -1, 90, 90, 90, 90, 90, 90, 90, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 90, 90, 90}),
/* NxS[ 244] */ // Shortest string "0B\\\n"
      new Table(66, 46, -1, new short[] {84, -1, 84, 84, 84, 89, 
          84, -1, -1, 84, 237, -1, 84, 84, 84, 84, 84, 84, 84, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 89, -1, -1, 84, 84, 84}),
/* NxS[ 245] */ // Shortest string "0s\\"
      new Table(3, 1, -1, new short[] {246}),
/* NxS[ 246] */ // Shortest string "0s\\\n"
      new Table(66, 46, -1, new short[] {84, -1, 84, 84, 84, -1, 
          84, -1, -1, 84, 245, -1, 84, 84, 84, 84, 84, 84, 84, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 84, 84, 84}),
/* NxS[ 247] */ // Shortest string "0X\\"
      new Table(3, 1, -1, new short[] {318}),
/* NxS[ 248] */ // Shortest string "0X."
      new Table(64, 48, -1, new short[] {250, -1, -1, 250, -1, 250, 
          250, 250, -1, -1, -1, -1, 249, -1, -1, -1, 250, -1, 250, 250, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 250, -1, -1, 250, -1, 250}),
/* NxS[ 249] */ // Shortest string "0X.\\"
      new Table(3, 1, -1, new short[] {248}),
/* NxS[ 250] */ // Shortest string "0X.e"
      new Table(64, 48, -1, new short[] {250, -1, -1, 250, -1, 250, 
          250, 250, 253, -1, -1, -1, 251, -1, -1, -1, 252, -1, 250, 250, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 250, -1, -1, 252, -1, 250}),
/* NxS[ 251] */ // Shortest string "0X.e\\"
      new Table(3, 1, -1, new short[] {250}),
/* NxS[ 252] */ // Shortest string "0X.ee"
      new Table(32, 52, -1, new short[] {97, -1, -1, 252, -1, 250, 
          -1, -1, -1, -1, 255, -1, 255, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 97, -1, -1, 97, -1, 250, 
          250, 97, 253, -1, -1, -1, 263, -1, -1, -1, 252, -1, 250, 250}),
/* NxS[ 253] */ // Shortest string "0X.eP"
      new Table(32, 45, -1, new short[] {94, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 255, -1, 255, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 94, -1, -1, 94, -1, -1, 
          -1, 94, -1, -1, -1, -1, 254}),
/* NxS[ 254] */ // Shortest string "0X.eP\\"
      new Table(3, 1, -1, new short[] {253}),
/* NxS[ 255] */ // Shortest string "0X.ee-"
      new Table(64, 43, -1, new short[] {94, -1, -1, 94, -1, -1, 
          -1, 94, -1, -1, -1, -1, 256, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 94}),
/* NxS[ 256] */ // Shortest string "0X.ee-\\"
      new Table(3, 1, -1, new short[] {255}),
/* NxS[ 257] */ // Shortest string "0X.eP0\\"
      new Table(3, 1, -1, new short[] {94}),
/* NxS[ 258] */ // Shortest string "0X.ee0_"
      new Table(66, 46, -1, new short[] {96, -1, 96, 96, 96, -1, 
          96, -1, -1, 96, 259, -1, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 
          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 
          96, -1, -1, -1, -1, 96, 96, 96}),
/* NxS[ 259] */ // Shortest string "0X.ee0s\\"
      new Table(3, 1, -1, new short[] {258}),
/* NxS[ 260] */ // Shortest string "0X.ee0_s\\"
      new Table(3, 1, -1, new short[] {261}),
/* NxS[ 261] */ // Shortest string "0X.ee0_s\\\n"
      new Table(33, 45, 96, new short[] {-1, -1, 96, 96, 96, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 96, -1, 96, 96, 96, 96, 96, 
          96, 96, -1, -1, 96, 260, -1}),
/* NxS[ 262] */ // Shortest string ""
      new Table(66, 46, -1, new short[] {95, -1, 95, 95, 95, -1, 
          95, -1, -1, 95, 259, -1, 95, 95, 95, 95, 95, 95, 95, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 95, 95, 95}),
/* NxS[ 263] */ // Shortest string "0X.ee\\"
      new Table(3, 1, -1, new short[] {252}),
/* NxS[ 264] */ // Shortest string "0X.ee0\\"
      new Table(3, 1, -1, new short[] {97}),
/* NxS[ 265] */ // Shortest string "0X.ee0P\\"
      new Table(3, 1, -1, new short[] {266}),
/* NxS[ 266] */ // Shortest string "0X.ee0P\\\n"
      new Table(32, 53, -1, new short[] {94, -1, -1, 95, 95, 95, 
          -1, -1, -1, -1, 255, -1, 255, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 94, -1, 95, 94, 95, 95, 
          95, 94, 95, -1, -1, 95, 265, -1, 95, 95, 95, 95, 95, 95, 95}),
/* NxS[ 267] */ // Shortest string "0X.ee0f\\"
      new Table(3, 1, -1, new short[] {270}),
/* NxS[ 268] */ // Shortest string "0X.ee0e\\"
      new Table(3, 1, -1, new short[] {269}),
/* NxS[ 269] */ // Shortest string "0X.ee0e\\\n"
      new Table(32, 53, -1, new short[] {97, -1, -1, 98, 95, 99, 
          -1, -1, -1, -1, 255, -1, 255, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 97, -1, 95, 97, 95, 99, 
          99, 97, 100, -1, -1, 95, 268, -1, 95, 95, 98, 95, 99, 99, 95}),
/* NxS[ 270] */ // Shortest string "0X.ee0f\\\n"
      new Table(64, 48, -1, new short[] {250, -1, 95, 250, 95, 99, 
          99, 250, 100, -1, -1, 95, 267, -1, 95, 95, 98, 95, 99, 99, 95, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 250, -1, -1, 98, 95, 99}),
/* NxS[ 271] */ // Shortest string "0X0\\"
      new Table(3, 1, -1, new short[] {93}),
/* NxS[ 272] */ // Shortest string "0Xe_"
      new Table(66, 46, -1, new short[] {114, -1, 114, 114, 114, -1, 
          114, -1, -1, 114, 284, -1, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 
          114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 
          114, -1, -1, -1, -1, 114, 114, 114}),
/* NxS[ 273] */ // Shortest string "0Xe."
      new Table(64, 48, -1, new short[] {250, -1, -1, 250, -1, 250, 
          250, 250, 288, -1, -1, -1, 286, -1, -1, -1, 287, -1, 250, 250, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 250, -1, -1, 287, -1, 250}),
/* NxS[ 274] */ // Shortest string "0X0P\\"
      new Table(3, 1, -1, new short[] {283}),
/* NxS[ 275] */ // Shortest string "0Xee-"
      new Table(64, 43, -1, new short[] {104, -1, -1, 104, -1, -1, 
          -1, 104, -1, -1, -1, -1, 276, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 104}),
/* NxS[ 276] */ // Shortest string "0Xee-\\"
      new Table(3, 1, -1, new short[] {275}),
/* NxS[ 277] */ // Shortest string "0XeP0\\"
      new Table(3, 1, -1, new short[] {104}),
/* NxS[ 278] */ // Shortest string "0XeP0_"
      new Table(66, 46, -1, new short[] {106, -1, 106, 106, 106, -1, 
          106, -1, -1, 106, 279, -1, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 
          106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 
          106, -1, -1, -1, -1, 106, 106, 106}),
/* NxS[ 279] */ // Shortest string "0XeP0s\\"
      new Table(3, 1, -1, new short[] {278}),
/* NxS[ 280] */ // Shortest string "0XeP0_s\\"
      new Table(3, 1, -1, new short[] {281}),
/* NxS[ 281] */ // Shortest string "0XeP0_s\\\n"
      new Table(33, 45, 106, new short[] {-1, -1, 106, 106, 106, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 106, -1, 106, 106, 106, 106, 106, 
          106, 106, -1, -1, 106, 280, -1}),
/* NxS[ 282] */ // Shortest string ""
      new Table(66, 46, -1, new short[] {105, -1, 105, 105, 105, -1, 
          105, -1, -1, 105, 279, -1, 105, 105, 105, 105, 105, 105, 105, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 105, 105, 105}),
/* NxS[ 283] */ // Shortest string "0X0P\\\n"
      new Table(32, 53, -1, new short[] {104, -1, -1, -1, 101, -1, 
          -1, -1, -1, -1, 275, -1, 275, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 104, -1, 101, 104, 101, -1, 
          -1, 104, 101, -1, -1, 101, 274, -1, 101, 101, -1, 101, -1, -1, 101}),
/* NxS[ 284] */ // Shortest string "0Xe_\\"
      new Table(3, 1, -1, new short[] {285}),
/* NxS[ 285] */ // Shortest string "0Xe_\\\n"
      new Table(66, 45, -1, new short[] {101, -1, 101, -1, -1, -1, 
          101, -1, -1, 101, 284, -1, 101, 101, -1, 101, -1, -1, 101, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 101}),
/* NxS[ 286] */ // Shortest string "0Xe.\\"
      new Table(3, 1, -1, new short[] {273}),
/* NxS[ 287] */ // Shortest string "0Xe.e"
      new Table(32, 52, -1, new short[] {110, -1, -1, 252, -1, 250, 
          -1, -1, -1, -1, 290, -1, 290, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, -1, 110, -1, 250, 
          250, 110, 253, -1, -1, -1, 299, -1, -1, -1, 252, -1, 250, 250}),
/* NxS[ 288] */ // Shortest string "0Xe.P"
      new Table(32, 45, -1, new short[] {107, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 290, -1, 290, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 107, -1, -1, 107, -1, -1, 
          -1, 107, -1, -1, -1, -1, 289}),
/* NxS[ 289] */ // Shortest string "0Xe.P\\"
      new Table(3, 1, -1, new short[] {288}),
/* NxS[ 290] */ // Shortest string "0Xe.e-"
      new Table(64, 43, -1, new short[] {107, -1, -1, 107, -1, -1, 
          -1, 107, -1, -1, -1, -1, 291, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 107}),
/* NxS[ 291] */ // Shortest string "0Xe.e-\\"
      new Table(3, 1, -1, new short[] {290}),
/* NxS[ 292] */ // Shortest string "0Xe.P0\\"
      new Table(3, 1, -1, new short[] {107}),
/* NxS[ 293] */ // Shortest string "0Xe.e0_"
      new Table(66, 46, -1, new short[] {109, -1, 109, 109, 109, -1, 
          109, -1, -1, 109, 294, -1, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 
          109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 
          109, -1, -1, -1, -1, 109, 109, 109}),
/* NxS[ 294] */ // Shortest string "0Xe.e0_\\"
      new Table(3, 1, -1, new short[] {293}),
/* NxS[ 295] */ // Shortest string "0Xe.e0_s\\"
      new Table(3, 1, -1, new short[] {296}),
/* NxS[ 296] */ // Shortest string "0Xe.e0_s\\\n"
      new Table(33, 45, 109, new short[] {-1, -1, 109, 109, 109, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 109, -1, 109, 109, 109, 109, 109, 
          109, 109, -1, -1, 109, 295, -1}),
/* NxS[ 297] */ // Shortest string "0Xe.e0s\\"
      new Table(3, 1, -1, new short[] {298}),
/* NxS[ 298] */ // Shortest string "0Xe.e0s\\\n"
      new Table(66, 46, -1, new short[] {108, -1, 108, 108, 108, -1, 
          108, -1, -1, 108, 297, -1, 108, 108, 108, 108, 108, 108, 108, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 108, 108, 108}),
/* NxS[ 299] */ // Shortest string "0Xe.e\\"
      new Table(3, 1, -1, new short[] {287}),
/* NxS[ 300] */ // Shortest string "0Xe.e0\\"
      new Table(3, 1, -1, new short[] {110}),
/* NxS[ 301] */ // Shortest string "0Xe.e0P\\"
      new Table(3, 1, -1, new short[] {302}),
/* NxS[ 302] */ // Shortest string "0Xe.e0P\\\n"
      new Table(32, 53, -1, new short[] {94, -1, -1, 108, 108, 108, 
          -1, -1, -1, -1, 255, -1, 255, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 94, -1, 108, 94, 108, 108, 
          108, 94, 108, -1, -1, 108, 301, -1, 108, 108, 108, 108, 108, 108, 108}),
/* NxS[ 303] */ // Shortest string "0Xe.e0f\\"
      new Table(3, 1, -1, new short[] {306}),
/* NxS[ 304] */ // Shortest string "0Xe.e0e\\"
      new Table(3, 1, -1, new short[] {305}),
/* NxS[ 305] */ // Shortest string "0Xe.e0e\\\n"
      new Table(32, 53, -1, new short[] {97, -1, -1, 111, 108, 112, 
          -1, -1, -1, -1, 255, -1, 255, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 97, -1, 108, 97, 108, 112, 
          112, 97, 113, -1, -1, 108, 304, -1, 108, 108, 111, 108, 112, 112, 108}),
/* NxS[ 306] */ // Shortest string "0Xe.e0f\\\n"
      new Table(64, 48, -1, new short[] {250, -1, 108, 250, 108, 112, 
          112, 250, 113, -1, -1, 108, 303, -1, 108, 108, 111, 108, 112, 112, 108, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 250, -1, -1, 111, 108, 112}),
/* NxS[ 307] */ // Shortest string "0Xe_s\\"
      new Table(3, 1, -1, new short[] {308}),
/* NxS[ 308] */ // Shortest string "0Xe_s\\\n"
      new Table(33, 45, 114, new short[] {-1, -1, 114, 114, 114, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 114, -1, 114, 114, 114, 114, 114, 
          114, 114, -1, -1, 114, 307, -1}),
/* NxS[ 309] */ // Shortest string "0Xee0P\\"
      new Table(3, 1, -1, new short[] {310}),
/* NxS[ 310] */ // Shortest string "0Xee0P\\\n"
      new Table(32, 53, -1, new short[] {104, -1, -1, 105, 116, 105, 
          -1, -1, -1, -1, 275, -1, 275, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 104, -1, 116, 104, 116, 105, 
          105, 104, 116, -1, -1, 116, 309, -1, 116, 116, 105, 116, 105, 105, 116}),
/* NxS[ 311] */ // Shortest string "0Xee0s\\"
      new Table(3, 1, -1, new short[] {312}),
/* NxS[ 312] */ // Shortest string "0Xee0s\\\n"
      new Table(66, 46, -1, new short[] {116, -1, 116, 105, 105, -1, 
          116, -1, -1, 116, 311, -1, 116, 116, 105, 116, 105, 105, 116, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 105, 116, 105}),
/* NxS[ 313] */ // Shortest string "0X0e\\"
      new Table(3, 1, -1, new short[] {117}),
/* NxS[ 314] */ // Shortest string "0Xe\\"
      new Table(3, 1, -1, new short[] {122}),
/* NxS[ 315] */ // Shortest string "0XeP\\"
      new Table(3, 1, -1, new short[] {316}),
/* NxS[ 316] */ // Shortest string "0XeP\\\n"
      new Table(32, 53, -1, new short[] {104, -1, -1, 84, 84, 84, 
          -1, -1, -1, -1, 275, -1, 275, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 104, -1, 84, 104, 84, 84, 
          84, 104, 84, -1, -1, 84, 315, -1, 84, 84, 84, 84, 84, 84, 84}),
/* NxS[ 317] */ // Shortest string "0Xee\\"
      new Table(3, 1, -1, new short[] {121}),
/* NxS[ 318] */ // Shortest string "0X\\\n"
      new Table(64, 51, -1, new short[] {93, -1, 84, 93, 84, 92, 
          92, 93, 84, -1, -1, 84, 247, -1, 84, 84, 92, 84, 92, 92, 84, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 93, -1, -1, 92, 84, 92, -1, -1, 248}),
/* NxS[ 319] */ // Shortest string "08\\"
      new Table(3, 1, -1, new short[] {236}),
/* NxS[ 320] */ // Shortest string "08e"
      new Table(32, 45, -1, new short[] {48, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 181, -1, 181, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, 48, -1, -1, 
          -1, 48, -1, -1, -1, -1, 321}),
/* NxS[ 321] */ // Shortest string "08e\\"
      new Table(3, 1, -1, new short[] {320}),
/* NxS[ 322] */ // Shortest string "00\\"
      new Table(3, 1, -1, new short[] {86}),
/* NxS[ 323] */ // Shortest string "0_\\"
      new Table(3, 1, -1, new short[] {235}),
/* NxS[ 324] */ // Shortest string "0_s\\"
      new Table(3, 1, -1, new short[] {325}),
/* NxS[ 325] */ // Shortest string "0_s\\\n"
      new Table(33, 45, 123, new short[] {-1, -1, 123, 123, 123, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 123, -1, 123, 123, 123, 123, 123, 
          123, 123, -1, -1, 123, 324, -1}),
/* NxS[ 326] */ // Shortest string "0e\\"
      new Table(3, 1, -1, new short[] {327}),
/* NxS[ 327] */ // Shortest string "0e\\\n"
      new Table(32, 53, -1, new short[] {48, -1, -1, 84, 84, 84, 
          -1, -1, -1, -1, 181, -1, 181, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, 84, 48, 84, 84, 
          84, 48, 84, -1, -1, 84, 326, -1, 84, 84, 84, 84, 84, 84, 84}),
/* NxS[ 328] */ // Shortest string "i\\"
      new Table(3, 1, -1, new short[] {329}),
/* NxS[ 329] */ // Shortest string "i\\\n"
      new Table(33, 45, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, -1, -1, 3, 328, -1}),
/* NxS[ 330] */ // Shortest string "d\\"
      new Table(3, 1, -1, new short[] {341}),
/* NxS[ 331] */ // Shortest string "de\\"
      new Table(3, 1, -1, new short[] {340}),
/* NxS[ 332] */ // Shortest string "def\\"
      new Table(3, 1, -1, new short[] {339}),
/* NxS[ 333] */ // Shortest string "defi\\"
      new Table(3, 1, -1, new short[] {338}),
/* NxS[ 334] */ // Shortest string "defin\\"
      new Table(3, 1, -1, new short[] {337}),
/* NxS[ 335] */ // Shortest string "define\\"
      new Table(3, 1, -1, new short[] {336}),
/* NxS[ 336] */ // Shortest string "define\\\n"
      new Table(64, 48, -1, new short[] {3, -1, 3, 3, 3, 3, 
          3, 3, 3, -1, -1, 3, 335, -1, 3, 3, 3, 3, 3, 129, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, -1, -1, 3, 3, 3}),
/* NxS[ 337] */ // Shortest string "defin\\\n"
      new Table(33, 48, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, -1, -1, 3, 334, -1, 3, 3, 128}),
/* NxS[ 338] */ // Shortest string "defi\\\n"
      new Table(64, 48, -1, new short[] {3, -1, 3, 3, 3, 3, 
          3, 3, 3, -1, -1, 3, 333, -1, 3, 3, 3, 3, 3, 3, 127, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, -1, -1, 3, 3, 3}),
/* NxS[ 339] */ // Shortest string "def\\\n"
      new Table(33, 46, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, -1, -1, 3, 332, -1, 126}),
/* NxS[ 340] */ // Shortest string "de\\\n"
      new Table(64, 48, -1, new short[] {3, -1, 3, 3, 3, 3, 
          3, 3, 3, -1, -1, 3, 331, -1, 3, 3, 3, 3, 125, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, -1, -1, 3, 3, 3}),
/* NxS[ 341] */ // Shortest string "d\\\n"
      new Table(33, 48, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, -1, -1, 3, 330, -1, 3, 3, 124}),
/* NxS[ 342] */ // Shortest string "\\<<"
      new Table(35, 1, -1, new short[] {343}),
/* NxS[ 343] */ // Shortest string "\\<<E"
      new Table(36, 1, -1, new short[] {344}),
/* NxS[ 344] */ // Shortest string "\\<<EO"
      new Table(37, 1, -1, new short[] {345}),
/* NxS[ 345] */ // Shortest string "\\<<EOF"
      new Table(38, 1, -1, new short[] {346}),
/* NxS[ 346] */ // Shortest string "\\<<EOF>"
      new Table(38, 1, -1, new short[] {130}),
/* NxS[ 347] */ // Shortest string "s\\"
      new Table(3, 1, -1, new short[] {356}),
/* NxS[ 348] */ // Shortest string "si\\"
      new Table(3, 1, -1, new short[] {355}),
/* NxS[ 349] */ // Shortest string "siz\\"
      new Table(3, 1, -1, new short[] {354}),
/* NxS[ 350] */ // Shortest string "size\\"
      new Table(3, 1, -1, new short[] {353}),
/* NxS[ 351] */ // Shortest string "sizeo\\"
      new Table(3, 1, -1, new short[] {352}),
/* NxS[ 352] */ // Shortest string "sizeo\\\n"
      new Table(64, 48, -1, new short[] {3, -1, 3, 3, 3, 3, 
          3, 3, 3, -1, -1, 3, 351, -1, 3, 3, 3, 3, 138, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, -1, -1, 3, 3, 3}),
/* NxS[ 353] */ // Shortest string "size\\\n"
      new Table(64, 48, -1, new short[] {3, -1, 3, 3, 3, 3, 
          3, 3, 3, -1, -1, 3, 350, -1, 3, 3, 3, 137, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, -1, -1, 3, 3, 3}),
/* NxS[ 354] */ // Shortest string "siz\\\n"
      new Table(33, 48, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, -1, -1, 3, 349, -1, 3, 3, 136}),
/* NxS[ 355] */ // Shortest string "si\\\n"
      new Table(33, 47, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, -1, -1, 3, 348, -1, 3, 135}),
/* NxS[ 356] */ // Shortest string "s\\\n"
      new Table(33, 46, 3, new short[] {-1, -1, 3, 3, 3, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 
          3, 3, -1, -1, 3, 347, -1, 134}),
/* NxS[ 357] */ // Shortest string ""
      new Table(41, 10, 139, new short[] {358, 139, 139, 139, 139, 139, 
          139, 139, 139, 140}),
/* NxS[ 358] */ // Shortest string "*"
      new Table(50, 1, 141, new short[] {142}),
/* NxS[ 359] */ // Shortest string ""
      new Table(2, 2, 143, new short[] {360, 144}),
/* NxS[ 360] */ // Shortest string "\\"
      new Table(2, 33, 145, new short[] {361, 145, 145, 145, 145, 145, 
          145, 145, -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 
          145, 145, 145, 145, 145, 145, 145, 145, 145, 146, 147}),
/* NxS[ 361] */ // Shortest string "\\\\"
      new Table(10, 1, -1, new short[] {149}),
/* NxS[ 362] */ // Shortest string "\\<<"
      new Table(35, 1, -1, new short[] {363}),
/* NxS[ 363] */ // Shortest string "\\<<E"
      new Table(36, 1, -1, new short[] {364}),
/* NxS[ 364] */ // Shortest string "\\<<EO"
      new Table(37, 1, -1, new short[] {365}),
/* NxS[ 365] */ // Shortest string "\\<<EOF"
      new Table(38, 1, -1, new short[] {366}),
/* NxS[ 366] */ // Shortest string "\\<<EOF>"
      new Table(38, 1, -1, new short[] {148}),
    };

int NextState() {
    if (code == ScanBuff.EndOfFile)
        return eofNum;
    else
        unchecked {
            int rslt;
            int idx = Map(code) - NxS[state].min;
            if (idx < 0) idx += 74;
            if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
            else rslt = NxS[state].nxt[idx];
            return rslt;
        }
}

#endregion


#if BACKUP
        // ==============================================================
        // == Nested struct used for backup in automata that do backup ==
        // ==============================================================

        struct Context // class used for automaton backup.
        {
            public int bPos;
            public int rPos; // scanner.readPos saved value
            public int cCol;
            public int lNum; // Need this in case of backup over EOL.
            public int state;
            public int cChr;
        }
        
        private Context ctx = new Context();
#endif // BACKUP

        // ==============================================================
        // ==== Nested struct to support input switching in scanners ====
        // ==============================================================

		struct BufferContext {
            internal ScanBuff buffSv;
			internal int chrSv;
			internal int cColSv;
			internal int lNumSv;
		}

        // ==============================================================
        // ===== Private methods to save and restore buffer contexts ====
        // ==============================================================

        /// <summary>
        /// This method creates a buffer context record from
        /// the current buffer object, together with some
        /// scanner state values. 
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        BufferContext MkBuffCtx()
		{
			BufferContext rslt;
			rslt.buffSv = this.buffer;
			rslt.chrSv = this.code;
			rslt.cColSv = this.cCol;
			rslt.lNumSv = this.lNum;
			return rslt;
		}

        /// <summary>
        /// This method restores the buffer value and allied
        /// scanner state from the given context record value.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void RestoreBuffCtx(BufferContext value)
		{
			this.buffer = value.buffSv;
			this.code = value.chrSv;
			this.cCol = value.cColSv;
			this.lNum = value.lNumSv;
        } 
        // =================== End Nested classes =======================

#if !NOFILES
     internal C_CPLUSPLUS_CSHARPScanner(Stream file) {
            SetSource(file, 0); // unicode option
        }

        public C_CPLUSPLUS_CSHARPScanner(Stream file, string codepage) {
            SetSource(file, CodePageHandling.GetCodePage(codepage));
        }   
#endif // !NOFILES

     internal C_CPLUSPLUS_CSHARPScanner() { }

        private int readPos;

        void GetCode()
        {
            if (code == '\n')  // This needs to be fixed for other conventions
                               // i.e. [\r\n\205\u2028\u2029]
            { 
                cCol = -1;
                lNum++;
            }
            readPos = buffer.Pos;

            // Now read new codepoint.
            code = buffer.Read();
            if (code > ScanBuff.EndOfFile)
            {
#if (!BYTEMODE)
                if (code >= 0xD800 && code <= 0xDBFF)
                {
                    int next = buffer.Read();
                    if (next < 0xDC00 || next > 0xDFFF)
                        code = ScanBuff.UnicodeReplacementChar;
                    else
                        code = (0x10000 + ((code & 0x3FF) << 10) + (next & 0x3FF));
                }
#endif
                cCol++;
            }
        }

        void MarkToken()
        {
#if (!PERSIST)
            buffer.Mark();
#endif
            tokPos = readPos;
            tokLin = lNum;
            tokCol = cCol;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokEPos = readPos;
            tokELin = lNum;
            tokECol = cCol;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int Peek()
        {
            int rslt, codeSv = code, cColSv = cCol, lNumSv = lNum, bPosSv = buffer.Pos;
            GetCode(); rslt = code;
            lNum = lNumSv; cCol = cColSv; code = codeSv; buffer.Pos = bPosSv;
            return rslt;
        }

        // ==============================================================
        // =====    Initialization of string-based input buffers     ====
        // ==============================================================

        /// <summary>
        /// Create and initialize a StringBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the input string</param>
        /// <param name="offset">starting offset in the string</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(string source, int offset)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.buffer.Pos = offset;
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

        // ================ LineBuffer Initialization ===================
        /// <summary>
        /// Create and initialize a LineBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the list of input strings</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(IList<string> source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            this.lNum = 0;
            GetCode();
        }

#if !NOFILES        
        // =============== StreamBuffer Initialization ==================

        /// <summary>
        /// Create and initialize a StreamBuff buffer object for this scanner.
        /// StreamBuff is buffer for 8-bit byte files.
        /// </summary>
        /// <param name="source">the input byte stream</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
        
#if !BYTEMODE
        // ================ TextBuffer Initialization ===================

        /// <summary>
        /// Create and initialize a TextBuff buffer object for this scanner.
        /// TextBuff is a buffer for encoded unicode files.
        /// </summary>
        /// <param name="source">the input text file</param>
        /// <param name="fallbackCodePage">Code page to use if file has
        /// no BOM. For 0, use machine default; for -1, 8-bit binary</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source, int fallbackCodePage)
        {
            this.buffer = ScanBuff.GetBuffer(source, fallbackCodePage);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
#endif // !BYTEMODE
#endif // !NOFILES
        
        // ==============================================================

#if BABEL
        //
        //  Get the next token for Visual Studio
        //
        //  "state" is the inout mode variable that maintains scanner
        //  state between calls, using the EolState property. In principle,
        //  if the calls of EolState are costly set could be called once
        //  only per line, at the start; and get called only at the end
        //  of the line. This needs more infrastructure ...
        //
        public int GetNext(ref int state, out int start, out int end)
        {
                Token next;
            int s, e;
            s = state;        // state at start
            EolState = state;
                next = (Token)Scan();
            state = EolState;
            e = state;       // state at end;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }        
#endif // BABEL

        // ======== AbstractScanner<> Implementation =========

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseToken is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yypos { get { return tokPos; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yyline { get { return tokLin; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yycol { get { return tokCol; } }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yytext")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yytext")]
        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        /// <summary>
        /// Discards all but the first "n" codepoints in the recognized pattern.
        /// Resets the buffer position so that only n codepoints have been consumed;
        /// yytext is also re-evaluated. 
        /// </summary>
        /// <param name="n">The number of codepoints to consume</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void yyless(int n)
        {
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cCol = tokCol - 1; 
            GetCode();
            // Now ensure that line counting is correct.
            lNum = tokLin;
            // And count the rest of the text.
            for (int i = 0; i < n; i++) GetCode();
            MarkEnd();
        }
       
        //
        //  It would be nice to count backward in the text
        //  but it does not seem possible to re-establish
        //  the correct column counts except by going forward.
        //
        /// <summary>
        /// Removes the last "n" code points from the pattern.
        /// </summary>
        /// <param name="n">The number to remove</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void _yytrunc(int n) { yyless(yyleng - n); }
        
        //
        // This is painful, but we no longer count
        // codepoints.  For the overwhelming majority 
        // of cases the single line code is fast, for
        // the others, well, at least it is all in the
        // buffer so no files are touched. Note that we
        // can't use (tokEPos - tokPos) because of the
        // possibility of surrogate pairs in the token.
        //
        /// <summary>
        /// The length of the pattern in codepoints (not the same as 
        /// string-length if the pattern contains any surrogate pairs).
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yyleng")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yyleng")]
        public int yyleng
        {
            get {
                if (tokELin == tokLin)
                    return tokECol - tokCol;
                else
#if BYTEMODE
                    return tokEPos - tokPos;
#else
                {
                    int ch;
                    int count = 0;
                    int save = buffer.Pos;
                    buffer.Pos = tokPos;
                    do {
                        ch = buffer.Read();
                        if (!char.IsHighSurrogate((char)ch)) count++;
                    } while (buffer.Pos < tokEPos && ch != ScanBuff.EndOfFile);
                    buffer.Pos = save;
                    return count;
                }
#endif // BYTEMODE
            }
        }
        
        // ============ methods available in actions ==============

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int YY_START {
            get { return currentScOrd; }
            set { currentScOrd = value; 
                  currentStart = startState[value]; 
            } 
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void BEGIN(int next) {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        int Scan() {
                for (; ; ) {
                    int next;              // next state to enter
#if LEFTANCHORS
                    for (;;) {
                        // Discard characters that do not start any pattern.
                        // Must check the left anchor condition after *every* GetCode!
                        state = ((cCol == 0) ? anchorState[currentScOrd] : currentStart);
                        if ((next = NextState()) != goStart) break; // LOOP EXIT HERE...
                        GetCode();
                    }
                    
#else // !LEFTANCHORS
                    state = currentStart;
                    while ((next = NextState()) == goStart) {
                        // At this point, the current character has no
                        // transition from the current state.  We discard 
                        // the "no-match" char.   In traditional LEX such 
                        // characters are echoed to the console.
                        GetCode();
                    }
#endif // LEFTANCHORS                    
                    // At last, a valid transition ...    
                    MarkToken();
                    state = next;
                    GetCode();                    
#if BACKUP
                    bool contextSaved = false;
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                        if (state <= maxAccept && next > maxAccept) { // need to prepare backup data
                            // Store data for the *latest* accept state that was found.
                            SaveStateAndPos( ref ctx );
                            contextSaved = true;
                        }
                        state = next;
                        GetCode();
                    }
                    if (state > maxAccept && contextSaved)
                        RestoreStateAndPos( ref ctx );
#else  // BACKUP
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                         state = next;
                         GetCode();
                    }
#endif // BACKUP
                    if (state <= maxAccept) {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162, 1522
    switch (state)
    {
        case eofNum:
            switch (currentStart) {
                case 357:
throw new InvalidDataException("unterminated /*");
                    break;
            }
            if (yywrap())
                return (int)Token.EOF;
            break;
        case 1: // Recognized '{Identifier}',	Shortest string "s"
        case 3: // Recognized '{Identifier}',	Shortest string "i"
        case 4: // Recognized '{Identifier}',	Shortest string "d"
        case 124: // Recognized '{Identifier}',	Shortest string "de"
        case 125: // Recognized '{Identifier}',	Shortest string "def"
        case 126: // Recognized '{Identifier}',	Shortest string "defi"
        case 127: // Recognized '{Identifier}',	Shortest string "defin"
        case 128: // Recognized '{Identifier}',	Shortest string "define"
        case 134: // Recognized '{Identifier}',	Shortest string "si"
        case 135: // Recognized '{Identifier}',	Shortest string "siz"
        case 136: // Recognized '{Identifier}',	Shortest string "size"
        case 137: // Recognized '{Identifier}',	Shortest string "sizeo"
Console.WriteLine("token: {0}", yytext); GetIdentifier(); return (int)Token.IDENTIFIER;
            break;
        case 2: // Recognized '\n',	Shortest string "\n"
Console.WriteLine("token: {0}", yytext); return (int)Token.NEWLINE;
            break;
        case 5: // Recognized '{octLit}((\\\n)*{numberSuffix})?',	Shortest string "0"
        case 84: // Recognized '{octLit}((\\\n)*{numberSuffix})?',	Shortest string "0s"
        case 85: // Recognized '{octLit}((\\\n)*{numberSuffix})?',	Shortest string "0e"
        case 86: // Recognized '{octLit}((\\\n)*{numberSuffix})?',	Shortest string "00"
        case 87: // Recognized '{octLit}((\\\n)*{numberSuffix})?',	Shortest string "0X"
        case 88: // Recognized '{octLit}((\\\n)*{numberSuffix})?',	Shortest string "0B"
        case 92: // Recognized '{octLit}((\\\n)*{numberSuffix})?',	Shortest string "0Xe"
        case 119: // Recognized '{octLit}((\\\n)*{numberSuffix})?',	Shortest string "0Xee"
        case 120: // Recognized '{octLit}((\\\n)*{numberSuffix})?',	Shortest string "0XeP"
        case 123: // Recognized '{octLit}((\\\n)*{numberSuffix})?',	Shortest string "0_s"
Console.WriteLine("token: {0}", yytext); GetNumber(); return (int)Token.NUMBER;
            break;
        case 6: // Recognized '{Whitespace}+',	Shortest string "\t"
/* skip */
            break;
        case 7: // Recognized '[<]',	Shortest string "<"
Console.WriteLine("token: {0}", yytext); return (int)Token.LESS_THEN;
            break;
        case 8: // Recognized '[>]',	Shortest string ">"
Console.WriteLine("token: {0}", yytext); return (int)Token.GREATER_THEN;
            break;
        case 9: // Recognized ':',	Shortest string ":"
Console.WriteLine("token: {0}", yytext); return (int)Token.COLON;
            break;
        case 10: // Recognized '\.',	Shortest string "."
Console.WriteLine("token: {0}", yytext); return (int)Token.PERIOD;
            break;
        case 11: // Recognized '\*',	Shortest string "*"
Console.WriteLine("token: {0}", yytext); return (int)Token.ASTERISK;
            break;
        case 12: // Recognized '-',	Shortest string "-"
Console.WriteLine("token: {0}", yytext); return (int)Token.MINUS_SIGN;
            break;
        case 13: // Recognized '=',	Shortest string "="
Console.WriteLine("token: {0}", yytext); return (int)Token.EQUAL_SIGN;
            break;
        case 14: // Recognized '\+',	Shortest string "+"
Console.WriteLine("token: {0}", yytext); return (int)Token.PLUS_SIGN;
            break;
        case 15: // Recognized '\|',	Shortest string "|"
Console.WriteLine("token: {0}", yytext); return (int)Token.PIPE;
            break;
        case 16: // Recognized '\?',	Shortest string "?"
Console.WriteLine("token: {0}", yytext); return (int)Token.QUESTION_MARK;
            break;
        case 17: // Recognized '\[',	Shortest string "["
Console.WriteLine("token: {0}", yytext); return (int)Token.L_SQ_BRACKET;
            break;
        case 18: // Recognized '!',	Shortest string "!"
Console.WriteLine("token: {0}", yytext); return (int)Token.EXCLAIMATION_MARK;
            break;
        case 19: // Recognized '&',	Shortest string "&"
Console.WriteLine("token: {0}", yytext); return (int)Token.AMPERSTAND;
            break;
        case 20: // Recognized '/',	Shortest string "/"
Console.WriteLine("token: {0}", yytext); return (int)Token.FORWARD_SLASH;
            break;
        case 21: // Recognized '\^',	Shortest string "^"
Console.WriteLine("token: {0}", yytext); return (int)Token.CARROT;
            break;
        case 22: // Recognized '%',	Shortest string "%"
Console.WriteLine("token: {0}", yytext); return (int)Token.PERCENT;
            break;
        case 23: // Recognized '#',	Shortest string "#"
Console.WriteLine("token: {0}", yytext); return (int)Token.HASH;
            break;
        case 24: // Recognized '\]',	Shortest string "]"
Console.WriteLine("token: {0}", yytext); return (int)Token.R_SQ_BRACKET;
            break;
        case 25: // Recognized '\(',	Shortest string "("
Console.WriteLine("token: {0}", yytext); return (int)Token.L_PAREN;
            break;
        case 26: // Recognized '\)',	Shortest string ")"
Console.WriteLine("token: {0}", yytext); return (int)Token.R_PAREN;
            break;
        case 27: // Recognized '\{',	Shortest string "{"
Console.WriteLine("token: {0}", yytext); return (int)Token.L_CURLY_BRACE;
            break;
        case 28: // Recognized '\}',	Shortest string "}"
Console.WriteLine("token: {0}", yytext); return (int)Token.R_CURLY_BRACE;
            break;
        case 29: // Recognized '~',	Shortest string "~"
Console.WriteLine("token: {0}", yytext); return (int)Token.TILDE;
            break;
        case 30: // Recognized ',',	Shortest string ","
Console.WriteLine("token: {0}", yytext); return (int)Token.COMMA;
            break;
        case 31: // Recognized ';',	Shortest string ";"
Console.WriteLine("token: {0}", yytext); return (int)Token.SEMI_COLON;
            break;
        case 32: // Recognized '@',	Shortest string "@"
Console.WriteLine("token: {0}", yytext); return (int)Token.AT;
            break;
        case 33: // Recognized '`',	Shortest string "`"
Console.WriteLine("token: {0}", yytext); return (int)Token.GRAVE;
            break;
        case 34: // Recognized '{decimalLit}((\\\n)*{numberSuffix})?',	Shortest string "8"
        case 35: // Recognized '{decimalLit}((\\\n)*{numberSuffix})?',	Shortest string "8s"
        case 36: // Recognized '{decimalLit}((\\\n)*{numberSuffix})?',	Shortest string "8e"
        case 47: // Recognized '{decimalLit}((\\\n)*{numberSuffix})?',	Shortest string "8_s"
Console.WriteLine("token: {0}", yytext); GetNumber(); return (int)Token.NUMBER;
            break;
        case 37: // Recognized '{mandDigSepSeq}(\\\n)*\.((\\\n)*{floatExp})?((\\\n)*{floatSufix})?',	Shortest string "0."
        case 38: // Recognized '{mandDigSepSeq}(\\\n)*\.((\\\n)*{floatExp})?((\\\n)*{floatSufix})?',	Shortest string "0.s"
        case 39: // Recognized '{mandDigSepSeq}(\\\n)*\.((\\\n)*{floatExp})?((\\\n)*{floatSufix})?',	Shortest string "0.e"
        case 45: // Recognized '{mandDigSepSeq}(\\\n)*\.((\\\n)*{floatExp})?((\\\n)*{floatSufix})?',	Shortest string "0._s"
        case 46: // Recognized '{mandDigSepSeq}(\\\n)*\.((\\\n)*{floatExp})?((\\\n)*{floatSufix})?',	Shortest string "0.e0"
Console.WriteLine("token: {0}", yytext); GetNumber(); return (int)Token.NUMBER;
            break;
        case 40: // Recognized '({mandDigSepSeq}(\\\n)*)?\.(\\\n)*{mandDigSepSeq}((\\\n)*{floatExp})?((\\\n)*{floatSufix})?',	Shortest string ".0"
        case 41: // Recognized '({mandDigSepSeq}(\\\n)*)?\.(\\\n)*{mandDigSepSeq}((\\\n)*{floatExp})?((\\\n)*{floatSufix})?',	Shortest string ".0s"
        case 42: // Recognized '({mandDigSepSeq}(\\\n)*)?\.(\\\n)*{mandDigSepSeq}((\\\n)*{floatExp})?((\\\n)*{floatSufix})?',	Shortest string ".0e"
        case 43: // Recognized '({mandDigSepSeq}(\\\n)*)?\.(\\\n)*{mandDigSepSeq}((\\\n)*{floatExp})?((\\\n)*{floatSufix})?',	Shortest string ".0_s"
        case 44: // Recognized '({mandDigSepSeq}(\\\n)*)?\.(\\\n)*{mandDigSepSeq}((\\\n)*{floatExp})?((\\\n)*{floatSufix})?',	Shortest string ".0e0"
Console.WriteLine("token: {0}", yytext); GetNumber(); return (int)Token.NUMBER;
            break;
        case 48: // Recognized '{mandDigSepSeq}(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0e0"
        case 49: // Recognized '{mandDigSepSeq}(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0e0s"
        case 50: // Recognized '{mandDigSepSeq}(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0e0_s"
Console.WriteLine("token: {0}", yytext); GetNumber(); return (int)Token.NUMBER;
            break;
        case 51: // Recognized '#(\\\n)*#',	Shortest string "##"
Console.WriteLine("token: {0}", yytext); return (int)Token.HASH_HASH;
            break;
        case 52: // Recognized '%(\\\n)*=',	Shortest string "%="
Console.WriteLine("token: {0}", yytext); return (int)Token.PERCENT_EQUALS;
            break;
        case 53: // Recognized '\^(\\\n)*=',	Shortest string "^="
Console.WriteLine("token: {0}", yytext); return (int)Token.CARROT_EQUALS;
            break;
        case 54: // Recognized '/(\\\n)*\*',	Shortest string "/*"
BEGIN(C_COMMENT); curTokVal.Clear(); curTokVal.Append("/*");
            break;
        case 55: // Recognized '/(\\\n)*=',	Shortest string "/="
Console.WriteLine("token: {0}", yytext); return (int)Token.FORWARD_SLASH_EQUALS;
            break;
        case 56: // Recognized '/(\\\n)*/',	Shortest string "/\0"
_yytrunc(1); 
BEGIN(CPP_COMMENT); curTokVal.Clear(); curTokVal.Append("//");
            break;
        case 57: // Recognized '&(\\\n)*=',	Shortest string "&="
Console.WriteLine("token: {0}", yytext); return (int)Token.AMPERSTAND_EQUALS;
            break;
        case 58: // Recognized '&(\\\n)*&',	Shortest string "&&"
Console.WriteLine("token: {0}", yytext); return (int)Token.AMPERSTAND_AMPERSTAND;
            break;
        case 59: // Recognized '!(\\\n)*=',	Shortest string "!="
Console.WriteLine("token: {0}", yytext); return (int)Token.NOT_EQUALS;
            break;
        case 60: // Recognized '\?(\\\n)*\.',	Shortest string "?."
Console.WriteLine("token: {0}", yytext); return (int)Token.QUESTION_MARK_PERIOD;
            break;
        case 61: // Recognized '\?(\\\n)*\?',	Shortest string "??"
Console.WriteLine("token: {0}", yytext); return (int)Token.QUESTION_MARK_QUESTION_MARK;
            break;
        case 62: // Recognized '\?(\\\n)*\[',	Shortest string "?["
Console.WriteLine("token: {0}", yytext); return (int)Token.QUESTION_MARK_L_SQ_BRACKET;
            break;
        case 63: // Recognized '\|(\\\n)*=',	Shortest string "|="
Console.WriteLine("token: {0}", yytext); return (int)Token.PIPE_EQUALS;
            break;
        case 64: // Recognized '\|(\\\n)*\|',	Shortest string "||"
Console.WriteLine("token: {0}", yytext); return (int)Token.PIPE_PIPE;
            break;
        case 65: // Recognized '\+(\\\n)*=',	Shortest string "+="
Console.WriteLine("token: {0}", yytext); return (int)Token.PLUS_EQUALS;
            break;
        case 66: // Recognized '\+(\\\n)*\+',	Shortest string "++"
Console.WriteLine("token: {0}", yytext); return (int)Token.PLUS_PLUS;
            break;
        case 67: // Recognized '=(\\\n)*>',	Shortest string "=>"
Console.WriteLine("token: {0}", yytext); return (int)Token.EQUALS_SIGN_GREATER_THEN;
            break;
        case 68: // Recognized '=(\\\n)*=',	Shortest string "=="
Console.WriteLine("token: {0}", yytext); return (int)Token.EQUALS_EQUALS;
            break;
        case 69: // Recognized '-(\\\n)*>',	Shortest string "->"
Console.WriteLine("token: {0}", yytext); return (int)Token.THIN_ARROW;
            break;
        case 70: // Recognized '-(\\\n)*-',	Shortest string "--"
Console.WriteLine("token: {0}", yytext); return (int)Token.MINUS_MINUS;
            break;
        case 71: // Recognized '-(\\\n)*=',	Shortest string "-="
Console.WriteLine("token: {0}", yytext); return (int)Token.MINUS_EQUALS;
            break;
        case 72: // Recognized '-(\\\n)*>(\\\n)*\*',	Shortest string "->*"
Console.WriteLine("token: {0}", yytext); return (int)Token.THIN_ARROW_STAR;
            break;
        case 73: // Recognized '\*(\\\n)*=',	Shortest string "*="
Console.WriteLine("token: {0}", yytext); return (int)Token.ASTERISK_EQUALS;
            break;
        case 74: // Recognized '\.(\\\n)*\*',	Shortest string ".*"
Console.WriteLine("token: {0}", yytext); return (int)Token.DOT_STAR;
            break;
        case 75: // Recognized '\.(\\\n)*\.(\\\n)*\.',	Shortest string "..."
Console.WriteLine("token: {0}", yytext); return (int)Token.ELLIPSE;
            break;
        case 76: // Recognized ':(\\\n)*:',	Shortest string "::"
Console.WriteLine("token: {0}", yytext); return (int)Token.COLON_COLON;
            break;
        case 77: // Recognized '[>](\\\n)*[>]',	Shortest string ">>"
Console.WriteLine("token: {0}", yytext); return (int)Token.GREATER_THEN_GRATER_THEN;
            break;
        case 78: // Recognized '[>](\\\n)*=',	Shortest string ">="
Console.WriteLine("token: {0}", yytext); return (int)Token.GREATER_THEN_OR_EQUAL_TO;
            break;
        case 79: // Recognized '[>](\\\n)*[>](\\\n)*=',	Shortest string ">>="
Console.WriteLine("token: {0}", yytext); return (int)Token.GREATER_THEN_GREATER_THEN_EQUALS;
            break;
        case 80: // Recognized '[<](\\\n)*[<]',	Shortest string "<<"
Console.WriteLine("token: {0}", yytext); return (int)Token.LESS_THEN_LESS_THEN;
            break;
        case 81: // Recognized '[<](\\\n)*=',	Shortest string "<="
Console.WriteLine("token: {0}", yytext); return (int)Token.LESS_THEN_OR_EQUAL_TO;
            break;
        case 82: // Recognized '[<](\\\n)*=(\\\n)*[>]',	Shortest string "<=>"
Console.WriteLine("token: {0}", yytext); return (int)Token.SAUCER;
            break;
        case 83: // Recognized '[<](\\\n)*[<](\\\n)*=',	Shortest string "<<="
Console.WriteLine("token: {0}", yytext); return (int)Token.LESS_THEN_LESS_THEN_EQUALS;
            break;
        case 89: // Recognized '{binLit}((\\\n)*{numberSuffix})?',	Shortest string "0B0"
        case 90: // Recognized '{binLit}((\\\n)*{numberSuffix})?',	Shortest string "0B0s"
        case 91: // Recognized '{binLit}((\\\n)*{numberSuffix})?',	Shortest string "0B0_s"
Console.WriteLine("token: {0}", yytext); GetNumber(); return (int)Token.NUMBER;
            break;
        case 93: // Recognized '{hexLit}((\\\n)*{hexNumberSuffix})?',	Shortest string "0X0"
        case 101: // Recognized '{hexLit}((\\\n)*{hexNumberSuffix})?',	Shortest string "0X0s"
        case 102: // Recognized '{hexLit}((\\\n)*{hexNumberSuffix})?',	Shortest string "0X0e"
        case 103: // Recognized '{hexLit}((\\\n)*{hexNumberSuffix})?',	Shortest string "0X0P"
        case 114: // Recognized '{hexLit}((\\\n)*{hexNumberSuffix})?',	Shortest string "0Xe_s"
        case 115: // Recognized '{hexLit}((\\\n)*{hexNumberSuffix})?',	Shortest string "0Xee0"
        case 116: // Recognized '{hexLit}((\\\n)*{hexNumberSuffix})?',	Shortest string "0Xee0s"
        case 117: // Recognized '{hexLit}((\\\n)*{hexNumberSuffix})?',	Shortest string "0Xee0e"
        case 118: // Recognized '{hexLit}((\\\n)*{hexNumberSuffix})?',	Shortest string "0Xee0P"
        case 121: // Recognized '{hexLit}((\\\n)*{hexNumberSuffix})?',	Shortest string "0Xee\\\n"
        case 122: // Recognized '{hexLit}((\\\n)*{hexNumberSuffix})?',	Shortest string "0Xe\\\n"
Console.WriteLine("token: {0}", yytext); GetNumber(); return (int)Token.NUMBER;
            break;
        case 94: // Recognized '0(\\\n)*[xX](\\\n)*({mandHexSeq}(\\\n)*)?\.(\\\n)*{mandHexSeq}(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0X.eP0"
        case 95: // Recognized '0(\\\n)*[xX](\\\n)*({mandHexSeq}(\\\n)*)?\.(\\\n)*{mandHexSeq}(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0X.ee0s"
        case 96: // Recognized '0(\\\n)*[xX](\\\n)*({mandHexSeq}(\\\n)*)?\.(\\\n)*{mandHexSeq}(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0X.ee0_s"
        case 97: // Recognized '0(\\\n)*[xX](\\\n)*({mandHexSeq}(\\\n)*)?\.(\\\n)*{mandHexSeq}(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0X.ee0"
        case 98: // Recognized '0(\\\n)*[xX](\\\n)*({mandHexSeq}(\\\n)*)?\.(\\\n)*{mandHexSeq}(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0X.ee0e"
        case 99: // Recognized '0(\\\n)*[xX](\\\n)*({mandHexSeq}(\\\n)*)?\.(\\\n)*{mandHexSeq}(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0X.ee0f"
        case 100: // Recognized '0(\\\n)*[xX](\\\n)*({mandHexSeq}(\\\n)*)?\.(\\\n)*{mandHexSeq}(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0X.ee0P"
Console.WriteLine("token: {0}", yytext); GetNumber(); return (int)Token.NUMBER;
            break;
        case 104: // Recognized '0(\\\n)*[xX](\\\n)*{mandHexSeq}(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0XeP0"
        case 105: // Recognized '0(\\\n)*[xX](\\\n)*{mandHexSeq}(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0XeP0s"
        case 106: // Recognized '0(\\\n)*[xX](\\\n)*{mandHexSeq}(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0XeP0_s"
Console.WriteLine("token: {0}", yytext); GetNumber(); return (int)Token.NUMBER;
            break;
        case 107: // Recognized '0(\\\n)*[xX](\\\n)*{mandHexSeq}(\\\n)*\.(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0Xe.P0"
        case 108: // Recognized '0(\\\n)*[xX](\\\n)*{mandHexSeq}(\\\n)*\.(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0Xe.e0s"
        case 109: // Recognized '0(\\\n)*[xX](\\\n)*{mandHexSeq}(\\\n)*\.(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0Xe.e0_s"
        case 110: // Recognized '0(\\\n)*[xX](\\\n)*{mandHexSeq}(\\\n)*\.(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0Xe.e0"
        case 111: // Recognized '0(\\\n)*[xX](\\\n)*{mandHexSeq}(\\\n)*\.(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0Xe.e0e"
        case 112: // Recognized '0(\\\n)*[xX](\\\n)*{mandHexSeq}(\\\n)*\.(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0Xe.e0f"
        case 113: // Recognized '0(\\\n)*[xX](\\\n)*{mandHexSeq}(\\\n)*\.(\\\n)*{floatExp}((\\\n)*{floatSufix})?',	Shortest string "0Xe.e0P"
Console.WriteLine("token: {0}", yytext); GetNumber(); return (int)Token.NUMBER;
            break;
        case 129: // Recognized 'd(\\\n)*e(\\\n)*f(\\\n)*i(\\\n)*n(\\\n)*e(\\\n)*d',	Shortest string "defined"
Console.WriteLine("token: {0}", yytext); return (int)Token.DEFINED;
            break;
        case 130: // Recognized '\\{Space}*([^\n]|<<EOF>>)',	Shortest string "\\s"
        case 131: // Recognized '\\{Space}*([^\n]|<<EOF>>)',	Shortest string "\\\t"
        case 132: // Recognized '\\{Space}*([^\n]|<<EOF>>)',	Shortest string "\\<"
throw new InvalidDataException("Unexpected \\");
            break;
        case 133: // Recognized '\\{Space}*\n',	Shortest string "\\\t\n"
/* skip */
            break;
        case 138: // Recognized 's(\\\n)*i(\\\n)*z(\\\n)*e(\\\n)*o(\\\n)*f',	Shortest string "sizeof"
Console.WriteLine("token: {0}", yytext); return (int)Token.SIZEOF;
            break;
        case 139: // In <C_COMMENT> Recognized '[^*/]+',	Shortest string "s"
curTokVal.Append(yytext);
            break;
        case 140: // In <C_COMMENT> Recognized '/',	Shortest string "/"
curTokVal.Append(yytext);
            break;
        case 141: // In <C_COMMENT> Recognized '\*[^/]',	Shortest string "*s"
curTokVal.Append(yytext);
            break;
        case 142: // In <C_COMMENT> Recognized '\*[/]',	Shortest string "*/"
curTokVal.Append(yytext); Console.WriteLine("token: {0}", curTokVal.ToString()); GetComment(); BEGIN(INITIAL); return (int)Token.COMMENT;
            break;
        case 143: // In <CPP_COMMENT> Recognized '[^\\\n]+',	Shortest string "s"
curTokVal.Append(yytext);
            break;
        case 144: // In <CPP_COMMENT> Recognized '\n',	Shortest string "\n"
curTokVal.Append(yytext); Console.WriteLine("token: {0}", curTokVal.ToString()); GetComment(); BEGIN(INITIAL); return (int)Token.COMMENT;
            break;
        case 145: // In <CPP_COMMENT> Recognized '\\{Space}*[^\\n]',	Shortest string "\\s"
        case 146: // In <CPP_COMMENT> Recognized '\\{Space}*[^\\n]',	Shortest string "\\\t"
        case 147: // In <CPP_COMMENT> Recognized '\\{Space}*[^\\n]',	Shortest string "\\<"
curTokVal.Append(yytext);
            break;
        case 148: // In <CPP_COMMENT> Recognized '\\{Space}*<<EOF>>',	Shortest string "\\<<EOF>>"
throw new InvalidDataException("unterminated //");
            break;
        case 149: // In <CPP_COMMENT> Recognized '\\{Space}*\\n',	Shortest string "\\\\n"
curTokVal.Append(yytext);
            break;
        default:
            break;
    }
#pragma warning restore 162, 1522
#endregion
                    }
                }
        }

#if BACKUP
        void SaveStateAndPos(ref Context ctx) {
            ctx.bPos  = buffer.Pos;
            ctx.rPos  = readPos;
            ctx.cCol  = cCol;
            ctx.lNum  = lNum;
            ctx.state = state;
            ctx.cChr  = code;
        }

        void RestoreStateAndPos(ref Context ctx) {
            buffer.Pos = ctx.bPos;
            readPos = ctx.rPos;
            cCol  = ctx.cCol;
            lNum  = ctx.lNum;
            state = ctx.state;
            code  = ctx.cChr;
        }
#endif  // BACKUP

        // ============= End of the tokenizer code ================

#if STACK        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void yy_clear_stack() { scStack.Clear(); }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int yy_top_state() { return scStack.Peek(); }
        
        internal void yy_push_state(int state)
        {
            scStack.Push(currentScOrd);
            BEGIN(state);
        }
        
        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
				int newSc = scStack.Pop();
				BEGIN(newSc);
            } // Otherwise leave stack unchanged.
        }
 #endif // STACK

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void ECHO() { Console.Out.Write(yytext); }
        
    } // end class $Scanner


} // end namespace
